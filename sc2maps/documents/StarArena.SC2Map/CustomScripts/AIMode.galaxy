// Player AI Mode
const int c_AIModeNone = 0; // 手动
const int c_AIModeAttack = 1; // 进攻
const int c_AIModeHunter = 2; // 猎杀
const int c_AIModeFarmming = 3; // 收割
const int c_AIModeDefence = 4; // 防御
const int c_AIModeRetreat = 5; // 撤退
const int c_AIModeEnd = 6;

static unitgroup gv_aimode_allStructures;
static unitgroup gv_aimode_allCenters;

static timer gv_aimode_loopTimer;

static trigger gt_aimode_GameLoop;
static trigger gt_aimode_DamageUnit;
static trigger gt_aimode_KillUnit;

static const int c_aimode_reviveInterval = 10;
static const int c_aimode_willRechargeCD = 6;

static const int c_aimode_stateTotalTakenDamage = 0;
static const int c_aimode_stateWillBrokenTime = 1;
static const int c_aimode_stateOriginAIMode = 2;
static const int c_aimode_stateModeEntered = 3;
static const int c_aimode_stateHuntTarget = 4;

void InitAIMode();
bool AIModeValidMode(int aiMode);
void AIModeSetMode(UnitPlayerRef refPlayer, int inMode);

static void aimode_GameLoop_Init();
static void aimode_PlayerStep(UnitPlayerRef inPlayer, unit inUnit);
static void aimode_AttackStep(UnitPlayerRef refPlayer, unit inUnit);
static void aimode_HunterStep(UnitPlayerRef refPlayer, unit inUnit);
static void aimode_FarmmingStep(UnitPlayerRef refPlayer, unit inUnit);
static void aimode_DefenceStep(UnitPlayerRef refPlayer, unit inUnit);
static void aimode_RetreatStep(UnitPlayerRef refPlayer, unit inUnit);
static void aimode_DamageUnit_Init();
static void aimode_KillUnit_Init();

void InitAIMode() {
    gv_aimode_allStructures = UnitGroupFromId(3);
    gv_aimode_allCenters = UnitGroupFromId(2);

    gv_aimode_loopTimer = TimerCreate();
    TimerStart(gv_aimode_loopTimer, 0.1, true, c_timeReal);

    aimode_GameLoop_Init();
    aimode_DamageUnit_Init();
    aimode_KillUnit_Init();
}

bool AIModeValidMode(int inMode) {
    if (inMode >= c_AIModeNone && inMode < c_AIModeEnd) {
        return true;
    }
    return false;
}

void AIModeSetMode(UnitPlayerRef refPlayer, int inMode) {
    if (refPlayer.aiMode != inMode) {
        refPlayer.aiMode = inMode;
        refPlayer.aiStates[c_aimode_stateModeEntered] = c_AIModeNone;
        refPlayer.aiStates[c_aimode_stateHuntTarget] = 0;

        if (inMode == c_AIModeNone) {
            refPlayer.aiStates[c_aimode_stateTotalTakenDamage] = 0;
            refPlayer.aiStates[c_aimode_stateWillBrokenTime] = 0;
            refPlayer.aiStates[c_aimode_stateOriginAIMode] = 0;
        }
    } else if (refPlayer.aiMode == c_AIModeDefence) {
        refPlayer.aiStates[c_aimode_stateOriginAIMode] = 0;
    }
}

bool aimode_GameLoop_Func(bool testConds, bool runActions) {
    UnitPlayerArray lv_players;
    int index;
    unit lv_unit;
    
    if (!runActions) {
        return true;
    }

    UnitPlayersGetAll(lv_players);
    for (index = 0; index < UnitPlayersCount(); index += 1) {
        lv_unit = DataTableGetUnit(true, arena_gv_unitNamePrefix + lv_players[index].name);
        if (UnitIsAlive(lv_unit)) {
            if (lv_players[index].aiMode == c_AIModeAttack) {
                aimode_AttackStep(lv_players[index], lv_unit);
            } else if (lv_players[index].aiMode == c_AIModeHunter) {
                aimode_HunterStep(lv_players[index], lv_unit);
            } else if (lv_players[index].aiMode == c_AIModeFarmming) {
                aimode_FarmmingStep(lv_players[index], lv_unit);
            } else if (lv_players[index].aiMode == c_AIModeDefence) {
                aimode_DefenceStep(lv_players[index], lv_unit);
            } else if (lv_players[index].aiMode == c_AIModeRetreat) {
                aimode_RetreatStep(lv_players[index], lv_unit);
            }
        }
    }

    for (index = 0; index < UnitPlayersCount(); index += 1) {
        lv_unit = DataTableGetUnit(true, arena_gv_unitNamePrefix + lv_players[index].name);
        aimode_PlayerStep(lv_players[index], lv_unit);
    }

    return true;
}

static void aimode_GameLoop_Init() {
    gt_aimode_GameLoop = TriggerCreate("aimode_GameLoop_Func");
    TriggerAddEventTimer(gt_aimode_GameLoop, gv_aimode_loopTimer);
}

static void aimode_PlayerStep(UnitPlayerRef refPlayer, unit inUnit) {
    UnitData lv_unitData;
    int lv_willBrokenTime;
    order lv_initOrder;
    string lv_pointName;
    int lv_levelUpCosts;
    AbilityData lv_ability;
    int lv_abilType;
    int lv_maxTakenDamage;
    int lv_index;

    if (UnitIsAlive(inUnit)) {
        lv_willBrokenTime = refPlayer.aiStates[c_aimode_stateWillBrokenTime];
        if (lv_willBrokenTime == 0) {
            lv_maxTakenDamage = (UnitBehaviorCount(inUnit, "StarArenaToughnessEnhance") + UnitBehaviorCount(inUnit, "StarArenaToughnessEnhanceAddition") + 2) * 400;
            if (lv_maxTakenDamage > UnitGetPropertyInt(inUnit, c_unitPropLifeMax, true) * 4 / 5) {
                lv_maxTakenDamage = UnitGetPropertyInt(inUnit, c_unitPropLifeMax, true) * 4 / 5;
            }
            if (refPlayer.aiStates[c_aimode_stateTotalTakenDamage] >= lv_maxTakenDamage) {
                refPlayer.aiStates[c_aimode_stateWillBrokenTime] = DateTimeToInt(CurrentDateTimeGet());
                refPlayer.aiStates[c_aimode_stateOriginAIMode] = refPlayer.aiMode;
                AIModeSetMode(refPlayer, c_AIModeDefence);
                SaveUnitPlayer(refPlayer);
            }
        } else if (lv_willBrokenTime > 0 && refPlayer.aiMode != c_AIModeDefence) {
            AIModeSetMode(refPlayer, c_AIModeDefence);
            SaveUnitPlayer(refPlayer);
        }

        if (UnitGetPropertyInt(inUnit, c_unitPropEnergy, true) == UnitGetPropertyInt(inUnit, c_unitPropEnergyMax, true) && 
            UnitPlayerAbilityCount(refPlayer) <= 0 && 
            refPlayer.abilityType == AbilityDataGetType(c_AbilityTypeNone) && 
            refPlayer.savedAbilities[0] != -1) {

            for (lv_index = 0; lv_index < c_UnitPlayerAbilityQueueCap; lv_index += 1) {
                if (!AbilityDataGet(AbilityDataExToAbil(refPlayer.savedAbilities[lv_index]), lv_ability)) {
                    break;
                }
                UnitPlayerPushAbility(refPlayer, refPlayer.savedAbilities[lv_index]);
            }
        }

        if (refPlayer.aiMode != c_AIModeDefence && AbilityDataGetByType(refPlayer.abilityType, lv_ability) && UnitIsAlive(OrderGetTargetUnit(UnitOrder(inUnit, 0)))) {
            if (FixedToInt(AbilityDataGetCoolDown(inUnit, lv_ability)) <= 0) {
                if (AbilityDataCast(inUnit, OrderGetTargetUnit(UnitOrder(inUnit, 0)), lv_ability)) {
                    TextTagDestroy(refPlayer.abilsTextTag);
                    refPlayer.abilsTextTag = TextTagCreate(StringToText(UnitPlayerPrintAbilityQueue(refPlayer)), 20, Point(0, 0), 0, true, false, PlayerGroupAll());
                    TextTagSetPosition(refPlayer.abilsTextTag, UnitGetPosition(inUnit), 5);
                    TextTagAttachToUnit(refPlayer.abilsTextTag, inUnit, 5);
                    TextTagSetTime(refPlayer.abilsTextTag, c_textTagTimeDuration, 8);
                }
            } else if (AbilityDataCheckComplete(inUnit, lv_ability, AbilityDataIsExAbil(UnitPlayerGetTailAbility(refPlayer)))) {
                lv_abilType = UnitPlayerPopAbility(refPlayer);
                if (AbilityDataGet(AbilityDataExToAbil(lv_abilType), lv_ability)) {
                    lv_ability.initialCost = AbilityDataAbilCost(lv_abilType, lv_ability.initialCost);
                    if (UnitGetPropertyInt(inUnit, c_unitPropEnergy, true) >= lv_ability.initialCost) {
                        AbilityDataApply(inUnit, refPlayer.abilityType, lv_ability.type);
                        refPlayer.abilityType = lv_ability.type;
                        UnitSetPropertyInt(inUnit, c_unitPropEnergy, UnitGetPropertyInt(inUnit, c_unitPropEnergy, true) - lv_ability.initialCost);
                        refPlayer.aiStates[c_aimode_stateTotalTakenDamage] -= lv_ability.initialCost * 10;
                        if (refPlayer.aiStates[c_aimode_stateTotalTakenDamage] < 0) {
                            refPlayer.aiStates[c_aimode_stateTotalTakenDamage] = 0;
                        }
                    } else {
                        UnitPlayerClearAbilityQueue(refPlayer);
                        AbilityDataApply(inUnit, refPlayer.abilityType, AbilityDataGetType(c_AbilityTypeNone));
                        refPlayer.abilityType = AbilityDataGetType(c_AbilityTypeNone);
                        TextTagDestroy(refPlayer.abilsTextTag);
                        refPlayer.abilsTextTag = TextTagCreate(StringToText("能量不足"), 20, Point(0, 0), 0, true, false, PlayerGroupAll());
                        TextTagSetPosition(refPlayer.abilsTextTag, UnitGetPosition(inUnit), 5);
                        TextTagAttachToUnit(refPlayer.abilsTextTag, inUnit, 5);
                        TextTagSetTime(refPlayer.abilsTextTag, c_textTagTimeDuration, 8);
                    }
                } else {
                    AbilityDataApply(inUnit, refPlayer.abilityType, AbilityDataGetType(c_AbilityTypeNone));
                    refPlayer.abilityType = AbilityDataGetType(c_AbilityTypeNone);
                }
            }
            SaveUnitPlayer(refPlayer);
        }

        if (UnitDataGetByUnitType(refPlayer.unitType, lv_unitData)) {
            lv_levelUpCosts = UnitDataGetMaxExp(refPlayer.unitType, refPlayer.level);
            if (refPlayer.exp >= lv_levelUpCosts) {
                refPlayer.level += 1;
                if (refPlayer.points < refPlayer.maxPoints) {
                    if (refPlayer.maxPoints >= refPlayer.points + 4) {
                        refPlayer.points += 4;
                        refPlayer.maxPoints -= 4;
                    } else {
                        refPlayer.points += refPlayer.maxPoints;
                        refPlayer.maxPoints = 0;
                    }
                } else {
                    refPlayer.points += 1;
                }
                refPlayer.exp -= lv_levelUpCosts;
                SaveUnitPlayer(refPlayer);
                if (!refPlayer.isBot) {
                    arena_gf_ShowMessage(refPlayer.name + " 升至 " + IntToString(refPlayer.level) + " 级");
                }
            }
        }

    } else {
        if (DateTimeToInt(CurrentDateTimeGet()) - DateTimeToInt(refPlayer.deadTime) >= refPlayer.reviveInterval) {
            if (UnitDataGetByUnitType(refPlayer.unitType, lv_unitData)) {
                refPlayer.deadTime = CurrentDateTimeGet();
                refPlayer.revivePoint = RandomInt(1, 2);
                SaveUnitPlayer(refPlayer);

                if (refPlayer.playerId == c_GameStatePlayerIdRed) {
                    lv_pointName = "Red-0" + IntToString(refPlayer.revivePoint);
                } else if (refPlayer.playerId == c_GameStatePlayerIdBlue) {
                    lv_pointName = "Blue-0" + IntToString(refPlayer.revivePoint);
                } else {
                    lv_pointName = "NPC-Start";
                }
                inUnit = arena_gf_CreateUnit(refPlayer.playerId, PointFromName(lv_pointName), lv_unitData.unitType, 
                    PointGetFacing(PointFromName(lv_pointName)), lv_unitData.baseScale, refPlayer.name, 2, !refPlayer.isBot);
                SkinDataSwapModel(inUnit, refPlayer.skinType, c_SkinDataStateTank);
                UnitDataInitPlayerUnitProps(refPlayer, inUnit);
                WeaponDataApplyUnit(UnitWeaponGet(inUnit, 1), refPlayer.weaponType, inUnit);
                AbilityDataApply(inUnit, UnitAbilityGet(inUnit, 5), refPlayer.abilityType);
                UnitPlayerRestoreBuffs(refPlayer, inUnit);
                SaveUnitPlayer(refPlayer);

                lv_initOrder = OrderTargetingPoint(
                    AbilityCommand("move", 0), 
                    PointWithOffsetPolar(UnitGetPosition(inUnit), RandomInt(15, 25), RandomFixed(-10, 10)+PointGetFacing(PointFromName(lv_pointName))));
                UnitIssueOrder(inUnit, lv_initOrder, c_orderQueueReplace);
            }
        }
    }
}

static void aimode_AttackStep(UnitPlayerRef refPlayer, unit inUnit) {
    int lv_unitIndex;
    unit lv_unit;
    unit lv_targetUnit;
    order lv_order;
    fixed lv_angle;
    fixed lv_weight;
    fixed lv_minWeight;

    lv_minWeight = -1;
    for (lv_unitIndex = UnitGroupCount(gv_aimode_allStructures, c_unitCountAll); lv_unitIndex > 0; lv_unitIndex -= 1) {
        lv_unit = UnitGroupUnit(gv_aimode_allStructures, lv_unitIndex);
        if (UnitIsAlive(lv_unit) && UnitGetOwner(lv_unit) != refPlayer.playerId && UnitCanAttackTarget(inUnit, lv_unit)) {
            lv_order = UnitOrder(inUnit, 0);
            if (lv_order != null && OrderGetTargetUnit(lv_order) == lv_unit) {
                lv_targetUnit = lv_unit;
                break;
            }
            lv_angle = AbsF(AngleBetweenPoints(UnitGetPosition(inUnit), UnitGetPosition(lv_unit)) - UnitGetFacing(inUnit));
            lv_weight = lv_angle + DistanceBetweenPoints(UnitGetPosition(lv_unit), UnitGetPosition(inUnit))*10;
            if (lv_minWeight == -1 || lv_weight < lv_minWeight) {
                lv_minWeight = lv_weight;
                lv_targetUnit = lv_unit;
            }
        }
    }

    if (UnitIsAlive(lv_targetUnit) && lv_targetUnit != OrderGetTargetUnit(UnitOrder(inUnit, 0))) {
        lv_order = OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit);
        UnitIssueOrder(inUnit, lv_order, c_orderQueueReplace);
    }
}

static void aimode_HunterStep(UnitPlayerRef refPlayer, unit inUnit) {
    int lv_unitIndex;
    unit lv_unit;
    unit lv_targetUnit;
    fixed lv_distance;
    fixed lv_weight;
    fixed lv_minWeight;
    order lv_order;
    string lv_targetPlayer;
    UnitPlayer lv_targetUnitPlayer;

    lv_targetPlayer = DataTableGetString(true, arena_gv_unitTagPrefix + IntToString(refPlayer.aiStates[c_aimode_stateHuntTarget]));
    if (!arena_gf_StringIsEmpty(lv_targetPlayer)) {
        lv_targetUnit = DataTableGetUnit(true, arena_gv_unitNamePrefix + lv_targetPlayer);
    }
    if (!UnitIsAlive(lv_targetUnit)) {
        lv_minWeight = -1;
        for (lv_unitIndex = UnitGroupCount(arena_gv_playerUnitGroup, c_unitCountAll); lv_unitIndex > 0; lv_unitIndex -= 1) {
            lv_unit = UnitGroupUnit(arena_gv_playerUnitGroup, lv_unitIndex);
    
            if (UnitIsAlive(lv_unit) && UnitGetOwner(lv_unit) != refPlayer.playerId && UnitCanAttackTarget(inUnit, lv_unit)) {
                lv_targetPlayer = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_unit))));
                if (!arena_gf_StringIsEmpty(lv_targetPlayer) && UnitPlayerFromName(lv_targetPlayer, lv_targetUnitPlayer)) {
                    lv_distance = DistanceBetweenPoints(UnitGetPosition(lv_unit), UnitGetPosition(inUnit));
                    lv_weight = lv_distance * 10;
                    if (lv_targetUnitPlayer.aiMode == c_AIModeAttack) {
                        lv_weight *= 0.7;
                    }
        
                    if (lv_minWeight == -1 || lv_weight < lv_minWeight) {
                        lv_minWeight = lv_weight;
                        lv_targetUnit = lv_unit;
                    }
                }
            }
        }

        if (lv_targetUnit != null) {
            refPlayer.aiStates[c_aimode_stateHuntTarget] = UnitGetTag(lv_targetUnit);
        } else {
            refPlayer.aiStates[c_aimode_stateHuntTarget] = 0;
        }
        SaveUnitPlayer(refPlayer);
    }

    if (UnitIsAlive(lv_targetUnit) && lv_targetUnit != OrderGetTargetUnit(UnitOrder(inUnit, 0))) {
        lv_order = OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit);
        UnitIssueOrder(inUnit, lv_order, c_orderQueueReplace);
    }
}

static void aimode_FarmmingStep(UnitPlayerRef refPlayer, unit inUnit) {
    int lv_index;
    unit lv_unit;
    unit lv_targetUnit;
    order lv_order;

    if (refPlayer.aiStates[c_aimode_stateModeEntered] == 0) {
        refPlayer.aiStates[c_aimode_stateModeEntered] = refPlayer.aiMode;
        SaveUnitPlayer(refPlayer);
        UnitIssueOrder(inUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }

    for (lv_index = UnitGroupCount(gv_aimode_allCenters, c_unitCountAll); lv_index > 0; lv_index -= 1) {
        lv_unit = UnitGroupUnit(gv_aimode_allCenters, lv_index);
        if (UnitIsAlive(lv_unit) && UnitGetOwner(lv_unit) != refPlayer.playerId) {
            lv_targetUnit = lv_unit;
            break;
        }
    }

    if (UnitIsAlive(lv_targetUnit) && (UnitOrderHasAbil(inUnit, "move") || UnitOrder(inUnit, 0) == null)) {
        lv_order = OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(lv_targetUnit));
        UnitIssueOrder(inUnit, lv_order, c_orderQueueReplace);
    }
}

static void aimode_DefenceStep(UnitPlayerRef refPlayer, unit inUnit) {
    order lv_order;
    int lv_willBrokenTime = refPlayer.aiStates[c_aimode_stateWillBrokenTime];
    fixed lv_minWeight;
    int lv_unitIndex;
    unit lv_unit;
    fixed lv_distance;
    fixed lv_weight;
    unit lv_targetUnit;
    string lv_targetPlayer;
    int lv_textTag;

    if (refPlayer.aiStates[c_aimode_stateModeEntered] == 0) {
        refPlayer.aiStates[c_aimode_stateModeEntered] = refPlayer.aiMode;
        UnitPlayerClearAbilityQueue(refPlayer);
        SaveUnitPlayer(refPlayer);

        if (lv_willBrokenTime > 0) {
            if (refPlayer.playerId == c_GameStatePlayerIdBlue) {
                UnitBehaviorRemove(inUnit, "StarArenaTeamBlue", 1);
            } else if (refPlayer.playerId == c_GameStatePlayerIdRed) {
                UnitBehaviorRemove(inUnit, "StarArenaTeamRed", 1);
            }

            lv_textTag = TextTagCreate(StringToText("故障"), 20, Point(0, 0), 0, true, false, PlayerGroupAll());
            TextTagSetPosition(lv_textTag, UnitGetPosition(inUnit), 3);
            TextTagAttachToUnit(lv_textTag, inUnit, 3);
            TextTagSetGravity(lv_textTag, 1);
            TextTagSetTime(lv_textTag, c_textTagTimeDuration, 4);

            lv_targetPlayer = DataTableGetString(true, arena_gv_unitTagPrefix + IntToString(refPlayer.aiStates[c_aimode_stateHuntTarget]));
            if (!arena_gf_StringIsEmpty(lv_targetPlayer)) {
                lv_targetUnit = DataTableGetUnit(true, arena_gv_unitNamePrefix + lv_targetPlayer);
            }
            if (!UnitIsAlive(lv_targetUnit)) {
                lv_minWeight = -1;
                for (lv_unitIndex = UnitGroupCount(arena_gv_playerUnitGroup, c_unitCountAll); lv_unitIndex > 0; lv_unitIndex -= 1) {
                    lv_unit = UnitGroupUnit(arena_gv_playerUnitGroup, lv_unitIndex);
            
                    if (UnitIsAlive(lv_unit) && UnitGetOwner(lv_unit) != refPlayer.playerId && UnitCanAttackTarget(inUnit, lv_unit)) {
                        lv_distance = DistanceBetweenPoints(UnitGetPosition(lv_unit), UnitGetPosition(inUnit));
                        lv_weight = lv_distance * 10;
        
                        if (UnitOrderHasAbil(lv_unit, "attack") && OrderGetTargetUnit(UnitOrder(lv_unit, 0)) == inUnit) {
                            lv_weight *= 0.5;
                        }
                        if (lv_minWeight == -1 || lv_weight < lv_minWeight) {
                            lv_minWeight = lv_weight;
                            lv_targetUnit = lv_unit;
                        }
                    }
                }
                if (lv_targetUnit != null) {
                    refPlayer.aiStates[c_aimode_stateHuntTarget] = UnitGetTag(lv_targetUnit);
                } else {
                    refPlayer.aiStates[c_aimode_stateHuntTarget] = 0;
                }
                SaveUnitPlayer(refPlayer);
            }
        
            if (UnitIsAlive(lv_targetUnit) && lv_targetUnit != OrderGetTargetUnit(UnitOrder(inUnit, 0))) {
                lv_order = OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit);
                UnitIssueOrder(inUnit, lv_order, c_orderQueueReplace);
            }
        }
    }

    if (lv_willBrokenTime > 0) {
        if (UnitGetType(inUnit) == "MengskSiegeTankSieged") {
            refPlayer.aiStates[c_aimode_stateTotalTakenDamage] = 0;
            refPlayer.aiStates[c_aimode_stateWillBrokenTime] = 0;
            SaveUnitPlayer(refPlayer);

            if (refPlayer.playerId == c_GameStatePlayerIdBlue) {
                UnitBehaviorAdd(inUnit, "StarArenaTeamBlue", inUnit, 1);
            } else if (refPlayer.playerId == c_GameStatePlayerIdRed) {
                UnitBehaviorAdd(inUnit, "StarArenaTeamRed", inUnit, 1);
            }
        } else if (DateTimeToInt(CurrentDateTimeGet()) - lv_willBrokenTime >= c_aimode_willRechargeCD) {
            refPlayer.aiStates[c_aimode_stateTotalTakenDamage] = 0;
            refPlayer.aiStates[c_aimode_stateWillBrokenTime] = 0;
            if (refPlayer.aiStates[c_aimode_stateOriginAIMode] > 0) {
                AIModeSetMode(refPlayer, refPlayer.aiStates[c_aimode_stateOriginAIMode]);
                refPlayer.aiStates[c_aimode_stateOriginAIMode] = 0;
            }
            SaveUnitPlayer(refPlayer);

            if (refPlayer.playerId == c_GameStatePlayerIdBlue) {
                UnitBehaviorAdd(inUnit, "StarArenaTeamBlue", inUnit, 1);
            } else if (refPlayer.playerId == c_GameStatePlayerIdRed) {
                UnitBehaviorAdd(inUnit, "StarArenaTeamRed", inUnit, 1);
            }
        }
    }
}

static void aimode_RetreatStep(UnitPlayerRef refPlayer, unit inUnit) {
    int lv_index;
    unit lv_structure;
    unit lv_targetStructure;
    int defenceRadius = 10;
    order lv_order;

    if (refPlayer.aiStates[c_aimode_stateModeEntered] == 0) {
        refPlayer.aiStates[c_aimode_stateModeEntered] = refPlayer.aiMode;
        SaveUnitPlayer(refPlayer);

        if (UnitGroupCount(UnitGroupSearch("CommandCenter", refPlayer.playerId, UnitGetPosition(inUnit), defenceRadius, null, 2), c_unitCountAlive) <= 0) {
            for (lv_index = UnitGroupCount(gv_aimode_allStructures, c_unitCountAll); lv_index > 0; lv_index -= 1) {
                lv_structure = UnitGroupUnit(gv_aimode_allStructures, lv_index);
                if (UnitIsAlive(lv_structure) && UnitGetOwner(lv_structure) == refPlayer.playerId) {
                    if (UnitGetType(lv_structure) == "CommandCenter") {
                        lv_targetStructure = lv_structure;
                        break;
                    }
                }
            }
        
            if (lv_targetStructure != null) {
                lv_order = OrderTargetingPoint(
                    AbilityCommand("move", 0), 
                    PointWithOffsetPolar(UnitGetPosition(lv_targetStructure), RandomInt(5, defenceRadius), RandomFixed(0, 360)));
                UnitIssueOrder(inUnit, lv_order, c_orderQueueReplace);
            }
        }
    }
}

bool aimode_DamageUnit_Func(bool testConds, bool runActions) {
    string lv_target;
    unit lv_targetUnit = EventUnit();
    int lv_damage;
    UnitPlayer lv_player;

    lv_target = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_targetUnit))));
    lv_damage = FixedToInt(EventUnitDamageAmount());

    if (arena_gf_StringIsEmpty(lv_target)) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_target, lv_player)) {
        return false;
    }

    if (lv_player.aiStates[c_aimode_stateWillBrokenTime] == 0 && lv_player.aiMode != c_AIModeNone && lv_player.aiMode != c_AIModeDefence) {
        lv_player.aiStates[c_aimode_stateTotalTakenDamage] += lv_damage;
        SaveUnitPlayer(lv_player);
    }

    return true;
}

static void aimode_DamageUnit_Init() {
    gt_aimode_DamageUnit = TriggerCreate("aimode_DamageUnit_Func");
    TriggerAddEventUnitDamaged(gt_aimode_DamageUnit, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

bool aimode_KillUnit_Func(bool testConds, bool runActions) {
    unit lv_attackerUnit = EventUnitDamageSourceUnit();
    string lv_target;
    unit lv_targetUnit = EventUnit();
    UnitPlayer lv_player;

    lv_target = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_targetUnit))));

    if (!runActions) {
        return true;
    }

    if (arena_gf_StringIsEmpty(lv_target) || UnitGetOwner(lv_attackerUnit) == UnitGetOwner(lv_targetUnit)) {
        return false;
    }

    if (!UnitPlayerFromName(lv_target, lv_player)) {
        return false;
    }

    lv_player.aiStates[c_aimode_stateTotalTakenDamage] = 0;
    lv_player.aiStates[c_aimode_stateWillBrokenTime] = 0;
    if (lv_player.aiStates[c_aimode_stateOriginAIMode] > 0) {
        AIModeSetMode(lv_player, lv_player.aiStates[c_aimode_stateOriginAIMode]);
        lv_player.aiStates[c_aimode_stateOriginAIMode] = 0;
    }
    lv_player.combo = 0;
    if (DateTimeToInt(CurrentDateTimeGet()) - DateTimeToInt(lv_player.deadTime) < c_aimode_reviveInterval) {
        lv_player.reviveInterval += c_aimode_reviveInterval / 2;
    } else {
        lv_player.reviveInterval = c_aimode_reviveInterval;
    }
    lv_player.deadTime = CurrentDateTimeGet();
    if (lv_player.aiMode == c_AIModeDefence) {
        lv_player.aiMode = c_AIModeNone;
    }
    UnitPlayerClearAbilityQueue(lv_player);
    lv_player.abilityType = AbilityDataGetType(c_AbilityTypeNone);
    UnitPlayerSaveBuffs(lv_player);
    SaveUnitPlayer(lv_player);

    return true;
}

static void aimode_KillUnit_Init() {
    gt_aimode_KillUnit = TriggerCreate("aimode_KillUnit_Func");
    TriggerAddEventUnitDied(gt_aimode_KillUnit, null);
}