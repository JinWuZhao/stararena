// Player AI Mode
const int c_AIModeNone = 0; // 手动
const int c_AIModeAttack = 1; // 进攻
const int c_AIModeHunter = 2; // 猎杀
const int c_AIModeDefence = 3; // 防御
const int c_AIModeRetreat = 4; // 撤退
const int c_AIModeEnd = 5;

static unitgroup gv_aimode_allStructures;

static timer gv_aimode_loopTimer;

static trigger gt_aimode_GameLoop;
static trigger gt_aimode_DamageUnit;
static trigger gt_aimode_KillUnit;

static const int c_aimode_metricsPlayers = 5;
static int[c_aimode_metricsPlayers][c_AIModeEnd] gv_aimode_metrics;
static int[c_AIModeEnd] gv_aimode_balance;

static const int c_aimode_reviveInterval = 4;
static const int c_aimode_willRechargeCD = 2;

static const int c_aimode_stateTotalTakenDamage = 0;
static const int c_aimode_stateWillBrokenTime = 1;
static const int c_aimode_stateOriginAIMode = 2;
static const int c_aimode_stateModeEntered = 3;
static const int c_aimode_stateHuntTarget = 4;

void InitAIMode();
bool AIModeValidMode(int aiMode);
int AIModeSelectMode(int playerId);
void AIModeSetMode(UnitPlayerRef refPlayer, int inMode);

static void aimode_GameLoop_Init();
static void aimode_PlayerStep(UnitPlayerRef inPlayer, unit inUnit);
static void aimode_AttackStep(UnitPlayerRef refPlayer, unit inUnit);
static void aimode_HunterStep(UnitPlayerRef refPlayer, unit inUnit);
static void aimode_DefenceStep(UnitPlayerRef inoutPlayer, unit inUnit);
static void aimode_RetreatStep(UnitPlayerRef refPlayer, unit inUnit);
static void aimode_DamageUnit_Init();
static void aimode_KillUnit_Init();

void InitAIMode() {
    gv_aimode_allStructures = UnitGroupFromId(3);

    gv_aimode_loopTimer = TimerCreate();
    TimerStart(gv_aimode_loopTimer, 1.0, true, c_timeReal);

    gv_aimode_balance[c_AIModeAttack] = c_unitPlayersCap / 4;
    gv_aimode_balance[c_AIModeHunter] = c_unitPlayersCap / 4;

    aimode_GameLoop_Init();
    aimode_DamageUnit_Init();
    aimode_KillUnit_Init();
}

bool AIModeValidMode(int inMode) {
    if (inMode >= c_AIModeNone && inMode < c_AIModeEnd) {
        return true;
    }
    return false;
}

int AIModeSelectMode(int playerId) {
    int lv_index = RandomInt(c_AIModeNone+1, c_AIModeEnd-1);
    if (gv_aimode_metrics[playerId][lv_index] < gv_aimode_balance[lv_index]) {
        return lv_index;
    }

    for (lv_index = c_AIModeNone+1; lv_index < c_AIModeEnd-1; lv_index += 1) {
        if (gv_aimode_metrics[playerId][lv_index] < gv_aimode_balance[lv_index]) {
            break;
        }
    }
    return lv_index;
}

void AIModeSetMode(UnitPlayerRef refPlayer, int inMode) {
    if (refPlayer.aiMode != inMode) {
        refPlayer.aiMode = inMode;
        refPlayer.aiStates[c_aimode_stateModeEntered] = c_AIModeNone;
        refPlayer.aiStates[c_aimode_stateHuntTarget] = 0;

        if (inMode == c_AIModeNone) {
            refPlayer.aiStates[c_aimode_stateTotalTakenDamage] = 0;
            refPlayer.aiStates[c_aimode_stateWillBrokenTime] = 0;
            refPlayer.aiStates[c_aimode_stateOriginAIMode] = 0;
        }
    }
}

bool aimode_GameLoop_Func(bool testConds, bool runActions) {
    UnitPlayerArray lv_players;
    int k;
    int index;
    unit lv_unit;
    
    if (!runActions) {
        return true;
    }

    for (k = 0; k < c_aimode_metricsPlayers; k += 1) {
        for (index = 0; index < c_AIModeEnd; index += 1) {
            gv_aimode_metrics[k][index] = 0;
        }
    }

    UnitPlayersGetAll(lv_players);
    for (index = 0; index < UnitPlayersCount(); index += 1) {
        lv_unit = DataTableGetUnit(true, arena_gv_unitNamePrefix + lv_players[index].name);
        if (UnitIsValid(lv_unit)) {

            gv_aimode_metrics[lv_players[index].playerId][lv_players[index].aiMode] += 1;

            if (lv_players[index].aiMode == c_AIModeAttack) {
                aimode_AttackStep(lv_players[index], lv_unit);
            } else if (lv_players[index].aiMode == c_AIModeHunter) {
                aimode_HunterStep(lv_players[index], lv_unit);
            } else if (lv_players[index].aiMode == c_AIModeDefence) {
                aimode_DefenceStep(lv_players[index], lv_unit);
            } else if (lv_players[index].aiMode == c_AIModeRetreat) {
                aimode_RetreatStep(lv_players[index], lv_unit);
            }
        }
    }

    for (index = 0; index < UnitPlayersCount(); index += 1) {
        lv_unit = DataTableGetUnit(true, arena_gv_unitNamePrefix + lv_players[index].name);
        aimode_PlayerStep(lv_players[index], lv_unit);
    }

    return true;
}

static void aimode_GameLoop_Init() {
    gt_aimode_GameLoop = TriggerCreate("aimode_GameLoop_Func");
    TriggerAddEventTimer(gt_aimode_GameLoop, gv_aimode_loopTimer);
}

static void aimode_PlayerStep(UnitPlayerRef refPlayer, unit inUnit) {
    UnitData lv_unitData;
    int lv_willBrokenTime;
    order lv_initOrder;
    int lv_currShields;
    int lv_currLife;
    string lv_pointName;

    if (UnitIsValid(inUnit)) {
        lv_willBrokenTime = refPlayer.aiStates[c_aimode_stateWillBrokenTime];
        if (lv_willBrokenTime == 0) {
            lv_currShields = UnitGetPropertyInt(inUnit, c_unitPropShields, true);
            lv_currLife = UnitGetPropertyInt(inUnit, c_unitPropLife, true);
            if (refPlayer.aiStates[c_aimode_stateTotalTakenDamage] >= (lv_currShields + lv_currLife) / 4) {
                refPlayer.aiStates[c_aimode_stateWillBrokenTime] = DateTimeToInt(CurrentDateTimeGet());
                refPlayer.aiStates[c_aimode_stateOriginAIMode] = refPlayer.aiMode;
                AIModeSetMode(refPlayer, c_AIModeDefence);
                SaveUnitPlayer(refPlayer);
            }
        } else if (lv_willBrokenTime > 0 && refPlayer.aiMode != c_AIModeDefence) {
            AIModeSetMode(refPlayer, c_AIModeDefence);
            SaveUnitPlayer(refPlayer);
        }

        if (refPlayer.aiMode == c_AIModeAttack || refPlayer.aiMode == c_AIModeHunter) {
            if (!UnitOrderHasAbil(inUnit, "attack")) {
                if (refPlayer.aiMode == c_AIModeAttack) {
                    AIModeSetMode(refPlayer, c_AIModeHunter);
                } else {
                    AIModeSetMode(refPlayer, c_AIModeAttack);
                }
                SaveUnitPlayer(refPlayer);
            }
        }

    } else {
        if (DateTimeToInt(CurrentDateTimeGet()) - DateTimeToInt(refPlayer.deadTime) >= c_aimode_reviveInterval) {
            if (UnitDataGetByUnitType(refPlayer.unitType, lv_unitData)) {
                refPlayer.deadTime = CurrentDateTimeGet();
                if (refPlayer.aiMode == c_AIModeNone) {
                    AIModeSetMode(refPlayer, AIModeSelectMode(refPlayer.playerId));
                }
                SaveUnitPlayer(refPlayer);

                if (refPlayer.playerId == c_GameStatePlayerIdRed) {
                    lv_pointName = "Red-0" + IntToString(refPlayer.revivePoint);
                } else if (refPlayer.playerId == c_GameStatePlayerIdBlue) {
                    lv_pointName = "Blue-0" + IntToString(refPlayer.revivePoint);
                } else {
                    lv_pointName = "NPC-Start";
                }
                inUnit = arena_gf_CreateUnit(refPlayer.playerId, PointFromName(lv_pointName), lv_unitData.unitType, 
                    PointGetFacing(PointFromName(lv_pointName)), lv_unitData.baseScale, refPlayer.name, 2, !refPlayer.isBot);
                UnitSetPropertyInt(inUnit, c_unitPropLifeMax, lv_unitData.lifeMax * refPlayer.level);
                UnitBehaviorAdd(inUnit, "StarArenaUnitEnhance", inUnit, refPlayer.level / 3 + 1);

                lv_initOrder = OrderTargetingPoint(
                    AbilityCommand("move", 0), 
                    PointWithOffsetPolar(UnitGetPosition(inUnit), RandomInt(15, 25), RandomFixed(-10, 10)+PointGetFacing(PointFromName(lv_pointName))));
                UnitIssueOrder(inUnit, lv_initOrder, c_orderQueueReplace);
            }
        }
    }
}

static void aimode_AttackStep(UnitPlayerRef refPlayer, unit inUnit) {
    int lv_unitIndex;
    unit lv_unit;
    unit lv_targetUnit;
    fixed lv_distance;
    fixed lv_minDistance;
    order lv_order;
    string lv_targetPlayer;
    fixed lv_angle;
    fixed lv_weight;
    fixed lv_minWeight;

    lv_targetPlayer = DataTableGetString(true, arena_gv_unitTagPrefix + IntToString(refPlayer.aiStates[c_aimode_stateHuntTarget]));
    if (!arena_gf_StringIsEmpty(lv_targetPlayer)) {
        lv_targetUnit = DataTableGetUnit(true, arena_gv_unitNamePrefix + lv_targetPlayer);
    }
    if (!UnitIsValid(lv_targetUnit)) {
        lv_minDistance = -1;
        for (lv_unitIndex = UnitGroupCount(arena_gv_playerUnitGroup, c_unitCountAll); lv_unitIndex > 0; lv_unitIndex -= 1) {
            lv_unit = UnitGroupUnit(arena_gv_playerUnitGroup, lv_unitIndex);
            if (UnitIsValid(lv_unit) && UnitGetOwner(lv_unit) != refPlayer.playerId && UnitCanAttackTarget(inUnit, lv_unit)) {
                lv_distance = DistanceBetweenPoints(UnitGetPosition(lv_unit), UnitGetPosition(inUnit));
                if (lv_minDistance == -1 || lv_distance < lv_minDistance) {
                    lv_minDistance = lv_distance;
                    lv_targetUnit = lv_unit;
                }
            }
        }
        if (lv_minDistance > (UnitWeaponRange(inUnit, 1) + UnitGetPropertyFixed(inUnit, c_unitPropRadius, true)) * 2) {
            lv_targetUnit = null;
            lv_targetPlayer = null;
            refPlayer.aiStates[c_aimode_stateHuntTarget] = 0;
        } else if (UnitIsValid(lv_targetUnit)) {
            refPlayer.aiStates[c_aimode_stateHuntTarget] = UnitGetTag(lv_targetUnit);
        }
        SaveUnitPlayer(refPlayer);

        if (!UnitIsValid(lv_targetUnit)) {
            lv_minWeight = -1;
            for (lv_unitIndex = UnitGroupCount(gv_aimode_allStructures, c_unitCountAll); lv_unitIndex > 0; lv_unitIndex -= 1) {
                lv_unit = UnitGroupUnit(gv_aimode_allStructures, lv_unitIndex);
                if (UnitIsValid(lv_unit) && UnitGetOwner(lv_unit) != refPlayer.playerId && UnitCanAttackTarget(inUnit, lv_unit)) {
                    lv_angle = AbsF(AngleBetweenPoints(UnitGetPosition(inUnit), UnitGetPosition(lv_unit)) - UnitGetFacing(inUnit));
                    lv_weight = lv_angle + DistanceBetweenPoints(UnitGetPosition(lv_unit), UnitGetPosition(inUnit))*10;
                    if (lv_minWeight == -1 || lv_weight < lv_minWeight) {
                        lv_minWeight = lv_weight;
                        lv_targetUnit = lv_unit;
                    }
                }
            }
        }
    }

    if (UnitIsValid(lv_targetUnit) && lv_targetUnit != OrderGetTargetUnit(UnitOrder(inUnit, 0))) {
        lv_order = OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit);
        UnitIssueOrder(inUnit, lv_order, c_orderQueueReplace);
    }
}

static void aimode_HunterStep(UnitPlayerRef refPlayer, unit inUnit) {
    int lv_unitIndex;
    unit lv_unit;
    unit lv_targetUnit;
    fixed lv_distance;
    fixed lv_weight;
    fixed lv_minWeight;
    order lv_order;
    string lv_targetPlayer;
    UnitPlayer lv_targetUnitPlayer;

    lv_targetPlayer = DataTableGetString(true, arena_gv_unitTagPrefix + IntToString(refPlayer.aiStates[c_aimode_stateHuntTarget]));
    if (!arena_gf_StringIsEmpty(lv_targetPlayer)) {
        lv_targetUnit = DataTableGetUnit(true, arena_gv_unitNamePrefix + lv_targetPlayer);
    }
    if (!UnitIsValid(lv_targetUnit)) {
        lv_minWeight = -1;
        for (lv_unitIndex = UnitGroupCount(arena_gv_playerUnitGroup, c_unitCountAll); lv_unitIndex > 0; lv_unitIndex -= 1) {
            lv_unit = UnitGroupUnit(arena_gv_playerUnitGroup, lv_unitIndex);
    
            if (UnitIsValid(lv_unit) && UnitGetOwner(lv_unit) != refPlayer.playerId && UnitCanAttackTarget(inUnit, lv_unit)) {
                lv_distance = DistanceBetweenPoints(UnitGetPosition(lv_unit), UnitGetPosition(inUnit));
                lv_weight = lv_distance * 10;
    
                lv_targetPlayer = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_unit))));
                if (!arena_gf_StringIsEmpty(lv_targetPlayer) && UnitPlayerFromName(lv_targetPlayer, lv_targetUnitPlayer) && lv_targetUnitPlayer.aiMode == c_AIModeAttack) {
                    lv_weight *= 0.7;
                }
    
                if (lv_minWeight == -1 || lv_weight < lv_minWeight) {
                    lv_minWeight = lv_weight;
                    lv_targetUnit = lv_unit;
                }
            }
        }

        if (lv_targetUnit != null) {
            refPlayer.aiStates[c_aimode_stateHuntTarget] = UnitGetTag(lv_targetUnit);
        } else {
            refPlayer.aiStates[c_aimode_stateHuntTarget] = 0;
        }
        SaveUnitPlayer(refPlayer);
    }

    if (UnitIsValid(lv_targetUnit) && lv_targetUnit != OrderGetTargetUnit(UnitOrder(inUnit, 0))) {
        lv_order = OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit);
        UnitIssueOrder(inUnit, lv_order, c_orderQueueReplace);
    }
}

static void aimode_DefenceStep(UnitPlayerRef inoutPlayer, unit inUnit) {
    order lv_order;
    int lv_willBrokenTime;

    if (inoutPlayer.aiStates[c_aimode_stateModeEntered] == 0) {
        inoutPlayer.aiStates[c_aimode_stateModeEntered] = inoutPlayer.aiMode;
        SaveUnitPlayer(inoutPlayer);

        lv_order = Order(AbilityCommand("move", 2));
        UnitIssueOrder(inUnit, lv_order, c_orderQueueReplace);
    }

    lv_willBrokenTime = inoutPlayer.aiStates[c_aimode_stateWillBrokenTime];
    if (lv_willBrokenTime > 0 && DateTimeToInt(CurrentDateTimeGet()) - lv_willBrokenTime >= c_aimode_willRechargeCD) {
        inoutPlayer.aiStates[c_aimode_stateTotalTakenDamage] = 0;
        inoutPlayer.aiStates[c_aimode_stateWillBrokenTime] = 0;
        if (inoutPlayer.aiStates[c_aimode_stateOriginAIMode] > 0) {
            AIModeSetMode(inoutPlayer, inoutPlayer.aiStates[c_aimode_stateOriginAIMode]);
            inoutPlayer.aiStates[c_aimode_stateOriginAIMode] = 0;
        }
        SaveUnitPlayer(inoutPlayer);
    }
}

static void aimode_RetreatStep(UnitPlayerRef refPlayer, unit inUnit) {
    int lv_index;
    int lv_defenceUnits;
    int lv_minDefenceUnits = -1;
    unit lv_structure;
    unit lv_targetStructure;
    int defenceRadius = 10;
    order lv_order;

    if (refPlayer.aiStates[c_aimode_stateModeEntered] == 0) {
        refPlayer.aiStates[c_aimode_stateModeEntered] = refPlayer.aiMode;
        SaveUnitPlayer(refPlayer);

        if (UnitGroupCount(UnitGroupSearch("CommandCenter", refPlayer.playerId, UnitGetPosition(inUnit), defenceRadius, null, 2), c_unitCountAlive) <= 0) {
            for (lv_index = UnitGroupCount(gv_aimode_allStructures, c_unitCountAll); lv_index > 0; lv_index -= 1) {
                lv_structure = UnitGroupUnit(gv_aimode_allStructures, lv_index);
                if (UnitIsValid(lv_structure) && UnitGetOwner(lv_structure) == refPlayer.playerId) {
                    if (UnitGetType(lv_structure) == "CommandCenter") {
                        lv_targetStructure = lv_structure;
                        break;
                    }
                }
            }
        
            if (lv_targetStructure != null) {
                lv_order = OrderTargetingPoint(
                    AbilityCommand("move", 0), 
                    PointWithOffsetPolar(UnitGetPosition(lv_targetStructure), RandomInt(5, defenceRadius), RandomFixed(0, 360)));
                UnitIssueOrder(inUnit, lv_order, c_orderQueueReplace);
            }
        }
    }
}

bool aimode_DamageUnit_Func(bool testConds, bool runActions) {
    string lv_target;
    unit lv_targetUnit = EventUnit();
    int lv_damage;
    UnitPlayer lv_player;

    lv_target = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_targetUnit))));
    lv_damage = FixedToInt(EventUnitDamageAmount());

    if (arena_gf_StringIsEmpty(lv_target)) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_target, lv_player)) {
        return false;
    }

    if (lv_player.aiStates[c_aimode_stateWillBrokenTime] == 0 && lv_player.aiMode != c_AIModeNone && lv_player.aiMode != c_AIModeDefence) {
        lv_player.aiStates[c_aimode_stateTotalTakenDamage] += lv_damage;
        SaveUnitPlayer(lv_player);
    }

    return true;
}

static void aimode_DamageUnit_Init() {
    gt_aimode_DamageUnit = TriggerCreate("aimode_DamageUnit_Func");
    TriggerAddEventUnitDamaged(gt_aimode_DamageUnit, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

bool aimode_KillUnit_Func(bool testConds, bool runActions) {
    unit lv_attackerUnit = EventUnitDamageSourceUnit();
    string lv_target;
    unit lv_targetUnit = EventUnit();
    UnitPlayer lv_player;

    lv_target = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_targetUnit))));

    if (!runActions) {
        return true;
    }

    if (arena_gf_StringIsEmpty(lv_target) || UnitGetOwner(lv_attackerUnit) == UnitGetOwner(lv_targetUnit)) {
        return false;
    }

    if (!UnitPlayerFromName(lv_target, lv_player)) {
        return false;
    }

    lv_player.aiStates[c_aimode_stateTotalTakenDamage] = 0;
    lv_player.aiStates[c_aimode_stateWillBrokenTime] = 0;
    if (lv_player.aiStates[c_aimode_stateOriginAIMode] > 0) {
        AIModeSetMode(lv_player, lv_player.aiStates[c_aimode_stateOriginAIMode]);
        lv_player.aiStates[c_aimode_stateOriginAIMode] = 0;
    }
    if (lv_player.isBot) {
        AIModeSetMode(lv_player, c_AIModeNone);
    }
    lv_player.combo = 0;
    lv_player.deadTime = CurrentDateTimeGet();
    if (lv_player.revivePoint <= 0) {
        lv_player.revivePoint = RandomInt(1, 4);
    }
    SaveUnitPlayer(lv_player);

    return true;
}

static void aimode_KillUnit_Init() {
    gt_aimode_KillUnit = TriggerCreate("aimode_KillUnit_Func");
    TriggerAddEventUnitDied(gt_aimode_KillUnit, null);
}