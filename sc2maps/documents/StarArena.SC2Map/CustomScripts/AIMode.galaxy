// Player AI Mode
const int c_AIModeNone = 0; // 手动
const int c_AIModeAttack = 1; // 进攻
const int c_AIModeHunter = 2; // 猎杀
const int c_AIModeDefence = 3; // 防御
const int c_AIModeRetreat = 4; // 撤退
const int c_AIModeEnd = 5;

static unitgroup gv_aimode_allStructures;

static timer gv_aimode_loopTimer;

static trigger gt_aimode_GameLoop;

static const int c_aimode_metricsPlayers = 5;
static int[c_aimode_metricsPlayers][c_AIModeEnd] gv_aimode_metrics;
static int[c_AIModeEnd] gv_aimode_balance;

static const int c_aimode_reviveInterval = 4;

void InitAIMode();
bool AIModeValidMode(int aiMode);
int AIModeSelectMode(int playerId);

static void aimode_GameLoop_Init();
static void aimode_BotStep(UnitPlayerRef inoutPlayer, unit inUnit);
static void aimode_AttackStep(UnitPlayerRef inPlayer, unit inUnit);
static void aimode_HunterStep(UnitPlayerRef inPlayer, unit inUnit);
static void aimode_DefenceStep(UnitPlayerRef inPlayer, unit inUnit);
static void aimode_RetreatStep(UnitPlayerRef inPlayer, unit inUnit);

void InitAIMode() {
    gv_aimode_allStructures = UnitGroupFromId(7);

    gv_aimode_loopTimer = TimerCreate();
    TimerStart(gv_aimode_loopTimer, 1.0, true, c_timeReal);

    gv_aimode_balance[c_AIModeAttack] = 4 * c_unitPlayersCap / 10;
    gv_aimode_balance[c_AIModeHunter] = 4 * c_unitPlayersCap / 10;
    gv_aimode_balance[c_AIModeDefence] = 0;
    gv_aimode_balance[c_AIModeRetreat] = 2 * c_unitPlayersCap / 10;

    aimode_GameLoop_Init();
}

bool AIModeValidMode(int inMode) {
    if (inMode >= c_AIModeNone && inMode < c_AIModeEnd) {
        return true;
    }
    return false;
}

int AIModeSelectMode(int playerId) {
    int lv_index;

    for (lv_index = c_AIModeNone+1; lv_index < c_AIModeEnd-1; lv_index += 1) {
        if (gv_aimode_metrics[playerId][lv_index] < gv_aimode_balance[lv_index]) {
            break;
        }
    }
    return lv_index;
}

bool aimode_GameLoop_Func(bool testConds, bool runActions) {
    UnitPlayerArray lv_players;
    int k;
    int index;
    unit lv_unit;
    
    if (!runActions) {
        return true;
    }

    for (k = 0; k < c_aimode_metricsPlayers; k += 1) {
        for (index = 0; index < c_AIModeEnd; index += 1) {
            gv_aimode_metrics[k][index] = 0;
        }
    }

    UnitPlayersGetAll(lv_players);
    for (index = 0; index < UnitPlayersCount(); index += 1) {
        lv_unit = DataTableGetUnit(true, arena_gv_unitNamePrefix + lv_players[index].name);
        if (lv_unit != null) {

            gv_aimode_metrics[lv_players[index].playerId][lv_players[index].aiMode] += 1;

            if (lv_players[index].aiMode == c_AIModeAttack) {
                aimode_AttackStep(lv_players[index], lv_unit);
            } else if (lv_players[index].aiMode == c_AIModeHunter) {
                aimode_HunterStep(lv_players[index], lv_unit);
            } else if (lv_players[index].aiMode == c_AIModeDefence) {
                aimode_DefenceStep(lv_players[index], lv_unit);
            } else if (lv_players[index].aiMode == c_AIModeRetreat) {
                aimode_RetreatStep(lv_players[index], lv_unit);
            }
        } else {
            lv_players[index].aiMode = c_AIModeNone;
        }
    }

    for (index = 0; index < UnitPlayersCount(); index += 1) {
        if (lv_players[index].isBot) {
            lv_unit = DataTableGetUnit(true, arena_gv_unitNamePrefix + lv_players[index].name);
            aimode_BotStep(lv_players[index], lv_unit);
        }
    }

    return true;
}

static void aimode_GameLoop_Init() {
    gt_aimode_GameLoop = TriggerCreate("aimode_GameLoop_Func");
    TriggerAddEventTimer(gt_aimode_GameLoop, gv_aimode_loopTimer);
}

static void aimode_BotStep(UnitPlayerRef inoutPlayer, unit inUnit) {
    int lv_index;
    UnitData lv_unitData;

    if (inoutPlayer.aiMode == c_AIModeNone) {
        inoutPlayer.aiMode = AIModeSelectMode(inoutPlayer.playerId);
        SaveUnitPlayer(inoutPlayer);
    }

    if (inUnit == null && DateTimeToInt(CurrentDateTimeGet()) - DateTimeToInt(inoutPlayer.reviveTime) >= c_aimode_reviveInterval) {
        for (lv_index = c_UnitDataTypesCount-1; lv_index >= 0; lv_index -= 1) {
            UnitDataGet(lv_index, lv_unitData);
            if (inoutPlayer.points >= lv_unitData.costPoints) {
                break;
            }
        }
        inoutPlayer.points -= lv_unitData.costPoints;
        inoutPlayer.unitType = lv_unitData.unitType;
        inoutPlayer.reviveTime = CurrentDateTimeGet();
        SaveUnitPlayer(inoutPlayer);
    
        arena_gf_CreatePlayerUnit(inoutPlayer.playerId, lv_unitData.unitType, inoutPlayer.name, 1.5, 3.5);
    }
}

static void aimode_AttackStep(UnitPlayerRef inPlayer, unit inUnit) {
    int lv_unitIndex;
    unit lv_unit;
    unit lv_targetUnit;
    fixed lv_distance;
    fixed lv_minDistance = -1;
    
    if (!UnitOrderHasAbil(inUnit, "attack")) {
        for (lv_unitIndex = UnitGroupCount(gv_aimode_allStructures, c_unitCountAll); lv_unitIndex > 0; lv_unitIndex -= 1) {
            lv_unit = UnitGroupUnit(gv_aimode_allStructures, lv_unitIndex);
            if (lv_unit != null && UnitIsAlive(lv_unit) && UnitGetOwner(lv_unit) != inPlayer.playerId) {
                lv_distance = DistanceBetweenPoints(UnitGetPosition(lv_unit), UnitGetPosition(inUnit));
                if (lv_minDistance == -1 || lv_distance < lv_minDistance) {
                    lv_minDistance = lv_distance;
                    lv_targetUnit = lv_unit;
                }
            }
        }

        if (lv_targetUnit != null) {
            UnitIssueOrder(inUnit, OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit), c_orderQueueReplace);
        }
    }
}

static void aimode_HunterStep(UnitPlayerRef inPlayer, unit inUnit) {
    int lv_unitIndex;
    unit lv_unit;
    unit lv_targetUnit;
    fixed lv_distance;
    int lv_shields;
    int lv_health;
    fixed lv_weight;
    fixed lv_minWeight = -1;

    if (!UnitOrderHasAbil(inUnit, "attack")) {
        for (lv_unitIndex = UnitGroupCount(arena_gv_playerUnitGroup, c_unitCountAll); lv_unitIndex > 0; lv_unitIndex -= 1) {
            lv_unit = UnitGroupUnit(arena_gv_playerUnitGroup, lv_unitIndex);

            if (lv_unit != null && UnitIsAlive(lv_unit) && UnitGetOwner(lv_unit) != inPlayer.playerId) {

                lv_distance = DistanceBetweenPoints(UnitGetPosition(lv_unit), UnitGetPosition(inUnit));
                lv_shields = UnitGetPropertyInt(inUnit, c_unitPropShields, true);
                lv_health = UnitGetPropertyInt(inUnit, c_unitPropLife, true);
                lv_weight = lv_distance * 10 * (lv_shields + lv_health);

                if (lv_minWeight == -1 || lv_weight < lv_minWeight) {
                    lv_minWeight = lv_weight;
                    lv_targetUnit = lv_unit;
                }
            }
        }

        if (lv_targetUnit != null) {
            UnitIssueOrder(inUnit, OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit), c_orderQueueReplace);
        }
    }
}

static void aimode_DefenceStep(UnitPlayerRef inPlayer, unit inUnit) {
    UnitIssueOrder(inUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
}

static void aimode_RetreatStep(UnitPlayerRef inPlayer, unit inUnit) {
    int lv_index;
    int lv_defenceUnits;
    int lv_minDefenceUnits = -1;
    unit lv_structure;
    unit lv_targetStructure;
    int defenceRadius = 10;

    if (!UnitOrderHasAbil(inUnit, "move") && UnitGroupCount(UnitGroupSearch("ShadowShieldGenerator", inPlayer.playerId, UnitGetPosition(inUnit), defenceRadius, null, 2), c_unitCountAlive) <= 0) {
        for (lv_index = UnitGroupCount(gv_aimode_allStructures, c_unitCountAll); lv_index > 0; lv_index -= 1) {
            lv_structure = UnitGroupUnit(gv_aimode_allStructures, lv_index);
            if (lv_structure != null && UnitIsAlive(lv_structure) && UnitGetOwner(lv_structure) == inPlayer.playerId) {
                if (UnitGetType(lv_structure) == "ShadowShieldGenerator") {
                    lv_defenceUnits = UnitGroupCount(
                        UnitGroupFilterRegion(
                            UnitGroupFilterPlayer(arena_gv_playerUnitGroup, inPlayer.playerId, c_unitPlayersCap / 2), 
                            RegionCircle(UnitGetPosition(lv_structure), defenceRadius), 
                            c_unitPlayersCap / 2),
                        c_unitCountAlive);
                    if (lv_minDefenceUnits == -1 || lv_defenceUnits < lv_minDefenceUnits) {
                        lv_minDefenceUnits = lv_defenceUnits;
                        lv_targetStructure = lv_structure;
                    }
                }
            }
        }
    
        if (lv_targetStructure != null) {
            UnitIssueOrder(
                inUnit, 
                OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_targetStructure), RandomInt(5, defenceRadius), RandomFixed(0, 360))), 
                c_orderQueueReplace);
        }
    }
}