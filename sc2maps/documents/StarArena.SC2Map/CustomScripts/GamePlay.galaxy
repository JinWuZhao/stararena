// Trigger Declarations
static trigger gt_gameplay_init;
static trigger gt_gameplay_Victory;
static trigger gt_gameplay_DestroyCenters;
static trigger gt_gameplay_EndGame;
static trigger gt_gameplay_RaceTimeOut;
static trigger gt_gameplay_AddUnitPlayer;
static trigger gt_gameplay_AddUnitTest;
static trigger gt_gameplay_RemoveUnitPlayer;
static trigger gt_gameplay_ShowUnitPlayerPoints;
static trigger gt_gameplay_KillUnit;
static trigger gt_gameplay_DamageUnit;
static trigger gt_gameplay_RechargePoints;
static trigger gt_gameplay_UnitSelected;
static trigger gt_gameplay_TimerLoop;
static trigger gt_gameplay_SetNotice;
static trigger gt_gameplay_GiftChange;
static trigger gt_gameplay_ApplyGift;
static trigger gt_gameplay_changeTips;
static trigger gt_gameplay_TankSieged;
static trigger gt_gameplay_TankUnsieged;
static trigger gt_gameplay_TankSiege;
static trigger gt_gameplay_TankUnsiege;

// Variable Declarations
static int gv_gameplay_winnerPlayer;
static timer gv_gameplay_loopTimer;
static timer gv_gameplay_giftTimer;
static timer gv_gameplay_raceTimer;
static timer gv_gameplay_tipsTimer;
static int[c_unitPlayersCap][4] gv_gameplay_playerInfoItmes;
static int gv_gameplay_RankBoard;
static int gv_gameplay_RankBoardTitle;
static int gv_gameplay_RankBoardList;
static int gv_gameplay_UpvoteMsg;
static int gv_gameplay_BasicGiftMsg;
static int gv_gameplay_AdvancedGiftMsg;
static int gv_gameplay_DeluxeGiftMsg;
static int gv_gameplay_TemplateTipsMsg;
static int gv_gameplay_WeaponTipsMsg;
static int gv_gameplay_AbilityTipsMsg;
static int gv_gameplay_GameTipsMsg;
static int gv_gameplay_TimeBoard;
static int gv_gameplay_NoticeMsg;

static datetime gv_gameplay_startTime = CurrentDateTimeGet();

static int gv_gameplay_teamArmyBlue = 0;
static int gv_gameplay_teamArmyRed = 0;

static const int c_gameplay_UnitRedCenter = 1585478384;
static const int c_gameplay_UnitBlueCenter = 177235035;

static const int c_gameplay_dynamicTipsCount = 5;
static string[c_gameplay_dynamicTipsCount] gv_gameplay_dynamicTips;

static const string c_GameBankName = "stararena";
static const string c_BankSectionNotice = "notice";
static bank gv_GameBank;

// Function Declarations
void InitGamePlay();

static void gameplay_initMap_Init();
static void gameplay_Victory_Init();
static void gameplay_DestroyCenters_Init();
static void gameplay_EndGame_Init();
static void gameplay_RaceTimeOut_Init();
static void gameplay_AddUnitPlayer_Init();
static void gameplay_AddUnitTest_Init();
static void gameplay_RemoveUnitPlayer_Init();
static void gameplay_ShowUnitPlayerPoints();
static void gameplay_KillUnit_Init();
static void gameplay_DamageUnit_Init();
static void gameplay_RechargePoints_Init();
static void gameplay_UnitSelected_Init();
static void gameplay_TimerLoop_Init();
static void gameplay_SetNotice_Init();
static void gameplay_GiftChange_Init();
static void gameplay_ApplyGift_Init();
static void gameplay_changeTips_Init();
static void gameplay_TankSieged_Init();
static void gameplay_TankUnsieged_Init();
static void gameplay_TankSiege_Init();
static void gameplay_TankUnsiege_Init();

// Functions
void InitGamePlay() {
    int lv_index;

    for (lv_index = 0; lv_index < c_unitPlayersCap; lv_index += 1) {
        gv_gameplay_playerInfoItmes[lv_index][0] = DialogControlHookupStandard(
            c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/Players/" + IntToString(lv_index) + "/name");
        gv_gameplay_playerInfoItmes[lv_index][1] = DialogControlHookupStandard(
            c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/Players/" + IntToString(lv_index) + "/level");
        gv_gameplay_playerInfoItmes[lv_index][2] = DialogControlHookupStandard(
            c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/Players/" + IntToString(lv_index) + "/props");
        gv_gameplay_playerInfoItmes[lv_index][3] = DialogControlHookupStandard(
            c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/Players/" + IntToString(lv_index) + "/exp");
    }
    gv_gameplay_RankBoard = DialogControlHookupStandard(
        c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/RankBoard");
    gv_gameplay_RankBoardTitle = DialogControlHookupStandard(
        c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/RankBoard/Title");
    gv_gameplay_RankBoardList = DialogControlHookupStandard(
        c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/RankBoard/List");
    DialogControlSetVisible(gv_gameplay_RankBoard, PlayerGroupAll(), false);
    gv_gameplay_UpvoteMsg = DialogControlHookupStandard(
        c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/GiftBoard/Upvote");
    gv_gameplay_BasicGiftMsg = DialogControlHookupStandard(
        c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/GiftBoard/BasicGifts");
    gv_gameplay_AdvancedGiftMsg = DialogControlHookupStandard(
        c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/GiftBoard/AdvancedGifts");
    gv_gameplay_DeluxeGiftMsg = DialogControlHookupStandard(
        c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/GiftBoard/DeluxeGifts");
    gv_gameplay_TemplateTipsMsg = DialogControlHookupStandard(
        c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/LeftTips/TemplateTips");
    gv_gameplay_WeaponTipsMsg = DialogControlHookupStandard(
        c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/RightTips/weaponTips");
    gv_gameplay_AbilityTipsMsg = DialogControlHookupStandard(
        c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/RightTips/abilityTips");
    gv_gameplay_GameTipsMsg = DialogControlHookupStandard(
        c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/RightTips/gameTips");
    gv_gameplay_TimeBoard = DialogControlHookupStandard(
        c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/GameStateBoard/TimeBoard");
    gv_gameplay_NoticeMsg = DialogControlHookupStandard(
        c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/NoticeBoard/Notice");

    gv_gameplay_dynamicTips[0] = "摧毁敌方基地获得胜利，超过20分钟自动结束。\n欢迎加入企鹅交流群：750945541。";
    gv_gameplay_dynamicTips[1] = "发送技能指令会消耗能量。\n一次发送多个技能指令可以触发连续技，如：K1K2K3K4。";
    gv_gameplay_dynamicTips[2] = "召唤单位具备与玩家相同的属性点配置和武器装备，\n相当于玩家的分身。";
    gv_gameplay_dynamicTips[3] = "使用XK前缀的技能指令会消耗1.5倍能量，\n放在连续技中会更快地释放。";
    gv_gameplay_dynamicTips[4] = "韧性属性能够有效防止坦克陷入故障状态，\n故障状态的坦克会短暂丢失目标并且无法释放技能。";

    gv_gameplay_loopTimer = TimerCreate();
    gv_gameplay_giftTimer = TimerCreate();
    gv_gameplay_raceTimer = TimerCreate();
    gv_gameplay_tipsTimer = TimerCreate();

    gameplay_initMap_Init();
    gameplay_Victory_Init();
    gameplay_DestroyCenters_Init();
    gameplay_EndGame_Init();
    gameplay_RaceTimeOut_Init();
    gameplay_AddUnitPlayer_Init();
    gameplay_AddUnitTest_Init();
    gameplay_RemoveUnitPlayer_Init();
    gameplay_ShowUnitPlayerPoints();
    gameplay_KillUnit_Init();
    gameplay_DamageUnit_Init();
    gameplay_RechargePoints_Init();
    gameplay_UnitSelected_Init();
    gameplay_TimerLoop_Init();
    gameplay_SetNotice_Init();
    gameplay_GiftChange_Init();
    gameplay_ApplyGift_Init();
    gameplay_changeTips_Init();
    gameplay_TankSieged_Init();
    gameplay_TankUnsieged_Init();
    gameplay_TankSiege_Init();
    gameplay_TankUnsiege_Init();
}

bool gameplay_initMap_Func(bool testConds, bool runActions) {
    unitgroup lv_structures = UnitGroupFromId(3);
    int lv_index;
    unit lv_unit;
    string lv_notice;

    if (!runActions) {
        return true;
    }

    arena_gv_directorPlayer = 1;
    arena_gv_audiencePlayer = 2;
    arena_gf_InitbaseMap(CameraInfoFromId(2107835186));

    lv_unit = UnitFromId(c_gameplay_UnitRedCenter);
    UnitSetFacing(lv_unit, 0, 0);
    lv_unit = UnitFromId(c_gameplay_UnitBlueCenter);
    UnitSetFacing(lv_unit, 180, 0);

    for (lv_index = UnitGroupCount(lv_structures, c_unitCountAll); lv_index > 0; lv_index -= 1) {
        lv_unit = UnitGroupUnitFromEnd(lv_structures, lv_index);
        if (UnitIsAlive(lv_unit)) {
            UnitDataInitUnitProps(lv_unit);
        }
    }

    TechTreeRequirementsEnable(1, false);
    TechTreeRequirementsEnable(2, false);
    TechTreeRequirementsEnable(3, false);
    TechTreeRequirementsEnable(4, false);

    CameraLockInput(arena_gv_audiencePlayer, true);

    TimerStart(gv_gameplay_loopTimer, 1.0, true, c_timeReal);
    TimerStart(gv_gameplay_giftTimer, 60.0, true, c_timeReal);
    TimerStart(gv_gameplay_raceTimer, 60.0 * 20, false, c_timeReal);
    TimerStart(gv_gameplay_tipsTimer, 10.0, true, c_timeReal);
    TriggerExecute(gt_gameplay_changeTips, true, false);

    gv_GameBank = BankLoad(c_GameBankName, arena_gv_directorPlayer);
    BankReload(gv_GameBank);
    BankWait(gv_GameBank);
    lv_notice = BankValueGetAsString(gv_GameBank, c_BankSectionNotice, c_BankSectionNotice);
    if (lv_notice == null) {
        lv_notice = "";
    }
    DialogControlSetPropertyAsText(gv_gameplay_NoticeMsg, 
        c_triggerControlPropertyText, PlayerGroupAll(), StringToText(lv_notice));

    return true;
}

static void gameplay_initMap_Init() {
    gt_gameplay_init = TriggerCreate("gameplay_initMap_Func");
    TriggerAddEventMapInit(gt_gameplay_init);
}

bool gameplay_Victory_Func(bool testConds, bool runActions) {
    unit lv_unit = EventUnit();
    text lv_winText;
    timer endTimer;
    UnitPlayerArray rankedUnitPlayers;
    int index;
    int lv_rankLength;
    string lv_playerName;
    string lv_rankList = "本局得分排名\n";
    string lv_teamName = "";

    if (!runActions) {
        return true;
    }

    if (gv_gameplay_winnerPlayer == c_GameStatePlayerIdBlue || gv_gameplay_winnerPlayer == c_GameStatePlayerIdRed) {
        return false;
    }

    if (!UnitGroupHasUnit(UnitGroupFromId(2), lv_unit)) {
        return false;
    }

    if (UnitGetOwner(lv_unit) == c_GameStatePlayerIdBlue) {
        gv_gameplay_winnerPlayer = 4;
        lv_winText = StringExternal("Param/Value/1CF2F4A4");
    }
    else {
        gv_gameplay_winnerPlayer = 3;
        lv_winText = StringExternal("Param/Value/6A0F2AB2");
    }
    if (lv_winText != null) {
        DialogControlSetVisible(gv_gameplay_RankBoard, PlayerGroupAll(), true);

        DialogControlSetPropertyAsText(gv_gameplay_RankBoardTitle, 
            c_triggerControlPropertyText, PlayerGroupAll(), lv_winText);

        UnitPlayersOfRanked(rankedUnitPlayers);
        lv_rankLength = UnitPlayersCount();
        if (lv_rankLength > 30) {
            lv_rankLength = 30;
        }
        for (index = 0; index < lv_rankLength; index += 1) {
            lv_playerName = rankedUnitPlayers[index].name;
            if (rankedUnitPlayers[index].isBot) {
                lv_playerName = "Bot";
            }
            if (rankedUnitPlayers[index].playerId == c_GameStatePlayerIdRed) {
                lv_teamName = "红队";
            } else if(rankedUnitPlayers[index].playerId == c_GameStatePlayerIdBlue) {
                lv_teamName = "蓝队";
            }
            lv_rankList += "第" + IntToString(index+1) + "名：" + "[" + lv_teamName + "] " + lv_playerName + " -------------- " + IntToString(rankedUnitPlayers[index].score) + "\n";
        }
        DialogControlSetPropertyAsText(gv_gameplay_RankBoardList, 
            c_triggerControlPropertyText, PlayerGroupAll(), StringToText(lv_rankList));

        arena_gf_ShowMessage("10秒后游戏结束");
        endTimer = TimerCreate();
        TimerStart(endTimer, 10.0, false, c_timeReal);
        libNtve_gf_WaitForTimer(endTimer, 0.0, false);
        TriggerExecute(gt_gameplay_EndGame, true, false);
    }

    return true;
}

static void gameplay_Victory_Init() {
    gt_gameplay_Victory = TriggerCreate("gameplay_Victory_Func");
    TriggerAddEventUnitDied(gt_gameplay_Victory, null);
}

bool gameplay_DestroyCenters_Func(bool testConds, bool runActions) {
    string lv_side;

    lv_side = arena_gf_CurrentCommandArgument(1);

    if (!runActions) {
        return true;
    }

    if (lv_side == "red") {
        UnitKill(UnitFromId(c_gameplay_UnitRedCenter));
    }
    else if (lv_side == "blue") {
        UnitKill(UnitFromId(c_gameplay_UnitBlueCenter));
    }
    return true;
}

static void gameplay_DestroyCenters_Init() {
    gt_gameplay_DestroyCenters = TriggerCreate("gameplay_DestroyCenters_Func");
    TriggerAddEventGeneric(gt_gameplay_DestroyCenters, (arena_gv_commandPrefix + "destroy-centers"));
}

bool gameplay_EndGame_Func(bool testConds, bool runActions) {
    string lv_restart = arena_gf_CurrentCommandArgument(1);

    if (!runActions) {
        return true;
    }

    if (arena_gf_StringIsEmpty(lv_restart)) {
        GameOver(arena_gv_audiencePlayer, c_gameOverVictory, false, false);
        GameOver(arena_gv_directorPlayer, c_gameOverVictory, false, false);
    } else {
        RestartGame(PlayerGroupAll());
    }

    return true;
}

static void gameplay_EndGame_Init() {
    gt_gameplay_EndGame = TriggerCreate("gameplay_EndGame_Func");
    TriggerAddEventGeneric(gt_gameplay_EndGame, (arena_gv_commandPrefix + "end-game"));
}

bool gameplay_RaceTimeOut_Func(bool testConds, bool runActions) {
    UnitPlayerArray lv_players;
    int lv_redScore;
    int lv_blueScore;
    int lv_index;

    if (!runActions) {
        return true;
    }

    UnitPlayersGetAll(lv_players);
    for (lv_index = 0; lv_index < UnitPlayersCount(); lv_index += 1) {
        if (lv_players[lv_index].playerId == c_GameStatePlayerIdRed) {
            lv_redScore += lv_players[lv_index].score;
        } else if (lv_players[lv_index].playerId == c_GameStatePlayerIdBlue) {
            lv_blueScore += lv_players[lv_index].score;
        }
    }
    if (lv_redScore < lv_blueScore) {
        UnitKill(UnitFromId(c_gameplay_UnitRedCenter));
    } else {
        UnitKill(UnitFromId(c_gameplay_UnitBlueCenter));
    }

    return true;
}

static void gameplay_RaceTimeOut_Init() {
    gt_gameplay_RaceTimeOut = TriggerCreate("gameplay_RaceTimeOut_Func");
    TriggerAddEventTimer(gt_gameplay_RaceTimeOut, gv_gameplay_raceTimer);
}

bool gameplay_AddUnitPlayer_Func(bool testConds, bool runActions) {
    string lv_name;
    int lv_playerId;
    bool lv_isBot = false;
    UnitPlayer lv_player;
    string lv_teamName;
    PlayerTemplate lv_template;

    lv_name = arena_gf_CurrentCommandArgument(1);
    lv_playerId = StringToInt(arena_gf_CurrentCommandArgument(2));
    if (!arena_gf_StringIsEmpty(arena_gf_CurrentCommandArgument(3))) {
        lv_isBot = true;
    }

    if (!runActions) {
        return true;
    }
    
    if (UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    lv_player.name = lv_name;
    lv_player.playerId = lv_playerId;
    lv_player.isBot = lv_isBot;
    lv_player.template = RandomInt(c_PlayerTemplateTypePrototype+1, c_PlayerTemplateTypeCount-1);
    PlayerTemplateGet(lv_player.template, lv_template);
    lv_player.skinType = RandomInt(c_SkinDataTypeSiegeTank, c_SkinDataTypeJunkerTank);
    lv_player.weaponType = WeaponDataGetType(lv_template.weapon);
    lv_player.abilityType = AbilityDataGetType(c_AbilityTypeNone);
    lv_player.deadTime = IntToDateTime(0);
    lv_player.unitType = UnitDataGetUnitType(c_UnitDataTypeMengskSiegeTank);
    lv_player.aiMode = c_AIModeFarmming;
    lv_player.level = UnitPlayerGetMidLevel(lv_player.playerId);
    lv_player.maxPoints = c_UnitPlayerMaxLevel * 4;
    if (lv_player.level > 0) {
        lv_player.points = lv_player.level * 4;
        lv_player.maxPoints -= lv_player.level * 4;
    }
    lv_player.props[c_unitPlayerPropsMaxLife] = 0;
    lv_player.props[c_unitPlayerPropsDamageMultiplier] = 0;
    lv_player.props[c_unitPlayerPropsRangeMultiplier] = 0;
    lv_player.props[c_unitPlayerPropsAttackSpeed] = 0;
    lv_player.props[c_unitPlayerPropsMaxEnergy] = 0;
    lv_player.props[c_unitplayerPropsToughness] = 0;
    lv_player.props[c_unitPlayerPropsMoveSpeed] = 2;
    if (!AddUnitPlayer(lv_player)) {
        return false;
    }

    if (!lv_player.isBot) {
        if (lv_player.playerId == c_GameStatePlayerIdBlue) {
            lv_teamName = "蓝方";
        } else if (lv_player.playerId == c_GameStatePlayerIdRed) {
            lv_teamName = "红方";
        }
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, 
            StringToText(lv_player.name + " 加入了 " + lv_teamName + " 队伍，驾驶坦克 " + 
            lv_template.name + "，" + lv_template.desc + "，初始武器：" + 
            WeaponDataGetName(lv_template.weapon) + "L" + IntToString(lv_template.weapon)));
    }

    return true;
}

static void gameplay_AddUnitPlayer_Init() {
    gt_gameplay_AddUnitPlayer = TriggerCreate("gameplay_AddUnitPlayer_Func");
    TriggerAddEventGeneric(gt_gameplay_AddUnitPlayer, (arena_gv_commandPrefix + "add-player"));
}

bool gameplay_AddUnitTest_Func(bool testConds, bool runActions) {
    string lv_name = arena_gf_CurrentCommandArgument(1);
    string lv_unitType = arena_gf_CurrentCommandArgument(2);
    int lv_playerId = StringToInt(arena_gf_CurrentCommandArgument(3));
    string lv_pointName;
    point lv_targetPoint;
    unit lv_unit;

    if (!runActions) {
        return true;
    }

    if (lv_playerId == c_GameStatePlayerIdRed) {
        lv_pointName = "Red-0" + IntToString(1);
        lv_targetPoint = UnitGetPosition(UnitFromId(c_gameplay_UnitBlueCenter));
    } else if (lv_playerId == c_GameStatePlayerIdBlue) {
        lv_pointName = "Blue-0" + IntToString(1);
        lv_targetPoint = UnitGetPosition(UnitFromId(c_gameplay_UnitRedCenter));
    } else {
        lv_pointName = "NPC-Start";
    }
    lv_unit = arena_gf_CreateUnit(lv_playerId, PointFromName(lv_pointName), lv_unitType, PointGetFacing(PointFromName(lv_pointName)), 150, lv_name, 2, true);
    if (lv_targetPoint != null) {
        UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("move", 3), lv_targetPoint), c_orderQueueReplace);
    }
    return true;
}

static void gameplay_AddUnitTest_Init() {
    gt_gameplay_AddUnitTest = TriggerCreate("gameplay_AddUnitTest_Func");
    TriggerAddEventGeneric(gt_gameplay_AddUnitTest, (arena_gv_commandPrefix + "add-unit"));
}

bool gameplay_RemoveUnitPlayer_Func(bool testConds, bool runActions) {
    string lv_name;
    UnitPlayer lv_player;
    unit lv_unit;

    lv_name = arena_gf_CurrentCommandArgument(1);

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }
    lv_unit = arena_gf_UnitFromName(lv_name);
    if (UnitIsAlive(lv_unit)) {
        UnitKill(lv_unit);
    }

    RemoveUnitPlayer(lv_name);

    return true;
}

static void gameplay_RemoveUnitPlayer_Init() {
    gt_gameplay_RemoveUnitPlayer = TriggerCreate("gameplay_RemoveUnitPlayer_Func");
    TriggerAddEventGeneric(gt_gameplay_RemoveUnitPlayer, (arena_gv_commandPrefix + "remove-player"));
}

bool gameplay_ShowUnitPlayerPoints_Func(bool testConds, bool runActions) {
    string lv_name;
    UnitPlayer lv_player;

    lv_name = arena_gf_CurrentCommandArgument(1);

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    arena_gf_ShowMessage(lv_player.name + " 拥有点数 " + IntToString(lv_player.points) + "pt");

    return true;
}

static void gameplay_ShowUnitPlayerPoints() {
    gt_gameplay_ShowUnitPlayerPoints = TriggerCreate("gameplay_ShowUnitPlayerPoints_Func");
    TriggerAddEventGeneric(gt_gameplay_ShowUnitPlayerPoints, (arena_gv_commandPrefix + "show-points"));
}

bool gameplay_KillUnit_Func(bool testConds, bool runActions) {
    unit lv_attackerUnit;
    string lv_attacker;
    unit lv_targetUnit;
    string lv_target;
    string lv_unitType;
    UnitPlayer lv_attackerPlayer;
    UnitPlayer lv_targetPlayer;
    int lv_rewardPoints;
    int lv_rewardScore;
    UnitData lv_unitData;
    string lv_killMsg = "";
    int lv_index;
    UnitPlayer lv_player;
    GiftData lv_gift;

    lv_attackerUnit = EventUnitDamageSourceUnit();
    lv_attacker = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_attackerUnit))));
    lv_targetUnit = EventUnit();
    lv_target = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_targetUnit))));
    lv_unitType = UnitGetType(lv_targetUnit);

    if (lv_unitType == "KorhalPalaceTurret") {
        if (UnitGetOwner(lv_targetUnit) == c_GameStatePlayerIdRed) {
            if (gv_gameplay_teamArmyBlue < c_ArmyDataLevelsCount-1) {
                gv_gameplay_teamArmyBlue += 1;
            }
        } else if (UnitGetOwner(lv_targetUnit) == c_GameStatePlayerIdBlue) {
            if (gv_gameplay_teamArmyRed < c_ArmyDataLevelsCount-1) {
                gv_gameplay_teamArmyRed += 1;
            }
        }
    }

    if (arena_gf_StringIsEmpty(lv_attacker)) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    arena_gf_CleanPlayerUnit(lv_targetUnit);

    if (arena_gf_StringIsEmpty(lv_attacker) || UnitGetOwner(lv_attackerUnit) == UnitGetOwner(lv_targetUnit)) {
        return false;
    }

    if (!UnitPlayerFromName(lv_attacker, lv_attackerPlayer)) {
        return false;
    }
    if (!UnitDataGetByUnitType(lv_unitType, lv_unitData)) {
        return false;
    }

    if (!arena_gf_StringIsEmpty(lv_target) && UnitPlayerFromName(lv_target, lv_targetPlayer)) {
        lv_rewardPoints = lv_unitData.rewardExp * (lv_targetPlayer.combo + 1);
        lv_rewardPoints += (lv_targetPlayer.level - lv_attackerPlayer.level) * lv_rewardPoints / 5;
        if (lv_rewardPoints < 0) {
            lv_rewardPoints = 0;
        }
        lv_attackerPlayer.combo += 1;
        lv_rewardScore = (lv_targetPlayer.combo + 1) * lv_unitData.score;
    } else {
        lv_rewardPoints = lv_unitData.rewardExp;
        lv_rewardScore = lv_unitData.score;
    }
    lv_attackerPlayer.exp += lv_rewardPoints;
    lv_attackerPlayer.score += lv_rewardScore;
    SaveUnitPlayer(lv_attackerPlayer);

    if (!arena_gf_StringIsEmpty(lv_targetPlayer.name)) {
        if (lv_attackerPlayer.isBot) {
            lv_killMsg += "Bot ";
        } else {
            lv_killMsg += lv_attacker + " ";
        }
        lv_killMsg += "击杀了 ";
        if (lv_targetPlayer.isBot) {
            lv_killMsg += "Bot";
        } else {
            lv_killMsg += lv_target;
        }
        if (!lv_attackerPlayer.isBot || !lv_targetPlayer.isBot) {
            arena_gf_ShowMessage(lv_killMsg);
    
            if (!lv_attackerPlayer.isBot && lv_attackerPlayer.combo > 2) {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringToText(lv_attacker + " 完成了 " + IntToString(lv_attackerPlayer.combo) + " 杀！"));
            }
        }
        if (GiftDataGet(c_GiftKindBasic, lv_gift)) {
            GiftDataApply(lv_attackerPlayer, lv_gift);
        }
    }

    if (lv_unitData.dataType == c_UnitDataTypeKorhalPalaceTurret && !lv_attackerPlayer.isBot) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringToText(lv_attacker + " 摧毁了敌方防御塔！"));
    }

    for (lv_index = 0; lv_index < c_unitPlayersCap; lv_index += 1) {
        if (UnitPlayerGet(lv_index, lv_player) && lv_player.playerId == lv_attackerPlayer.playerId && lv_player.name != lv_attackerPlayer.name) {
            lv_player.exp += lv_rewardPoints / 4;
            SaveUnitPlayer(lv_player);
        }
    }

    return true;
}

static void gameplay_KillUnit_Init() {
    gt_gameplay_KillUnit = TriggerCreate("gameplay_KillUnit_Func");
    TriggerAddEventUnitDied(gt_gameplay_KillUnit, null);
}

bool gameplay_DamageUnit_Func(bool testConds, bool runActions) {
    unit lv_attackerUnit = EventUnitDamageSourceUnit();
    string lv_attacker = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_attackerUnit))));
    unit lv_targetUnit = EventUnit();
    int lv_damage = FixedToInt(EventUnitDamageAmount());
    UnitPlayer lv_attackerPlayer;
    UnitData lv_targetUnitData;

    if (!runActions) {
        return true;
    }

    if (UnitGetOwner(lv_attackerUnit) == UnitGetOwner(lv_targetUnit)) {
        return false;
    }

    if (arena_gf_StringIsEmpty(lv_attacker) || !UnitPlayerFromName(lv_attacker, lv_attackerPlayer)) {
        return false;
    }

    if (!UnitDataGetByUnitType(UnitGetType(lv_targetUnit), lv_targetUnitData)) {
        return false;
    }

    return true;
}

static void gameplay_DamageUnit_Init() {
    gt_gameplay_DamageUnit = TriggerCreate("gameplay_DamageUnit_Func");
    TriggerAddEventUnitDamaged(gt_gameplay_DamageUnit, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

bool gameplay_RechargePoints_Func(bool testConds, bool runActions) {
    string lv_name;
    int lv_points;
    UnitPlayer lv_player;

    lv_name = arena_gf_CurrentCommandArgument(1);
    lv_points = StringToInt(arena_gf_CurrentCommandArgument(2));

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    if (lv_points <= 0) {
        return false;
    }

    lv_player.points += lv_points;
    SaveUnitPlayer(lv_player);

    arena_gf_ShowMessage(lv_player.name + " 充值了 " + IntToString(lv_points) + " pts");

    return true;
}

static void gameplay_RechargePoints_Init() {
    gt_gameplay_RechargePoints = TriggerCreate("gameplay_RechargePoints_Func");
    TriggerAddEventGeneric(gt_gameplay_RechargePoints, (arena_gv_commandPrefix + "recharge-points"));
}

bool gameplay_UnitSelected_Func(bool testConds, bool runActions) {
    unit lv_unit = EventUnit();
    string lv_name = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_unit))));
    UnitPlayer lv_player;
    order lv_order;
    string lv_huntTarget;
    unit lv_huntTargetUnit;

    if (!runActions) {
        return true;
    }

    if (arena_gf_StringIsEmpty(lv_name) || !UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }
    // arena_gf_DebugLog(lv_name + " datetime: " + IntToString(DateTimeToInt(CurrentDateTimeGet())));
    arena_gf_DebugLog(lv_name + " unit: " + UnitGetType(lv_unit));
    arena_gf_DebugLog(lv_name + " weapon: " + lv_player.weaponType);
    arena_gf_DebugLog(lv_name + " ability: " + lv_player.abilityType);
    arena_gf_DebugLog(lv_name + " level: " + IntToString(lv_player.level));
    arena_gf_DebugLog(lv_name + " exp: " + IntToString(lv_player.exp));
    arena_gf_DebugLog(lv_name + " points: " + IntToString(lv_player.points));
    //arena_gf_DebugLog(lv_name + " score: " + IntToString(lv_player.score));
    //arena_gf_DebugLog(lv_name + " combo: " + IntToString(lv_player.combo));
    arena_gf_DebugLog(lv_name + " aiMode: " + IntToString(lv_player.aiMode));
    // arena_gf_DebugLog(lv_name + " TotalTakenDamage: " + IntToString(lv_player.aiStates[0]));
    // arena_gf_DebugLog(lv_name + " WillBrokenTime: " + IntToString(lv_player.aiStates[1]));
    // arena_gf_DebugLog(lv_name + " OriginAIMode: " + IntToString(lv_player.aiStates[2]));
    // arena_gf_DebugLog(lv_name + " ModeEntered: " + IntToString(lv_player.aiStates[3]));
    // arena_gf_DebugLog(lv_name + " HuntTarget: " + IntToString(lv_player.aiStates[4]));
    // lv_huntTarget = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(lv_player.aiStates[4])));
    // if (!arena_gf_StringIsEmpty(lv_huntTarget)) {
    //     arena_gf_DebugLog(lv_name + " HuntTarget: " + lv_huntTarget);
    //     lv_huntTargetUnit = DataTableGetUnit(true, arena_gv_unitNamePrefix + lv_huntTarget);
    //     if (UnitIsAlive(lv_huntTargetUnit)) {
    //         arena_gf_DebugLog(lv_name + " HuntTarget unit: " + UnitGetType(lv_huntTargetUnit) + ", " + IntToString(UnitGetTag(lv_huntTargetUnit)));
    //     }
    // }
    // lv_order = UnitOrder(lv_unit, 0);
    // if (lv_order != null) {
    //     arena_gf_DebugLog(lv_name + " order ability: " + AbilityCommandGetAbility(OrderGetAbilityCommand(lv_order)));
    //     if (OrderGetTargetType(lv_order) == c_orderTargetUnit) {
    //         arena_gf_DebugLog(lv_name + " order target unit: " + UnitGetType(OrderGetTargetUnit(lv_order)) + ", " + IntToString(UnitGetTag(OrderGetTargetUnit(lv_order))));
    //     }
    // }
    
    return true;
}

static void gameplay_UnitSelected_Init() {
    gt_gameplay_UnitSelected = TriggerCreate("gameplay_UnitSelected_Func");
    TriggerAddEventUnitSelected(gt_gameplay_UnitSelected, null, c_playerAny, true);
}

bool gameplay_TimerLoop_Func(bool testConds, bool runActions) {
    int lv_index;
    UnitPlayer lv_player;
    datetime lv_timePast = IntToDateTime(DateTimeToInt(CurrentDateTimeGet()) - DateTimeToInt(gv_gameplay_startTime));
    string lv_timeMinute = IntToString(GetDateTimeMinute(lv_timePast));
    string lv_timeSecond = IntToString(GetDateTimeSecond(lv_timePast));
    unit lv_unit;
    point lv_point;
    ArmyData armyData;
    PlayerTemplate lv_template;
    string lv_servantName;
    int lv_servantIndex;
    unit lv_playerUnit;
    string lv_addBehavior = "StarArenaMaxLifeEnhanceGift";
    UnitData lv_unitData;
    int lv_originLife;
    int lv_originMaxLife;
    int lv_addPoints;

    if (!runActions) {
        return true;
    }

    for (lv_index = 0; lv_index < c_unitPlayersCap; lv_index += 1) {
        if (UnitPlayerGet(lv_index, lv_player)) {
            if (PlayerTemplateGet(lv_player.template, lv_template)) {
                PlayerTemplateApply(lv_player, lv_template);
            }

            lv_playerUnit = arena_gf_UnitFromName(lv_player.name);
            if (UnitIsAlive(lv_playerUnit)) {
                lv_addPoints = 0;
                for (lv_servantIndex = 1; lv_servantIndex <= DataTableInstanceValueCount(lv_player.servants); lv_servantIndex += 1) {
                    lv_servantName = DataTableInstanceValueName(lv_player.servants, lv_servantIndex);
                    lv_unit = DataTableInstanceGetUnit(lv_player.servants, lv_servantName);
                    if (UnitIsAlive(lv_unit) && UnitDataGetByUnitType(UnitGetType(lv_unit), lv_unitData)) {
                        lv_addPoints += lv_unitData.addPoints;
                    } else {
                        DataTableInstanceValueRemove(lv_player.servants, lv_servantName);
                    }
                }
                if (lv_addPoints > 0 && UnitDataGetByUnitType(lv_player.unitType, lv_unitData)) {
                    UnitBehaviorRemove(lv_playerUnit, lv_addBehavior, UnitBehaviorCount(lv_playerUnit, lv_addBehavior));
                    UnitBehaviorAdd(lv_playerUnit, lv_addBehavior, lv_playerUnit, lv_addPoints / 10);
                    lv_originLife = UnitGetPropertyInt(lv_playerUnit, c_unitPropLife, true);
                    lv_originMaxLife = UnitGetPropertyInt(lv_playerUnit, c_unitPropLifeMax, true);
                    UnitSetPropertyInt(lv_playerUnit, c_unitPropLife, lv_originLife * UnitGetPropertyInt(lv_playerUnit, c_unitPropLifeMax, true) / lv_originMaxLife);
                    lv_unitData.baseScale += 30 + lv_addPoints;
                    if (lv_unitData.baseScale > 300) {
                        lv_unitData.baseScale = 300;
                    }
                    UnitSetScale(lv_playerUnit, lv_unitData.baseScale, lv_unitData.baseScale, lv_unitData.baseScale);
                }
            }

            if (lv_player.isBot) {
                lv_player.name = "Bot";
            }
            DialogControlSetPropertyAsText(gv_gameplay_playerInfoItmes[lv_index][0], 
                c_triggerControlPropertyText, PlayerGroupAll(), StringToText(lv_player.name));
            DialogControlSetPropertyAsText(gv_gameplay_playerInfoItmes[lv_index][1], 
                c_triggerControlPropertyText, PlayerGroupAll(), 
                StringToText("lv." + IntToString(lv_player.level) + " " + IntToString(lv_player.points) + "pts"));
            DialogControlSetPropertyAsText(gv_gameplay_playerInfoItmes[lv_index][2], 
                c_triggerControlPropertyText, PlayerGroupAll(), 
                StringToText("A" + IntToString(lv_player.props[c_unitPlayerPropsMaxLife]) + 
                "B" + IntToString(lv_player.props[c_unitPlayerPropsDamageMultiplier]) + 
                "C" + IntToString(lv_player.props[c_unitPlayerPropsRangeMultiplier]) + 
                " D" + IntToString(lv_player.props[c_unitPlayerPropsAttackSpeed]) + 
                "E" + IntToString(lv_player.props[c_unitPlayerPropsMaxEnergy]) + 
                "F" + IntToString(lv_player.props[c_unitplayerPropsToughness])));
            DialogControlSetPropertyAsText(gv_gameplay_playerInfoItmes[lv_index][3],
                c_triggerControlPropertyText, PlayerGroupAll(), 
                StringToText(IntToString(lv_player.exp) + "/" + IntToString(UnitDataGetMaxExp(lv_player.unitType, lv_player.level))));
        }
    }

    if (StringLength(lv_timeMinute) == 1) {
        lv_timeMinute = "0" + lv_timeMinute;
    }
    if (StringLength(lv_timeSecond) == 1) {
        lv_timeSecond = "0" + lv_timeSecond;
    }
    DialogControlSetPropertyAsText(gv_gameplay_TimeBoard, c_triggerControlPropertyText, PlayerGroupAll(), 
        StringToText(lv_timeMinute + ":" + lv_timeSecond));

    for (lv_index = 3; lv_index <= 4; lv_index += 1) {
        if (UnitIsAlive(UnitFromId(c_gameplay_UnitBlueCenter))) {
            lv_point = PointFromName("Red-0"+IntToString(lv_index));
            ArmyDataGet(gv_gameplay_teamArmyRed, armyData);
            if (DateTimeToInt(CurrentDateTimeGet()) % armyData.spawnInterval == 1) {
                lv_unit = arena_gf_CreateUnit(c_GameStatePlayerIdRed, lv_point, UnitDataGetUnitType(armyData.unitType), PointGetFacing(lv_point), 100, "", 2, false);
                ArmyDataInitUnitProps(armyData, lv_unit);
                UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(UnitFromId(c_gameplay_UnitBlueCenter))), c_orderQueueReplace);
            }
        }
        if (UnitIsAlive(UnitFromId(c_gameplay_UnitRedCenter))) {
            lv_point = PointFromName("Blue-0"+IntToString(lv_index));
            ArmyDataGet(gv_gameplay_teamArmyBlue, armyData);
            if (DateTimeToInt(CurrentDateTimeGet()) % armyData.spawnInterval == 1) {
                lv_unit = arena_gf_CreateUnit(c_GameStatePlayerIdBlue, lv_point, UnitDataGetUnitType(armyData.unitType), PointGetFacing(lv_point), 100, "", 2, false);
                ArmyDataInitUnitProps(armyData, lv_unit);
                UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(UnitFromId(c_gameplay_UnitRedCenter))), c_orderQueueReplace);
            }
        }
    }

    return true;
}

static void gameplay_TimerLoop_Init() {
    gt_gameplay_TimerLoop = TriggerCreate("gameplay_TimerLoop_Func");
    TriggerAddEventTimer(gt_gameplay_TimerLoop, gv_gameplay_loopTimer);
}

bool gameplay_SetNotice_Func(bool testConds, bool runActions) {
    string lv_msg = arena_gf_CurrentCommandArgument(1);
    if (lv_msg == null) {
        lv_msg = "";
    }

    if (!runActions) {
        return true;
    }

    DialogControlSetPropertyAsText(gv_gameplay_NoticeMsg, 
        c_triggerControlPropertyText, PlayerGroupAll(), StringToText(lv_msg));
    BankValueSetFromString(gv_GameBank, c_BankSectionNotice, c_BankSectionNotice, lv_msg);
    BankSave(gv_GameBank);
    return true;
}

static void gameplay_SetNotice_Init() {
    gt_gameplay_SetNotice = TriggerCreate("gameplay_SetNotice_Func");
    TriggerAddEventGeneric(gt_gameplay_SetNotice, (arena_gv_commandPrefix + "set-notice"));
}

bool gameplay_GiftChange_Func(bool testConds, bool runActions) {
    GiftData lv_gift;

    if (!runActions) {
        return true;
    }

    GiftDataGet(c_GiftKindUpvote, lv_gift);
    DialogControlSetPropertyAsText(gv_gameplay_UpvoteMsg, c_triggerControlPropertyText, PlayerGroupAll(), 
        StringToText(lv_gift.price + "：" + lv_gift.desc));

    GiftDataGet(c_GiftKindBasic, lv_gift);
    DialogControlSetPropertyAsText(gv_gameplay_BasicGiftMsg, c_triggerControlPropertyText, PlayerGroupAll(), 
        StringToText(lv_gift.price + "：" + lv_gift.desc));

    GiftDataGet(c_GiftKindAdvanced, lv_gift);
    DialogControlSetPropertyAsText(gv_gameplay_AdvancedGiftMsg, c_triggerControlPropertyText, PlayerGroupAll(), 
        StringToText(lv_gift.price + "：" + lv_gift.desc));

    GiftDataGet(c_GiftKindDeluxe, lv_gift);
    DialogControlSetPropertyAsText(gv_gameplay_DeluxeGiftMsg, c_triggerControlPropertyText, PlayerGroupAll(), 
        StringToText(lv_gift.price + "：" + lv_gift.desc));
    return true;
}

static void gameplay_GiftChange_Init() {
    gt_gameplay_GiftChange = TriggerCreate("gameplay_GiftChange_Func");
    TriggerAddEventTimer(gt_gameplay_GiftChange, gv_gameplay_giftTimer);
}

bool gameplay_ApplyGift_Func(bool testConds, bool runActions) {
    string lv_name = arena_gf_CurrentCommandArgument(1);
    int lv_kind = StringToInt(arena_gf_CurrentCommandArgument(2));
    int lv_number = StringToInt(arena_gf_CurrentCommandArgument(3));
    UnitPlayer lv_player;
    GiftData lv_gift;
    int lv_index;

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    if (!GiftDataGet(lv_kind, lv_gift)) {
        return false;
    }

    for (lv_index = 0; lv_index < lv_number; lv_index += 1) {
        GiftDataApply(lv_player, lv_gift);
    }

    if (lv_kind != c_GiftKindUpvote) {
        arena_gf_ShowMessage(lv_player.name + " 召唤了" + IntToString(lv_number) + "个 " + IntToString(lv_player.level) + "级" + lv_gift.name);
    }
    return true;
}

static void gameplay_ApplyGift_Init() {
    gt_gameplay_ApplyGift = TriggerCreate("gameplay_ApplyGift_Func");
    TriggerAddEventGeneric(gt_gameplay_ApplyGift, (arena_gv_commandPrefix + "apply-gift"));
}

bool gameplay_changeTips_Func(bool testConds, bool runActions) {
    int lv_index;
    int lv_count;
    int lv_ts = DateTimeToInt(CurrentDateTimeGet());
    string lv_templateTips = "切换坦克：";
    string lv_weaponTips = "装备武器：";
    string lv_abilityTips = "切换技能：";

    if (!runActions) {
        return true;
    }

    lv_count = 8;
    for (lv_index = (lv_ts / 10) % c_PlayerTemplateTypeCount; lv_count > 0; lv_index += 1) {
        if (lv_index >= c_PlayerTemplateTypeCount) {
            lv_index = 0;
        }
        if (!arena_gf_StringIsEmpty(PlayerTemplateGetName(lv_index))) {
            lv_templateTips += "T" + IntToString(lv_index) + PlayerTemplateGetName(lv_index) + " ";
            lv_count -= 1;
            if (lv_count == 4) {
                lv_templateTips += "\n";
            }
        }
    }
    DialogControlSetPropertyAsText(gv_gameplay_TemplateTipsMsg, c_triggerControlPropertyText, PlayerGroupAll(), StringToText(lv_templateTips));
    lv_count = 7;
    for (lv_index = (lv_ts / 10) % c_WeaponDataTypeCount; lv_count > 0; lv_index += 1) {
        if (lv_index >= c_WeaponDataTypeCount) {
            lv_index = 0;
        }
        if (!arena_gf_StringIsEmpty(WeaponDataGetName(lv_index))) {
            lv_weaponTips += "L" + IntToString(lv_index) + WeaponDataGetName(lv_index) + " ";
            lv_count -= 1;
            if (lv_count == 4) {
                lv_weaponTips += "\n";
            }
        }
    }
    DialogControlSetPropertyAsText(gv_gameplay_WeaponTipsMsg, c_triggerControlPropertyText, PlayerGroupAll(), StringToText(lv_weaponTips));
    lv_count = 4;
    for (lv_index = (lv_ts / 10) % c_AbilityTypeCount; lv_count > 0; lv_index += 1) {
        if (lv_index >= c_AbilityTypeCount) {
            lv_index = 0;
        }
        if (!arena_gf_StringIsEmpty(AbilityDataGetName(lv_index))) {
            lv_abilityTips += "K" + IntToString(lv_index) + AbilityDataGetName(lv_index) + " ";
            lv_count -= 1;
        }
    }
    DialogControlSetPropertyAsText(gv_gameplay_AbilityTipsMsg, c_triggerControlPropertyText, PlayerGroupAll(), StringToText(lv_abilityTips));

    lv_index = (lv_ts / 10) % c_gameplay_dynamicTipsCount;
    DialogControlSetPropertyAsText(gv_gameplay_GameTipsMsg, c_triggerControlPropertyText, PlayerGroupAll(), StringToText(gv_gameplay_dynamicTips[lv_index]));
    return true;
}

static void gameplay_changeTips_Init() {
    gt_gameplay_changeTips = TriggerCreate("gameplay_changeTips_Func");
    TriggerAddEventTimer(gt_gameplay_changeTips, gv_gameplay_tipsTimer);
}

bool gameplay_TankSieged_Func(bool testConds, bool runActions) {
    unit lv_unit = EventUnit();
    string lv_name = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_unit))));
    UnitPlayer lv_player;

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    UnitWeaponRemove(lv_unit, "MengskSiegeTankSieged");
    UnitWeaponAdd(lv_unit, lv_player.weaponType, "SiegeTankSieged");
    SkinDataSwapModel(lv_unit, lv_player.skinType, c_SkinDataStateTankSieged);
    return true;
}

bool gameplay_TankUnsieged_Func(bool testConds, bool runActions) {
    unit lv_unit = EventUnit();
    string lv_name = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_unit))));
    UnitPlayer lv_player;

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    UnitWeaponRemove(lv_unit, "FusionCutter");
    UnitWeaponAdd(lv_unit, lv_player.weaponType, "SiegeTank");
    SkinDataSwapModel(lv_unit, lv_player.skinType, c_SkinDataStateTank);

    UnitBehaviorRemove(lv_unit, "StarArenaAttackRangeEnhance", 10);
    UnitBehaviorRemove(lv_unit, "StarArenaAttackDamageEnhance", 20);
    return true;
}

static void gameplay_TankSieged_Init() {
    gt_gameplay_TankSieged = TriggerCreate("gameplay_TankSieged_Func");
    TriggerAddEventUnitAbility(gt_gameplay_TankSieged, null, AbilityCommand("MengskSiegeTankSiege", 0), c_abilMorphStageUnitEnd, false);
}

static void gameplay_TankUnsieged_Init() {
    gt_gameplay_TankUnsieged = TriggerCreate("gameplay_TankUnsieged_Func");
    TriggerAddEventUnitAbility(gt_gameplay_TankUnsieged, null, AbilityCommand("MengskSiegeTankUnsiege", 0), c_abilMorphStageUnitEnd, false);
}

bool gameplay_TankSiege_Func(bool testConds, bool runActions) {
    unit lv_unit = EventUnit();
    string lv_name = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_unit))));
    UnitPlayer lv_player;

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    if (EventUnitAbilityStage() == c_abilMorphStageActorStart) {
        SkinDataSwapModel(lv_unit, lv_player.skinType, c_SkinDataStateTankMorph);
    } else if (EventUnitAbilityStage() == c_abilMorphStageUnitStart) {
        UnitWeaponRemove(lv_unit, lv_player.weaponType);
        UnitWeaponAdd(lv_unit, "FusionCutter", "SiegeTank");
        UnitBehaviorAdd(lv_unit, "StarArenaAttackRangeEnhance", lv_unit, 10);
        UnitBehaviorAdd(lv_unit, "StarArenaAttackDamageEnhance", lv_unit, 20);
    }
    return true;
}

bool gameplay_TankUnsiege_Func(bool testConds, bool runActions) {
    unit lv_unit = EventUnit();
    string lv_name = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_unit))));
    UnitPlayer lv_player;

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    if (EventUnitAbilityStage() == c_abilMorphStageActorStart) {
        SkinDataSwapModel(lv_unit, lv_player.skinType, c_SkinDataStateTankMorph);
    } else if (EventUnitAbilityStage() == c_abilMorphStageUnitStart) {
        UnitWeaponRemove(lv_unit, lv_player.weaponType);
    }
    return true;
}

static void gameplay_TankSiege_Init() {
    gt_gameplay_TankSiege = TriggerCreate("gameplay_TankSiege_Func");
    TriggerAddEventUnitAbility(gt_gameplay_TankSiege, null, AbilityCommand("MengskSiegeTankSiege", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(gt_gameplay_TankSiege, null, AbilityCommand("MengskSiegeTankSiege", 0), c_abilMorphStageActorStart, false);
}

static void gameplay_TankUnsiege_Init() {
    gt_gameplay_TankUnsiege = TriggerCreate("gameplay_TankUnsiege_Func");
    TriggerAddEventUnitAbility(gt_gameplay_TankUnsiege, null, AbilityCommand("MengskSiegeTankUnsiege", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(gt_gameplay_TankUnsiege, null, AbilityCommand("MengskSiegeTankUnsiege", 0), c_abilMorphStageActorStart, false);
}