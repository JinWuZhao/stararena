// Trigger Declarations
static trigger gt_gameplay_init;
static trigger gt_gameplay_Victory;
static trigger gt_gameplay_DestroyCenters;
static trigger gt_gameplay_EndGame;
static trigger gt_gameplay_AddUnitPlayer;
static trigger gt_gameplay_RemoveUnitPlayer;
static trigger gt_gameplay_ShowUnitPlayerPoints;
static trigger gt_gameplay_DamageUnit;
static trigger gt_gameplay_KillUnit;
static trigger gt_gameplay_RechargePoints;

// Variable Declarations
static int gv_gameplay_winnerPlayer;

// Function Declarations
void InitGamePlay();

static void gameplay_initMap_Init();
static void gameplay_Victory_Init();
static void gameplay_DestroyCenters_Init();
static void gameplay_EndGame_Init();
static void gameplay_AddUnitPlayer_Init();
static void gameplay_RemoveUnitPlayer_Init();
static void gameplay_ShowUnitPlayerPoints();
static void gameplay_DamageUnit_Init();
static void gameplay_KillUnit_Init();
static void gameplay_RechargePoints_Init();

// Functions
void InitGamePlay() {
    gameplay_initMap_Init();
    gameplay_Victory_Init();
    gameplay_DestroyCenters_Init();
    gameplay_EndGame_Init();
    gameplay_AddUnitPlayer_Init();
    gameplay_RemoveUnitPlayer_Init();
    gameplay_ShowUnitPlayerPoints();
    gameplay_DamageUnit_Init();
    gameplay_KillUnit_Init();
    gameplay_RechargePoints_Init();
}

bool gameplay_initMap_Func(bool testConds, bool runActions) {
    unitgroup unitGroup1;
    int unitGroup1Count;
    unit unitGroup1Unit;
    unitgroup unitGroup2;
    int unitGroup2Count;
    unit unitGroup2Unit;
    unitgroup unitGroup3;
    int unitGroup3Count;
    unit unitGroup3Unit;
    unitgroup unitGroup4;
    int unitGroup4Count;
    unit unitGroup4Unit;

    if (!runActions) {
        return true;
    }

    arena_gv_directorPlayer = 1;
    arena_gv_audiencePlayer = 2;
    arena_gf_InitbaseMap(CameraInfoFromId(2107835186));
    unitGroup1 = UnitGroupFromId(1);
    unitGroup1Count = UnitGroupCount(unitGroup1, c_unitCountAll);
    for (;; unitGroup1Count -= 1) {
        unitGroup1Unit = UnitGroupUnitFromEnd(unitGroup1, unitGroup1Count);
        if (unitGroup1Unit == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(unitGroup1Unit, true);
    }
    unitGroup2 = UnitGroupFromId(2);
    unitGroup2Count = UnitGroupCount(unitGroup2, c_unitCountAll);
    for (;; unitGroup2Count -= 1) {
        unitGroup2Unit = UnitGroupUnitFromEnd(unitGroup2, unitGroup2Count);
        if (unitGroup2Unit == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(unitGroup2Unit, true);
        UnitSetScale(unitGroup2Unit, 200.0, 200.0, 200.0);
        libNtve_gf_ChangeUnitDamage(unitGroup2Unit, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
    }
    unitGroup3 = UnitGroupFromId(3);
    unitGroup3Count = UnitGroupCount(unitGroup3, c_unitCountAll);
    for (;; unitGroup3Count -= 1) {
        unitGroup3Unit = UnitGroupUnitFromEnd(unitGroup3, unitGroup3Count);
        if (unitGroup3Unit == null) { break; }
        if ((UnitGetType(unitGroup3Unit) == "AutoTurret")) {
            UnitSetScale(unitGroup3Unit, 200.0, 200.0, 200.0);
            libNtve_gf_ChangeUnitDamage(unitGroup3Unit, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega2);
        }

    }
    unitGroup4 = UnitGroupFromId(4);
    unitGroup4Count = UnitGroupCount(unitGroup4, c_unitCountAll);
    for (;; unitGroup4Count -= 1) {
        unitGroup4Unit = UnitGroupUnitFromEnd(unitGroup4, unitGroup4Count);
        if (unitGroup4Unit == null) { break; }
        if ((UnitGetType(unitGroup4Unit) == "AutoTurret")) {
            UnitSetScale(unitGroup4Unit, 200.0, 200.0, 200.0);
            libNtve_gf_ChangeUnitDamage(unitGroup4Unit, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega2);
        }

    }
    TechTreeRequirementsEnable(1, false);
    TechTreeRequirementsEnable(2, false);
    TechTreeRequirementsEnable(3, false);
    TechTreeRequirementsEnable(4, false);
    return true;
}

static void gameplay_initMap_Init() {
    gt_gameplay_init = TriggerCreate("gameplay_initMap_Func");
    TriggerAddEventMapInit(gt_gameplay_init);
}

bool gameplay_Victory_Func(bool testConds, bool runActions) {
    text lv_winText;
    timer scoreTimer;
    UnitPlayerArray rankedUnitPlayers;
    int index;

    if (gv_gameplay_winnerPlayer == 3 || gv_gameplay_winnerPlayer == 4) {
        return false;
    }

    if (!UnitGroupHasUnit(UnitGroupFromId(5), EventUnit()) && !UnitGroupHasUnit(UnitGroupFromId(6), EventUnit())) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    if (UnitGroupCount(UnitGroupFromId(5), c_unitCountAlive) == 0) {
        gv_gameplay_winnerPlayer = 4;
        lv_winText = StringExternal("Param/Value/1CF2F4A4");
    }
    else if (UnitGroupCount(UnitGroupFromId(6), c_unitCountAlive) == 0) {
        gv_gameplay_winnerPlayer = 3;
        lv_winText = StringExternal("Param/Value/6A0F2AB2");
    }
    if (lv_winText != null) {
        DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorCenter, 70, 0, lv_winText, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_gameplay_winnerPlayer, false)), false, 2.0);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);

        arena_gf_ShowMessage("排行榜:");
        UnitPlayersOfRanked(rankedUnitPlayers);
        scoreTimer = TimerCreate();
        for (index = 0; index < UnitPlayersCount(); index += 1) {
            TimerStart(scoreTimer, 1.0, false, c_timeReal);
            libNtve_gf_WaitForTimer(scoreTimer, 0.0, false);
            arena_gf_ShowMessage("第" + IntToString(index+1) + "名：" + rankedUnitPlayers[index].name + " ---------------------------- " + IntToString(rankedUnitPlayers[index].score) + "分");
        }

        arena_gf_ShowMessage("10秒后游戏结束");
        TimerStart(scoreTimer, 10.0, false, c_timeReal);
        libNtve_gf_WaitForTimer(scoreTimer, 0.0, false);
        TriggerExecute(gt_gameplay_EndGame, true, false);
    }

    return true;
}

static void gameplay_Victory_Init() {
    gt_gameplay_Victory = TriggerCreate("gameplay_Victory_Func");
    TriggerAddEventUnitDied(gt_gameplay_Victory, null);
}

bool gameplay_DestroyCenters_Func(bool testConds, bool runActions) {
    string lv_side;
    unitgroup unitGroup5;
    int unitGroup5Count;
    unit unitGroup5Unit;
    unitgroup unitGroup6;
    int unitGroup6Count;
    unit unitGroup6Unit;

    lv_side = arena_gf_CurrentCommandArgument(1);

    if (!runActions) {
        return true;
    }

    if (lv_side == "left") {
        unitGroup5 = UnitGroupFromId(5);
        unitGroup5Count = UnitGroupCount(unitGroup5, c_unitCountAll);
        for (;; unitGroup5Count -= 1) {
            unitGroup5Unit = UnitGroupUnitFromEnd(unitGroup5, unitGroup5Count);
            if (unitGroup5Unit == null) { break; }
            UnitKill(unitGroup5Unit);
        }

    }
    else if (lv_side == "right") {
        unitGroup6 = UnitGroupFromId(6);
        unitGroup6Count = UnitGroupCount(unitGroup6, c_unitCountAll);
        for (;; unitGroup6Count -= 1) {
            unitGroup6Unit = UnitGroupUnitFromEnd(unitGroup6, unitGroup6Count);
            if (unitGroup6Unit == null) { break; }
            UnitKill(unitGroup6Unit);
        }

    }
    else {

    }
    return true;
}

static void gameplay_DestroyCenters_Init() {
    gt_gameplay_DestroyCenters = TriggerCreate("gameplay_DestroyCenters_Func");
    TriggerAddEventGeneric(gt_gameplay_DestroyCenters, (arena_gv_commandPrefix + "destroy-centers"));
}

bool gameplay_EndGame_Func(bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }

    GameOver(arena_gv_audiencePlayer, c_gameOverVictory, false, false);
    GameOver(arena_gv_directorPlayer, c_gameOverVictory, false, false);
    return true;
}

static void gameplay_EndGame_Init() {
    gt_gameplay_EndGame = TriggerCreate("gameplay_EndGame_Func");
    TriggerAddEventGeneric(gt_gameplay_EndGame, (arena_gv_commandPrefix + "end-game"));
}

bool gameplay_AddUnitPlayer_Func(bool testConds, bool runActions) {
    string lv_name;
    int lv_playerId;
    UnitPlayer lv_player;

    lv_name = arena_gf_CurrentCommandArgument(1);
    lv_playerId = StringToInt(arena_gf_CurrentCommandArgument(2));

    if (!runActions) {
        return true;
    }
    
    if (UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    lv_player.name = lv_name;
    lv_player.playerId = lv_playerId;
    if (!AddUnitPlayer(lv_player)) {
        return false;
    }

    return true;
}

static void gameplay_AddUnitPlayer_Init() {
    gt_gameplay_AddUnitPlayer = TriggerCreate("gameplay_AddUnitPlayer_Func");
    TriggerAddEventGeneric(gt_gameplay_AddUnitPlayer, (arena_gv_commandPrefix + "add-player"));
}

bool gameplay_RemoveUnitPlayer_Func(bool testConds, bool runActions) {
    string lv_name;

    lv_name = arena_gf_CurrentCommandArgument(1);

    if (!runActions) {
        return true;
    }

    if (!RemoveUnitPlayer(lv_name)) {
        return false;
    }

    return true;
}

static void gameplay_RemoveUnitPlayer_Init() {
    gt_gameplay_RemoveUnitPlayer = TriggerCreate("gameplay_RemoveUnitPlayer_Func");
    TriggerAddEventGeneric(gt_gameplay_RemoveUnitPlayer, (arena_gv_commandPrefix + "remove-player"));
}

bool gameplay_ShowUnitPlayerPoints_Func(bool testConds, bool runActions) {
    string lv_name;
    UnitPlayer lv_player;
    unit lv_unit;
    int lv_pointsText;
    timer lv_pointsTimer;

    lv_name = arena_gf_CurrentCommandArgument(1);

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    lv_unit = DataTableGetUnit(true, arena_gv_unitNamePrefix + lv_name);
    if (lv_unit == null) {
        return false;
    }

    lv_pointsText = TextTagCreate(StringToText(IntToString(lv_player.points)), 24, UnitGetPosition(lv_unit), 5.0, true, false, PlayerGroupAll());
    TextTagSetColor(lv_pointsText, c_textTagColorText, Color(0, 255, 0));
    TextTagAttachToUnit(lv_pointsText, lv_unit, 5.0);
    lv_pointsTimer = TimerCreate();
    TimerStart(lv_pointsTimer, 2.0, false, c_timeReal);
    libNtve_gf_WaitForTimer(lv_pointsTimer, 0.0, false);
    TextTagDestroy(lv_pointsText);

    return true;
}

static void gameplay_ShowUnitPlayerPoints() {
    gt_gameplay_ShowUnitPlayerPoints = TriggerCreate("gameplay_ShowUnitPlayerPoints_Func");
    TriggerAddEventGeneric(gt_gameplay_ShowUnitPlayerPoints, (arena_gv_commandPrefix + "show-points"));
}

bool gameplay_DamageUnit_Func(bool testConds, bool runActions) {
    string lv_attacker;
    string lv_target;
    int lv_damage;
    UnitPlayer lv_player;

    lv_attacker = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(EventUnitDamageSourceUnit()))));
    lv_target = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(EventUnit()))));
    lv_damage = FixedToInt(EventUnitDamageAmount());

    if (lv_attacker == "") {
        return false;
    }

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_attacker, lv_player)) {
        return false;
    }

    lv_player.score += lv_damage;
    SaveUnitPlayer(lv_player);

    return true;
}

static void gameplay_DamageUnit_Init() {
    gt_gameplay_DamageUnit = TriggerCreate("gameplay_DamageUnit_Func");
    TriggerAddEventUnitDamaged(gt_gameplay_DamageUnit, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

bool gameplay_KillUnit_Func(bool testConds, bool runActions) {
    unit lv_attackerUnit;
    string lv_attacker;
    unit lv_targetUnit;
    string lv_unitType;
    UnitPlayer lv_player;
    int lv_rewardPoints;
    int lv_rewardText;
    timer lv_rewardTimer;

    lv_attackerUnit = EventUnitDamageSourceUnit();
    lv_attacker = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_attackerUnit))));
    lv_targetUnit = EventUnit();
    lv_unitType = UnitGetType(lv_targetUnit);

    if (lv_attacker == "" || !UnitGroupHasUnit(arena_gv_playerUnitGroup, lv_targetUnit)) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_attacker, lv_player)) {
        return false;
    }

    lv_rewardPoints = RewardPointsFromUnitType(lv_unitType);
    lv_player.points += lv_rewardPoints;
    SaveUnitPlayer(lv_player);

    lv_rewardText = TextTagCreate(StringToText("+"+IntToString(lv_rewardPoints)), 24, UnitGetPosition(libNtve_gf_KillingUnit()), 3.0, true, false, PlayerGroupAll());
    TextTagSetColor(lv_rewardText, c_textTagColorText, Color(0, 255, 0));
    TextTagAttachToUnit(lv_rewardText, libNtve_gf_KillingUnit(), 3.0);
    TextTagSetGravity(lv_rewardText, 2.0);
    lv_rewardTimer = TimerCreate();
    TimerStart(lv_rewardTimer, 2.0, false, c_timeReal);
    libNtve_gf_WaitForTimer(lv_rewardTimer, 0.0, false);
    TextTagDestroy(lv_rewardText);

    return true;
}

static void gameplay_KillUnit_Init() {
    gt_gameplay_KillUnit = TriggerCreate("gameplay_KillUnit_Func");
    TriggerAddEventUnitDied(gt_gameplay_KillUnit, null);
}

bool gameplay_RechargePoints_Func(bool testConds, bool runActions) {
    string lv_name;
    int lv_points;
    UnitPlayer lv_player;
    int lv_rewardText;
    timer lv_rewardTimer;
    unit lv_unit;

    lv_name = arena_gf_CurrentCommandArgument(1);
    lv_points = StringToInt(arena_gf_CurrentCommandArgument(2));

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    if (lv_points <= 0) {
        return false;
    }

    lv_player.points += lv_points;
    SaveUnitPlayer(lv_player);

    lv_unit = DataTableGetUnit(true, arena_gv_unitNamePrefix + lv_name);
    if (lv_unit == null) {
        return true;
    }

    lv_rewardText = TextTagCreate(StringToText("+"+IntToString(lv_player.points)), 24, UnitGetPosition(lv_unit), 3.0, true, false, PlayerGroupAll());
    TextTagSetColor(lv_rewardText, c_textTagColorText, Color(0, 255, 0));
    TextTagAttachToUnit(lv_rewardText, lv_unit, 3.0);
    TextTagSetGravity(lv_rewardText, 2.0);
    lv_rewardTimer = TimerCreate();
    TimerStart(lv_rewardTimer, 2.0, false, c_timeReal);
    libNtve_gf_WaitForTimer(lv_rewardTimer, 0.0, false);
    TextTagDestroy(lv_rewardText);

    return true;
}

static void gameplay_RechargePoints_Init() {
    gt_gameplay_RechargePoints = TriggerCreate("gameplay_RechargePoints_Func");
    TriggerAddEventGeneric(gt_gameplay_RechargePoints, (arena_gv_commandPrefix + "recharge-points"));
}