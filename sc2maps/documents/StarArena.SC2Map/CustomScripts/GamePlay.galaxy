// Trigger Declarations
static trigger gt_gameplay_init;
static trigger gt_gameplay_Victory;
static trigger gt_gameplay_DestroyCenters;
static trigger gt_gameplay_EndGame;
static trigger gt_gameplay_AddUnitPlayer;
static trigger gt_gameplay_RemoveUnitPlayer;
static trigger gt_gameplay_ShowUnitPlayerPoints;
static trigger gt_gameplay_DamageUnit;
static trigger gt_gameplay_KillUnit;
static trigger gt_gameplay_RechargePoints;
static trigger gt_gameplay_AutoRewardLoop;
static trigger gt_gameplay_UnitSelected;

// Variable Declarations
static int gv_gameplay_winnerPlayer;
static timer gv_gameplay_loopTimer;

// Function Declarations
void InitGamePlay();

static void gameplay_initMap_Init();
static void gameplay_Victory_Init();
static void gameplay_DestroyCenters_Init();
static void gameplay_EndGame_Init();
static void gameplay_AddUnitPlayer_Init();
static void gameplay_RemoveUnitPlayer_Init();
static void gameplay_ShowUnitPlayerPoints();
static void gameplay_DamageUnit_Init();
static void gameplay_KillUnit_Init();
static void gameplay_RechargePoints_Init();
static void gameplay_AutoRewardLoop_Init();
static void gameplay_UnitSelected_Init();

// Functions
void InitGamePlay() {
    gv_gameplay_loopTimer = TimerCreate();
    TimerStart(gv_gameplay_loopTimer, 1.0, true, c_timeReal);

    gameplay_initMap_Init();
    gameplay_Victory_Init();
    gameplay_DestroyCenters_Init();
    gameplay_EndGame_Init();
    gameplay_AddUnitPlayer_Init();
    gameplay_RemoveUnitPlayer_Init();
    gameplay_ShowUnitPlayerPoints();
    gameplay_DamageUnit_Init();
    gameplay_KillUnit_Init();
    gameplay_RechargePoints_Init();
    gameplay_AutoRewardLoop_Init();
    gameplay_UnitSelected_Init();
}

bool gameplay_initMap_Func(bool testConds, bool runActions) {
    unitgroup unitGroup1;
    int unitGroup1Count;
    unit unitGroup1Unit;
    unitgroup unitGroup2;
    int unitGroup2Count;
    unit unitGroup2Unit;
    unitgroup unitGroup3;
    int unitGroup3Count;
    unit unitGroup3Unit;
    unitgroup unitGroup4;
    int unitGroup4Count;
    unit unitGroup4Unit;
    unitgroup unitGroup5;
    int unitGroup5Count;
    unit unitGroup5Unit;
    unitgroup unitGroup6;
    int unitGroup6Count;
    unit unitGroup6Unit;
    

    if (!runActions) {
        return true;
    }

    arena_gv_directorPlayer = 1;
    arena_gv_audiencePlayer = 2;
    arena_gf_InitbaseMap(CameraInfoFromId(2107835186));
    unitGroup1 = UnitGroupFromId(1);
    unitGroup1Count = UnitGroupCount(unitGroup1, c_unitCountAll);
    for (;; unitGroup1Count -= 1) {
        unitGroup1Unit = UnitGroupUnitFromEnd(unitGroup1, unitGroup1Count);
        if (unitGroup1Unit == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(unitGroup1Unit, true);
    }
    unitGroup2 = UnitGroupFromId(2);
    unitGroup2Count = UnitGroupCount(unitGroup2, c_unitCountAll);
    for (;; unitGroup2Count -= 1) {
        unitGroup2Unit = UnitGroupUnitFromEnd(unitGroup2, unitGroup2Count);
        if (unitGroup2Unit == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(unitGroup2Unit, true);
        UnitSetScale(unitGroup2Unit, 200.0, 200.0, 200.0);
        UnitBehaviorAdd(unitGroup2Unit, "StarArenaUnitEnhance", unitGroup2Unit, 99);
    }
    unitGroup3 = UnitGroupFromId(3);
    unitGroup3Count = UnitGroupCount(unitGroup3, c_unitCountAll);
    for (;; unitGroup3Count -= 1) {
        unitGroup3Unit = UnitGroupUnitFromEnd(unitGroup3, unitGroup3Count);
        if (unitGroup3Unit == null) { break; }
        if ((UnitGetType(unitGroup3Unit) == "AutoTurret")) {
            UnitBehaviorAdd(unitGroup3Unit, "StarArenaUnitEnhance", unitGroup2Unit, 10);
        }
        UnitDataInitUnitProps(unitGroup3Unit);
    }
    unitGroup4 = UnitGroupFromId(4);
    unitGroup4Count = UnitGroupCount(unitGroup4, c_unitCountAll);
    for (;; unitGroup4Count -= 1) {
        unitGroup4Unit = UnitGroupUnitFromEnd(unitGroup4, unitGroup4Count);
        if (unitGroup4Unit == null) { break; }
        if ((UnitGetType(unitGroup4Unit) == "AutoTurret")) {
            UnitBehaviorAdd(unitGroup4Unit, "StarArenaUnitEnhance", unitGroup2Unit, 10);
        }
        UnitDataInitUnitProps(unitGroup4Unit);
    }
    unitGroup5 = UnitGroupFromId(5);
    unitGroup5Count = UnitGroupCount(unitGroup5, c_unitCountAll);
    for (;; unitGroup5Count -= 1) {
        unitGroup5Unit = UnitGroupUnitFromEnd(unitGroup5, unitGroup5Count);
        if (unitGroup5Unit == null) { break; }
        UnitDataInitUnitProps(unitGroup5Unit);
    }
    unitGroup6 = UnitGroupFromId(6);
    unitGroup6Count = UnitGroupCount(unitGroup6, c_unitCountAll);
    for (;; unitGroup6Count -= 1) {
        unitGroup6Unit = UnitGroupUnitFromEnd(unitGroup6, unitGroup6Count);
        if (unitGroup6Unit == null) { break; }
        UnitDataInitUnitProps(unitGroup6Unit);
    }
    TechTreeRequirementsEnable(1, false);
    TechTreeRequirementsEnable(2, false);
    TechTreeRequirementsEnable(3, false);
    TechTreeRequirementsEnable(4, false);

    CameraLockInput(arena_gv_audiencePlayer, true);
    return true;
}

static void gameplay_initMap_Init() {
    gt_gameplay_init = TriggerCreate("gameplay_initMap_Func");
    TriggerAddEventMapInit(gt_gameplay_init);
}

bool gameplay_Victory_Func(bool testConds, bool runActions) {
    text lv_winText;
    timer scoreTimer;
    UnitPlayerArray rankedUnitPlayers;
    int index;
    int lv_rankLength;
    string lv_playerName;

    if (gv_gameplay_winnerPlayer == 3 || gv_gameplay_winnerPlayer == 4) {
        return false;
    }

    if (!UnitGroupHasUnit(UnitGroupFromId(5), EventUnit()) && !UnitGroupHasUnit(UnitGroupFromId(6), EventUnit())) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    if (UnitGroupCount(UnitGroupFromId(5), c_unitCountAlive) == 0) {
        gv_gameplay_winnerPlayer = 4;
        lv_winText = StringExternal("Param/Value/1CF2F4A4");
    }
    else if (UnitGroupCount(UnitGroupFromId(6), c_unitCountAlive) == 0) {
        gv_gameplay_winnerPlayer = 3;
        lv_winText = StringExternal("Param/Value/6A0F2AB2");
    }
    if (lv_winText != null) {
        DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorCenter, 70, 0, lv_winText, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_gameplay_winnerPlayer, false)), false, 2.0);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);

        arena_gf_ShowMessage("排行榜:");
        UnitPlayersOfRanked(rankedUnitPlayers);
        scoreTimer = TimerCreate();
        lv_rankLength = UnitPlayersCount();
        if (lv_rankLength > 10) {
            lv_rankLength = 10;
        }
        for (index = lv_rankLength-1; index >= 0; index -= 1) {
            TimerStart(scoreTimer, 1.0, false, c_timeReal);
            libNtve_gf_WaitForTimer(scoreTimer, 0.0, false);
            lv_playerName = rankedUnitPlayers[index].name;
            if (rankedUnitPlayers[index].isBot) {
                lv_playerName = "Bot";
            }
            arena_gf_ShowMessage("第" + IntToString(index+1) + "名：" + lv_playerName + " -------------------------------------- " + IntToString(rankedUnitPlayers[index].score) + "分");
        }

        arena_gf_ShowMessage("10秒后游戏结束");
        TimerStart(scoreTimer, 10.0, false, c_timeReal);
        libNtve_gf_WaitForTimer(scoreTimer, 0.0, false);
        TriggerExecute(gt_gameplay_EndGame, true, false);
    }

    return true;
}

static void gameplay_Victory_Init() {
    gt_gameplay_Victory = TriggerCreate("gameplay_Victory_Func");
    TriggerAddEventUnitDied(gt_gameplay_Victory, null);
}

bool gameplay_DestroyCenters_Func(bool testConds, bool runActions) {
    string lv_side;
    unitgroup unitGroup5;
    int unitGroup5Count;
    unit unitGroup5Unit;
    unitgroup unitGroup6;
    int unitGroup6Count;
    unit unitGroup6Unit;

    lv_side = arena_gf_CurrentCommandArgument(1);

    if (!runActions) {
        return true;
    }

    if (lv_side == "left") {
        unitGroup5 = UnitGroupFromId(5);
        unitGroup5Count = UnitGroupCount(unitGroup5, c_unitCountAll);
        for (;; unitGroup5Count -= 1) {
            unitGroup5Unit = UnitGroupUnitFromEnd(unitGroup5, unitGroup5Count);
            if (unitGroup5Unit == null) { break; }
            UnitKill(unitGroup5Unit);
        }

    }
    else if (lv_side == "right") {
        unitGroup6 = UnitGroupFromId(6);
        unitGroup6Count = UnitGroupCount(unitGroup6, c_unitCountAll);
        for (;; unitGroup6Count -= 1) {
            unitGroup6Unit = UnitGroupUnitFromEnd(unitGroup6, unitGroup6Count);
            if (unitGroup6Unit == null) { break; }
            UnitKill(unitGroup6Unit);
        }

    }
    else {

    }
    return true;
}

static void gameplay_DestroyCenters_Init() {
    gt_gameplay_DestroyCenters = TriggerCreate("gameplay_DestroyCenters_Func");
    TriggerAddEventGeneric(gt_gameplay_DestroyCenters, (arena_gv_commandPrefix + "destroy-centers"));
}

bool gameplay_EndGame_Func(bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }

    GameOver(arena_gv_audiencePlayer, c_gameOverVictory, false, false);
    GameOver(arena_gv_directorPlayer, c_gameOverVictory, false, false);
    return true;
}

static void gameplay_EndGame_Init() {
    gt_gameplay_EndGame = TriggerCreate("gameplay_EndGame_Func");
    TriggerAddEventGeneric(gt_gameplay_EndGame, (arena_gv_commandPrefix + "end-game"));
}

bool gameplay_AddUnitPlayer_Func(bool testConds, bool runActions) {
    string lv_name;
    int lv_playerId;
    bool lv_isBot = false;
    UnitPlayer lv_player;
    string lv_teamName;

    lv_name = arena_gf_CurrentCommandArgument(1);
    lv_playerId = StringToInt(arena_gf_CurrentCommandArgument(2));
    if (!arena_gf_StringIsEmpty(arena_gf_CurrentCommandArgument(3))) {
        lv_isBot = true;
    }

    if (!runActions) {
        return true;
    }
    
    if (UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    lv_player.name = lv_name;
    lv_player.playerId = lv_playerId;
    lv_player.isBot = lv_isBot;
    if (!AddUnitPlayer(lv_player)) {
        return false;
    }

    if (!lv_player.isBot) {
        if (lv_player.playerId == 3) {
            lv_teamName = "蓝方";
        } else if (lv_player.playerId == 4) {
            lv_teamName = "红方";
        }
        arena_gf_ShowMessage(lv_player.name + " 加入了 " + lv_teamName + " 队伍");
    }

    return true;
}

static void gameplay_AddUnitPlayer_Init() {
    gt_gameplay_AddUnitPlayer = TriggerCreate("gameplay_AddUnitPlayer_Func");
    TriggerAddEventGeneric(gt_gameplay_AddUnitPlayer, (arena_gv_commandPrefix + "add-player"));
}

bool gameplay_RemoveUnitPlayer_Func(bool testConds, bool runActions) {
    string lv_name;
    UnitPlayer lv_player;
    unit lv_unit;

    lv_name = arena_gf_CurrentCommandArgument(1);

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }
    lv_unit = arena_gf_UnitFromName(lv_name);
    if (UnitIsValid(lv_unit)) {
        UnitKill(lv_unit);
    }

    RemoveUnitPlayer(lv_name);

    return true;
}

static void gameplay_RemoveUnitPlayer_Init() {
    gt_gameplay_RemoveUnitPlayer = TriggerCreate("gameplay_RemoveUnitPlayer_Func");
    TriggerAddEventGeneric(gt_gameplay_RemoveUnitPlayer, (arena_gv_commandPrefix + "remove-player"));
}

bool gameplay_ShowUnitPlayerPoints_Func(bool testConds, bool runActions) {
    string lv_name;
    UnitPlayer lv_player;

    lv_name = arena_gf_CurrentCommandArgument(1);

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    arena_gf_ShowMessage(lv_player.name + " 拥有点数 " + IntToString(lv_player.points) + "pt");

    return true;
}

static void gameplay_ShowUnitPlayerPoints() {
    gt_gameplay_ShowUnitPlayerPoints = TriggerCreate("gameplay_ShowUnitPlayerPoints_Func");
    TriggerAddEventGeneric(gt_gameplay_ShowUnitPlayerPoints, (arena_gv_commandPrefix + "show-points"));
}

bool gameplay_DamageUnit_Func(bool testConds, bool runActions) {
    string lv_attacker;
    int lv_damage;
    UnitPlayer lv_player;
    unit lv_attackerUnit = EventUnitDamageSourceUnit();

    lv_attacker = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_attackerUnit))));
    lv_damage = FixedToInt(EventUnitDamageAmount());

    if (arena_gf_StringIsEmpty(lv_attacker)) {
        lv_attacker = ServantGetMaster(lv_attackerUnit);
        if (arena_gf_StringIsEmpty(lv_attacker)) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_attacker, lv_player)) {
        return false;
    }

    lv_player.score += lv_damage;
    SaveUnitPlayer(lv_player);

    return true;
}

static void gameplay_DamageUnit_Init() {
    gt_gameplay_DamageUnit = TriggerCreate("gameplay_DamageUnit_Func");
    TriggerAddEventUnitDamaged(gt_gameplay_DamageUnit, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

bool gameplay_KillUnit_Func(bool testConds, bool runActions) {
    unit lv_attackerUnit;
    string lv_attacker;
    unit lv_targetUnit;
    string lv_target;
    string lv_unitType;
    UnitPlayer lv_player;
    int lv_rewardText;
    timer lv_rewardTimer;
    UnitData lv_unitData;
    string lv_killMsg;

    lv_attackerUnit = EventUnitDamageSourceUnit();
    lv_attacker = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_attackerUnit))));
    lv_targetUnit = EventUnit();
    lv_target = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_targetUnit))));
    lv_unitType = UnitGetType(lv_targetUnit);

    if (arena_gf_StringIsEmpty(lv_attacker)) {
        lv_attacker = ServantGetMaster(lv_attackerUnit);
    }

    if (!runActions) {
        return true;
    }

    if (!arena_gf_StringIsEmpty(lv_target) && UnitPlayerFromName(lv_target, lv_player) && !lv_player.isBot) {
        lv_killMsg = lv_target + " 被";
        if (!arena_gf_StringIsEmpty(lv_attacker) && UnitPlayerFromName(lv_attacker, lv_player) && !lv_player.isBot) {
            lv_killMsg += " " + lv_attacker + " ";
        }
        lv_killMsg += "击杀";
        arena_gf_ShowMessage(lv_killMsg);
    }

    ServantCleanUnit(lv_targetUnit);
    arena_gf_CleanPlayerUnit(lv_targetUnit);

    if (arena_gf_StringIsEmpty(lv_attacker) || UnitGetOwner(lv_attackerUnit) == UnitGetOwner(lv_targetUnit)) {
        return false;
    }

    if (!UnitPlayerFromName(lv_attacker, lv_player)) {
        return false;
    }
    if (!UnitDataGetByUnitType(lv_unitType, lv_unitData)) {
        return false;
    }

    lv_player.points += lv_unitData.rewardPoints;
    SaveUnitPlayer(lv_player);

    if (!lv_player.isBot) {
        lv_attackerUnit = DataTableGetUnit(true, arena_gv_unitNamePrefix + lv_attacker);
        if (UnitIsValid(lv_attackerUnit)) {
            lv_rewardText = TextTagCreate(StringToText("+"+IntToString(lv_unitData.rewardPoints)), 24, UnitGetPosition(lv_attackerUnit), 3.0, true, false, PlayerGroupAll());
            TextTagSetColor(lv_rewardText, c_textTagColorText, Color(0, 255, 0));
            TextTagAttachToUnit(lv_rewardText, lv_attackerUnit, 3.0);
            TextTagSetGravity(lv_rewardText, 2.0);
            lv_rewardTimer = TimerCreate();
            TimerStart(lv_rewardTimer, 2.0, false, c_timeReal);
            libNtve_gf_WaitForTimer(lv_rewardTimer, 0.0, false);
            TextTagDestroy(lv_rewardText);
        }
    }

    return true;
}

static void gameplay_KillUnit_Init() {
    gt_gameplay_KillUnit = TriggerCreate("gameplay_KillUnit_Func");
    TriggerAddEventUnitDied(gt_gameplay_KillUnit, null);
}

bool gameplay_RechargePoints_Func(bool testConds, bool runActions) {
    string lv_name;
    int lv_points;
    UnitPlayer lv_player;

    lv_name = arena_gf_CurrentCommandArgument(1);
    lv_points = StringToInt(arena_gf_CurrentCommandArgument(2));

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    if (lv_points <= 0) {
        return false;
    }

    lv_player.points += lv_points;
    SaveUnitPlayer(lv_player);

    arena_gf_ShowMessage(lv_player.name + " 充值了 " + IntToString(lv_points) + "pt，总计 " + IntToString(lv_player.points) + "pt");

    return true;
}

static void gameplay_RechargePoints_Init() {
    gt_gameplay_RechargePoints = TriggerCreate("gameplay_RechargePoints_Func");
    TriggerAddEventGeneric(gt_gameplay_RechargePoints, (arena_gv_commandPrefix + "recharge-points"));
}

bool gameplay_AutoRewardLoop_Func(bool testConds, bool runActions) {
    UnitPlayerArray players;
    int lv_index;

    if (!runActions) {
        return true;
    }

    UnitPlayersGetAll(players);
    for (lv_index = 0; lv_index < UnitPlayersCount(); lv_index += 1) {
        UnitPlayerAutoRewardPoints(players[lv_index]);
    }

    return true;
}

static void gameplay_AutoRewardLoop_Init() {
    gt_gameplay_AutoRewardLoop = TriggerCreate("gameplay_AutoRewardLoop_Func");
    TriggerAddEventTimer(gt_gameplay_AutoRewardLoop, gv_gameplay_loopTimer);
}

bool gameplay_UnitSelected_Func(bool testConds, bool runActions) {
    unit lv_unit = EventUnit();
    string lv_name = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_unit))));
    UnitPlayer lv_player;
    order lv_order;
    string lv_huntTarget;
    unit lv_huntTargetUnit;

    if (!runActions) {
        return true;
    }

    if (arena_gf_StringIsEmpty(lv_name) || !UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }
    arena_gf_InfoLog(lv_name + " aiMode: " + IntToString(lv_player.aiMode));
    arena_gf_InfoLog(lv_name + " TotalTakenDamage: " + IntToString(lv_player.aiStates[0]));
    arena_gf_InfoLog(lv_name + " WillBrokenTime: " + IntToString(lv_player.aiStates[1]));
    arena_gf_InfoLog(lv_name + " OriginAIMode: " + IntToString(lv_player.aiStates[2]));
    arena_gf_InfoLog(lv_name + " ModeEntered: " + IntToString(lv_player.aiStates[3]));
    arena_gf_InfoLog(lv_name + " HuntTarget: " + IntToString(lv_player.aiStates[4]));
    lv_huntTarget = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(lv_player.aiStates[4])));
    if (!arena_gf_StringIsEmpty(lv_huntTarget)) {
        arena_gf_InfoLog(lv_name + " HuntTarget: " + lv_huntTarget);
        lv_huntTargetUnit = DataTableGetUnit(true, arena_gv_unitNamePrefix + lv_huntTarget);
        if (UnitIsValid(lv_huntTargetUnit)) {
            arena_gf_InfoLog(lv_name + " HuntTarget unit: " + UnitGetType(lv_huntTargetUnit) + ", " + IntToString(UnitGetTag(lv_huntTargetUnit)));
        }
    }
    lv_order = UnitOrder(lv_unit, 0);
    if (lv_order != null) {
        arena_gf_InfoLog(lv_name + " order ability: " + AbilityCommandGetAbility(OrderGetAbilityCommand(lv_order)));
        if (OrderGetTargetType(lv_order) == c_orderTargetUnit) {
            arena_gf_InfoLog(lv_name + " order target unit: " + UnitGetType(OrderGetTargetUnit(lv_order)) + ", " + IntToString(UnitGetTag(OrderGetTargetUnit(lv_order))));
        }
    }
    
    return true;
}

static void gameplay_UnitSelected_Init() {
    gt_gameplay_UnitSelected = TriggerCreate("gameplay_UnitSelected_Func");
    TriggerAddEventUnitSelected(gt_gameplay_UnitSelected, null, c_playerAny, true);
}