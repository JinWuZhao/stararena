// Trigger Declarations
static trigger gt_gameplay_init;
static trigger gt_gameplay_Victory;
static trigger gt_gameplay_DestroyCenters;
static trigger gt_gameplay_EndGame;
static trigger gt_gameplay_AddUnitPlayer;
static trigger gt_gameplay_RemoveUnitPlayer;
static trigger gt_gameplay_ShowUnitPlayerPoints;
static trigger gt_gameplay_KillUnit;
static trigger gt_gameplay_DamageUnit;
static trigger gt_gameplay_RechargePoints;
static trigger gt_gameplay_UnitSelected;
static trigger gt_gameplay_TimerLoop;
static trigger gt_gameplay_GiftChange;
static trigger gt_gameplay_ApplyGift;

// Variable Declarations
static int gv_gameplay_winnerPlayer;
static timer gv_gameplay_loopTimer;
static timer gv_gameplay_giftTimer;
static GiftItem gv_gameplay_basicGift;
static GiftItem gv_gameplay_advancedGift;
static int[c_unitPlayersCap] gv_gameplay_playerInfoItmes;
static int gv_gameplay_RankBoard;
static int gv_gameplay_RankBoardTitle;
static int gv_gameplay_RankBoardList;
static int gv_gameplay_BasicGiftMsg;
static int gv_gameplay_AdvancedGiftMsg;

static const int c_gameplay_UnitRedCenter = 1585478384;
static const int c_gameplay_UnitBlueCenter = 177235035;

// Function Declarations
void InitGamePlay();

static void gameplay_initMap_Init();
static void gameplay_Victory_Init();
static void gameplay_DestroyCenters_Init();
static void gameplay_EndGame_Init();
static void gameplay_AddUnitPlayer_Init();
static void gameplay_RemoveUnitPlayer_Init();
static void gameplay_ShowUnitPlayerPoints();
static void gameplay_KillUnit_Init();
static void gameplay_DamageUnit_Init();
static void gameplay_RechargePoints_Init();
static void gameplay_UnitSelected_Init();
static void gameplay_TimerLoop_Init();
static void gameplay_GiftChange_Init();
static void gameplay_ApplyGift_Init();

// Functions
void InitGamePlay() {
    int lv_index;

    gv_gameplay_loopTimer = TimerCreate();
    TimerStart(gv_gameplay_loopTimer, 1.0, true, c_timeReal);
    gv_gameplay_giftTimer = TimerCreate();
    TimerStart(gv_gameplay_giftTimer, 30.0, true, c_timeReal);

    for (lv_index = 0; lv_index < c_unitPlayersCap; lv_index += 1) {
        gv_gameplay_playerInfoItmes[lv_index] = DialogControlHookupStandard(
            c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/Players/" + IntToString(lv_index) + "/content");
    }
    gv_gameplay_RankBoard = DialogControlHookupStandard(
        c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/RankBoard");
    gv_gameplay_RankBoardTitle = DialogControlHookupStandard(
        c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/RankBoard/Title");
    gv_gameplay_RankBoardList = DialogControlHookupStandard(
        c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/RankBoard/List");
    DialogControlSetVisible(gv_gameplay_RankBoard, PlayerGroupAll(), false);
    gv_gameplay_BasicGiftMsg = DialogControlHookupStandard(
        c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/GiftBoard/BasicGifts");
    gv_gameplay_AdvancedGiftMsg = DialogControlHookupStandard(
        c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/GiftBoard/AdvancedGifts");

    gameplay_initMap_Init();
    gameplay_Victory_Init();
    gameplay_DestroyCenters_Init();
    gameplay_EndGame_Init();
    gameplay_AddUnitPlayer_Init();
    gameplay_RemoveUnitPlayer_Init();
    gameplay_ShowUnitPlayerPoints();
    gameplay_KillUnit_Init();
    gameplay_DamageUnit_Init();
    gameplay_RechargePoints_Init();
    gameplay_UnitSelected_Init();
    gameplay_TimerLoop_Init();
    gameplay_GiftChange_Init();
    gameplay_ApplyGift_Init();
}

bool gameplay_initMap_Func(bool testConds, bool runActions) {
    unitgroup lv_sepWalls = UnitGroupFromId(1);
    unitgroup lv_structures = UnitGroupFromId(3);
    int lv_index;
    unit lv_unit;

    if (!runActions) {
        return true;
    }

    arena_gv_directorPlayer = 1;
    arena_gv_audiencePlayer = 2;
    arena_gf_InitbaseMap(CameraInfoFromId(2107835186));

    for (lv_index = UnitGroupCount(lv_sepWalls, c_unitCountAll); lv_index > 0; lv_index -= 1) {
        lv_unit = UnitGroupUnitFromEnd(lv_sepWalls, lv_index);
        if (UnitIsAlive(lv_unit)) {
            libNtve_gf_MakeUnitInvulnerable(lv_unit, true);
            UnitSetScale(lv_unit, 100, 100, 200);
        }
    }

    lv_unit = UnitFromId(c_gameplay_UnitRedCenter);
    UnitSetFacing(lv_unit, 0, 0);
    lv_unit = UnitFromId(c_gameplay_UnitBlueCenter);
    UnitSetFacing(lv_unit, 180, 0);

    for (lv_index = UnitGroupCount(lv_structures, c_unitCountAll); lv_index > 0; lv_index -= 1) {
        lv_unit = UnitGroupUnitFromEnd(lv_structures, lv_index);
        if (UnitIsAlive(lv_unit)) {
            UnitDataInitUnitProps(lv_unit);
        }
    }

    TechTreeRequirementsEnable(1, false);
    TechTreeRequirementsEnable(2, false);
    TechTreeRequirementsEnable(3, false);
    TechTreeRequirementsEnable(4, false);

    CameraLockInput(arena_gv_audiencePlayer, true);
    return true;
}

static void gameplay_initMap_Init() {
    gt_gameplay_init = TriggerCreate("gameplay_initMap_Func");
    TriggerAddEventMapInit(gt_gameplay_init);
}

bool gameplay_Victory_Func(bool testConds, bool runActions) {
    unit lv_unit = EventUnit();
    text lv_winText;
    timer endTimer;
    UnitPlayerArray rankedUnitPlayers;
    int index;
    int lv_rankLength;
    string lv_playerName;
    string lv_rankList = "";

    if (!runActions) {
        return true;
    }

    if (gv_gameplay_winnerPlayer == c_GameStatePlayerIdBlue || gv_gameplay_winnerPlayer == c_GameStatePlayerIdRed) {
        return false;
    }

    if (!UnitGroupHasUnit(UnitGroupFromId(2), lv_unit)) {
        return false;
    }

    if (UnitGetOwner(lv_unit) == c_GameStatePlayerIdBlue) {
        gv_gameplay_winnerPlayer = 4;
        lv_winText = StringExternal("Param/Value/1CF2F4A4");
    }
    else {
        gv_gameplay_winnerPlayer = 3;
        lv_winText = StringExternal("Param/Value/6A0F2AB2");
    }
    if (lv_winText != null) {
        DialogControlSetVisible(gv_gameplay_RankBoard, PlayerGroupAll(), true);

        DialogControlSetPropertyAsText(gv_gameplay_RankBoardTitle, 
            c_triggerControlPropertyText, PlayerGroupAll(), lv_winText);

        UnitPlayersOfRanked(rankedUnitPlayers);
        lv_rankLength = UnitPlayersCount();
        for (index = 0; index < lv_rankLength; index += 1) {
            lv_playerName = rankedUnitPlayers[index].name;
            if (rankedUnitPlayers[index].isBot) {
                lv_playerName = "Bot";
            }
            lv_rankList += "第" + IntToString(index+1) + "名：" + lv_playerName + " -------------- " + IntToString(rankedUnitPlayers[index].score) + "击杀\n";
        }
        DialogControlSetPropertyAsText(gv_gameplay_RankBoardList, 
            c_triggerControlPropertyText, PlayerGroupAll(), StringToText(lv_rankList));

        arena_gf_ShowMessage("10秒后游戏结束");
        endTimer = TimerCreate();
        TimerStart(endTimer, 10.0, false, c_timeReal);
        libNtve_gf_WaitForTimer(endTimer, 0.0, false);
        TriggerExecute(gt_gameplay_EndGame, true, false);
    }

    return true;
}

static void gameplay_Victory_Init() {
    gt_gameplay_Victory = TriggerCreate("gameplay_Victory_Func");
    TriggerAddEventUnitDied(gt_gameplay_Victory, null);
}

bool gameplay_DestroyCenters_Func(bool testConds, bool runActions) {
    string lv_side;

    lv_side = arena_gf_CurrentCommandArgument(1);

    if (!runActions) {
        return true;
    }

    if (lv_side == "red") {
        UnitKill(UnitFromId(c_gameplay_UnitRedCenter));
    }
    else if (lv_side == "blue") {
        UnitKill(UnitFromId(c_gameplay_UnitBlueCenter));
    }
    return true;
}

static void gameplay_DestroyCenters_Init() {
    gt_gameplay_DestroyCenters = TriggerCreate("gameplay_DestroyCenters_Func");
    TriggerAddEventGeneric(gt_gameplay_DestroyCenters, (arena_gv_commandPrefix + "destroy-centers"));
}

bool gameplay_EndGame_Func(bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }

    GameOver(arena_gv_audiencePlayer, c_gameOverVictory, false, false);
    GameOver(arena_gv_directorPlayer, c_gameOverVictory, false, false);
    return true;
}

static void gameplay_EndGame_Init() {
    gt_gameplay_EndGame = TriggerCreate("gameplay_EndGame_Func");
    TriggerAddEventGeneric(gt_gameplay_EndGame, (arena_gv_commandPrefix + "end-game"));
}

bool gameplay_AddUnitPlayer_Func(bool testConds, bool runActions) {
    string lv_name;
    int lv_playerId;
    bool lv_isBot = false;
    UnitPlayer lv_player;
    string lv_teamName;
    int lv_index;

    lv_name = arena_gf_CurrentCommandArgument(1);
    lv_playerId = StringToInt(arena_gf_CurrentCommandArgument(2));
    if (!arena_gf_StringIsEmpty(arena_gf_CurrentCommandArgument(3))) {
        lv_isBot = true;
    }

    if (!runActions) {
        return true;
    }
    
    if (UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    lv_player.name = lv_name;
    lv_player.playerId = lv_playerId;
    lv_player.isBot = lv_isBot;
    if (lv_isBot) {
        lv_index = RandomInt(0, c_WeaponDataTypeCount-1);
        lv_player.points = 1;
    } else {
        lv_index = c_WeaponDataType90mmCannons;
        lv_player.points = 2;
    }
    lv_player.weaponType = WeaponDataGetType(lv_index);
    lv_player.deadTime = IntToDateTime(0);
    lv_player.unitType = "SiegeTank";
    lv_player.level = 1;
    lv_player.revivePoint = RandomInt(1, 4);
    lv_player.props[c_unitPlayerPropsMaxLife] = 0;
    lv_player.props[c_unitPlayerPropsDamageMultiplier] = 0;
    lv_player.props[c_unitPlayerPropsRangeMultiplier] = 0;
    lv_player.props[c_unitPlayerPropsMoveSpeed] = 0;
    lv_player.props[c_unitPlayerPropsAttackSpeed] = 0;
    if (!AddUnitPlayer(lv_player)) {
        return false;
    }

    if (!lv_player.isBot) {
        if (lv_player.playerId == c_GameStatePlayerIdBlue) {
            lv_teamName = "蓝方";
        } else if (lv_player.playerId == c_GameStatePlayerIdRed) {
            lv_teamName = "红方";
        }
        arena_gf_ShowMessage(lv_player.name + " 加入了 " + lv_teamName + " 队伍，初始武器 " + WeaponDataGetName(lv_index) + "(" + IntToString(lv_index) + ")");
    }

    return true;
}

static void gameplay_AddUnitPlayer_Init() {
    gt_gameplay_AddUnitPlayer = TriggerCreate("gameplay_AddUnitPlayer_Func");
    TriggerAddEventGeneric(gt_gameplay_AddUnitPlayer, (arena_gv_commandPrefix + "add-player"));
}

bool gameplay_RemoveUnitPlayer_Func(bool testConds, bool runActions) {
    string lv_name;
    UnitPlayer lv_player;
    unit lv_unit;

    lv_name = arena_gf_CurrentCommandArgument(1);

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }
    lv_unit = arena_gf_UnitFromName(lv_name);
    if (UnitIsAlive(lv_unit)) {
        UnitKill(lv_unit);
    }

    RemoveUnitPlayer(lv_name);

    return true;
}

static void gameplay_RemoveUnitPlayer_Init() {
    gt_gameplay_RemoveUnitPlayer = TriggerCreate("gameplay_RemoveUnitPlayer_Func");
    TriggerAddEventGeneric(gt_gameplay_RemoveUnitPlayer, (arena_gv_commandPrefix + "remove-player"));
}

bool gameplay_ShowUnitPlayerPoints_Func(bool testConds, bool runActions) {
    string lv_name;
    UnitPlayer lv_player;

    lv_name = arena_gf_CurrentCommandArgument(1);

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    arena_gf_ShowMessage(lv_player.name + " 拥有点数 " + IntToString(lv_player.points) + "pt");

    return true;
}

static void gameplay_ShowUnitPlayerPoints() {
    gt_gameplay_ShowUnitPlayerPoints = TriggerCreate("gameplay_ShowUnitPlayerPoints_Func");
    TriggerAddEventGeneric(gt_gameplay_ShowUnitPlayerPoints, (arena_gv_commandPrefix + "show-points"));
}

bool gameplay_KillUnit_Func(bool testConds, bool runActions) {
    unit lv_attackerUnit;
    string lv_attacker;
    unit lv_targetUnit;
    string lv_target;
    string lv_unitType;
    UnitPlayer lv_attackerPlayer;
    UnitPlayer lv_targetPlayer;
    int lv_rewardPoints;
    UnitData lv_unitData;
    string lv_killMsg = "";
    int lv_index;
    UnitPlayer lv_player;

    lv_attackerUnit = EventUnitDamageSourceUnit();
    lv_attacker = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_attackerUnit))));
    lv_targetUnit = EventUnit();
    lv_target = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_targetUnit))));
    lv_unitType = UnitGetType(lv_targetUnit);

    if (arena_gf_StringIsEmpty(lv_attacker)) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    arena_gf_CleanPlayerUnit(lv_targetUnit);

    if (arena_gf_StringIsEmpty(lv_attacker) || UnitGetOwner(lv_attackerUnit) == UnitGetOwner(lv_targetUnit)) {
        return false;
    }

    if (!UnitPlayerFromName(lv_attacker, lv_attackerPlayer)) {
        return false;
    }
    if (!UnitDataGetByUnitType(lv_unitType, lv_unitData)) {
        return false;
    }

    if (!arena_gf_StringIsEmpty(lv_target) && UnitPlayerFromName(lv_target, lv_targetPlayer)) {
        lv_rewardPoints = lv_unitData.rewardExp * (lv_targetPlayer.combo + 1);
    } else {
        lv_rewardPoints = lv_unitData.rewardExp;
    }
    if (lv_attackerPlayer.level < c_UnitPlayerMaxLevel) {
        lv_attackerPlayer.exp += lv_rewardPoints;
    }
    lv_attackerPlayer.score += 1;
    lv_attackerPlayer.combo += 1;
    SaveUnitPlayer(lv_attackerPlayer);

    if (!arena_gf_StringIsEmpty(lv_targetPlayer.name)) {
        if (lv_attackerPlayer.isBot) {
            lv_killMsg += "Bot ";
        } else {
            lv_killMsg += lv_attacker + " ";
        }
        lv_killMsg += "击杀了 ";
        if (lv_targetPlayer.isBot) {
            lv_killMsg += "Bot";
        } else {
            lv_killMsg += lv_target;
        }
        if (!lv_attackerPlayer.isBot || !lv_targetPlayer.isBot) {
            arena_gf_ShowMessage(lv_killMsg);
    
            if (!lv_attackerPlayer.isBot && lv_attackerPlayer.combo > 2) {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringToText(lv_attacker + " 完成了 " + IntToString(lv_attackerPlayer.combo) + " 杀！"));
            }
        }
    }

    for (lv_index = 0; lv_index < c_unitPlayersCap; lv_index += 1) {
        if (UnitPlayerGet(lv_index, lv_player) && 
            lv_player.playerId == lv_attackerPlayer.playerId && 
            lv_player.level < c_UnitPlayerMaxLevel) {
            lv_player.exp += lv_rewardPoints / 2;
            SaveUnitPlayer(lv_player);
        }
    }

    return true;
}

static void gameplay_KillUnit_Init() {
    gt_gameplay_KillUnit = TriggerCreate("gameplay_KillUnit_Func");
    TriggerAddEventUnitDied(gt_gameplay_KillUnit, null);
}

bool gameplay_DamageUnit_Func(bool testConds, bool runActions) {
    unit lv_attackerUnit = EventUnitDamageSourceUnit();
    string lv_attacker = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_attackerUnit))));
    unit lv_targetUnit = EventUnit();
    int lv_damage = FixedToInt(EventUnitDamageAmount());
    UnitPlayer lv_attackerPlayer;
    UnitData lv_targetUnitData;

    if (!runActions) {
        return true;
    }

    if (arena_gf_StringIsEmpty(lv_attacker) || !UnitPlayerFromName(lv_attacker, lv_attackerPlayer)) {
        return false;
    }

    if (!UnitDataGetByUnitType(UnitGetType(lv_targetUnit), lv_targetUnitData)) {
        return false;
    }

    return true;
}

static void gameplay_DamageUnit_Init() {
    gt_gameplay_DamageUnit = TriggerCreate("gameplay_DamageUnit_Func");
    TriggerAddEventUnitDamaged(gt_gameplay_DamageUnit, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

bool gameplay_RechargePoints_Func(bool testConds, bool runActions) {
    string lv_name;
    int lv_points;
    UnitPlayer lv_player;

    lv_name = arena_gf_CurrentCommandArgument(1);
    lv_points = StringToInt(arena_gf_CurrentCommandArgument(2));

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    if (lv_points <= 0) {
        return false;
    }

    lv_player.points += lv_points;
    SaveUnitPlayer(lv_player);

    arena_gf_ShowMessage(lv_player.name + " 充值了 " + IntToString(lv_points) + " pts");

    return true;
}

static void gameplay_RechargePoints_Init() {
    gt_gameplay_RechargePoints = TriggerCreate("gameplay_RechargePoints_Func");
    TriggerAddEventGeneric(gt_gameplay_RechargePoints, (arena_gv_commandPrefix + "recharge-points"));
}

bool gameplay_UnitSelected_Func(bool testConds, bool runActions) {
    unit lv_unit = EventUnit();
    string lv_name = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_unit))));
    UnitPlayer lv_player;
    order lv_order;
    string lv_huntTarget;
    unit lv_huntTargetUnit;

    if (!runActions) {
        return true;
    }

    if (arena_gf_StringIsEmpty(lv_name) || !UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }
    // arena_gf_DebugLog(lv_name + " datetime: " + IntToString(DateTimeToInt(CurrentDateTimeGet())));
    arena_gf_DebugLog(lv_name + " weapon: " + lv_player.weaponType);
    arena_gf_DebugLog(lv_name + " level: " + IntToString(lv_player.level));
    arena_gf_DebugLog(lv_name + " exp: " + IntToString(lv_player.exp));
    arena_gf_DebugLog(lv_name + " points: " + IntToString(lv_player.points));
    arena_gf_DebugLog(lv_name + " score: " + IntToString(lv_player.score));
    arena_gf_DebugLog(lv_name + " combo: " + IntToString(lv_player.combo));
    arena_gf_DebugLog(lv_name + " aiMode: " + IntToString(lv_player.aiMode));
    // arena_gf_DebugLog(lv_name + " TotalTakenDamage: " + IntToString(lv_player.aiStates[0]));
    // arena_gf_DebugLog(lv_name + " WillBrokenTime: " + IntToString(lv_player.aiStates[1]));
    // arena_gf_DebugLog(lv_name + " OriginAIMode: " + IntToString(lv_player.aiStates[2]));
    // arena_gf_DebugLog(lv_name + " ModeEntered: " + IntToString(lv_player.aiStates[3]));
    // arena_gf_DebugLog(lv_name + " HuntTarget: " + IntToString(lv_player.aiStates[4]));
    // lv_huntTarget = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(lv_player.aiStates[4])));
    // if (!arena_gf_StringIsEmpty(lv_huntTarget)) {
    //     arena_gf_DebugLog(lv_name + " HuntTarget: " + lv_huntTarget);
    //     lv_huntTargetUnit = DataTableGetUnit(true, arena_gv_unitNamePrefix + lv_huntTarget);
    //     if (UnitIsAlive(lv_huntTargetUnit)) {
    //         arena_gf_DebugLog(lv_name + " HuntTarget unit: " + UnitGetType(lv_huntTargetUnit) + ", " + IntToString(UnitGetTag(lv_huntTargetUnit)));
    //     }
    // }
    // lv_order = UnitOrder(lv_unit, 0);
    // if (lv_order != null) {
    //     arena_gf_DebugLog(lv_name + " order ability: " + AbilityCommandGetAbility(OrderGetAbilityCommand(lv_order)));
    //     if (OrderGetTargetType(lv_order) == c_orderTargetUnit) {
    //         arena_gf_DebugLog(lv_name + " order target unit: " + UnitGetType(OrderGetTargetUnit(lv_order)) + ", " + IntToString(UnitGetTag(OrderGetTargetUnit(lv_order))));
    //     }
    // }
    
    return true;
}

static void gameplay_UnitSelected_Init() {
    gt_gameplay_UnitSelected = TriggerCreate("gameplay_UnitSelected_Func");
    TriggerAddEventUnitSelected(gt_gameplay_UnitSelected, null, c_playerAny, true);
}

bool gameplay_TimerLoop_Func(bool testConds, bool runActions) {
    int lv_index;
    UnitPlayer lv_player;

    if (!runActions) {
        return true;
    }

    for (lv_index = 0; lv_index < c_unitPlayersCap; lv_index += 1) {
        if (UnitPlayerGet(lv_index, lv_player)) {
            if (lv_player.isBot) {
                lv_player.name = "Bot";
            }
            DialogControlSetPropertyAsText(gv_gameplay_playerInfoItmes[lv_index], 
                c_triggerControlPropertyText, PlayerGroupAll(), 
                StringToText(lv_player.name + "\nlv." + IntToString(lv_player.level) + "\n" + IntToString(lv_player.points) + " pts"));
        }
    }

    return true;
}

static void gameplay_TimerLoop_Init() {
    gt_gameplay_TimerLoop = TriggerCreate("gameplay_TimerLoop_Func");
    TriggerAddEventTimer(gt_gameplay_TimerLoop, gv_gameplay_loopTimer);
}

bool gameplay_GiftChange_Func(bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }
    if (GiftItemGet(c_GiftKindBasic, RandomInt(0, c_GiftKindBasicCount-1), gv_gameplay_basicGift)) {
        DialogControlSetPropertyAsText(gv_gameplay_BasicGiftMsg, c_triggerControlPropertyText, PlayerGroupAll(), 
            StringToText("初级商品：" + gv_gameplay_basicGift.name + FixedToString(gv_gameplay_basicGift.duration, 0) + "s"));
    }
    if (GiftItemGet(c_GiftKindAdvanced, RandomInt(0, c_GiftKindAdvancedCount-1), gv_gameplay_advancedGift)) {
        DialogControlSetPropertyAsText(gv_gameplay_AdvancedGiftMsg, c_triggerControlPropertyText, PlayerGroupAll(), 
            StringToText("高级商品：" + gv_gameplay_advancedGift.name + FixedToString(gv_gameplay_advancedGift.duration, 0) + "s"));
    }
    return true;
}

static void gameplay_GiftChange_Init() {
    gt_gameplay_GiftChange = TriggerCreate("gameplay_GiftChange_Func");
    TriggerAddEventTimer(gt_gameplay_GiftChange, gv_gameplay_giftTimer);
}

bool gameplay_ApplyGift_Func(bool testConds, bool runActions) {
    string lv_name = arena_gf_CurrentCommandArgument(1);
    int lv_kind = StringToInt(arena_gf_CurrentCommandArgument(2));
    unit lv_unit = DataTableGetUnit(true, (arena_gv_unitNamePrefix + lv_name));
    UnitPlayer lv_player;
    GiftItemRef lv_gift;
    UnitPlayerBuff lv_buff;

    if (!runActions) {
        return true;
    }

    if (lv_kind == c_GiftKindBasic) {
        lv_gift = gv_gameplay_basicGift;
    } else if (lv_kind == c_GiftKindAdvanced) {
        lv_gift = gv_gameplay_advancedGift;
    } else {
        return false;
    }
    if (lv_gift.name == null) {
        return false;
    }
    if (!UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    lv_buff.behavior = lv_gift.behavior;
    lv_buff.count = lv_gift.count;
    lv_buff.duration = lv_gift.duration;
    UnitPlayerAddBuff(lv_player, lv_buff);
    SaveUnitPlayer(lv_player);

    if (UnitIsAlive(lv_unit)) {
        GiftItemApply(lv_unit, lv_gift);
    }
    return true;
}

static void gameplay_ApplyGift_Init() {
    gt_gameplay_ApplyGift = TriggerCreate("gameplay_ApplyGift_Func");
    TriggerAddEventGeneric(gt_gameplay_ApplyGift, (arena_gv_commandPrefix + "apply-gift"));
}