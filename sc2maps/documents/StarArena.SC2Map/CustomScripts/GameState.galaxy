// Const Declarations
const int c_unitPlayerAIStatesCap = 5;

const int c_unitPlayerPropsMaxLife = 0;
const int c_unitPlayerPropsDamageMultiplier = 1;
const int c_unitPlayerPropsRangeMultiplier = 2;
const int c_unitPlayerPropsAttackSpeed = 3;
const int c_unitPlayerPropsMaxEnergy = 4;
const int c_unitplayerPropsToughness = 5;
const int c_unitPlayerPropsMoveSpeed = 6;
const int c_unitPlayerPropsCap = 7;

const int c_UnitPlayerMaxLevel = 20;

const int c_unitPlayersCap = 20;

const int c_GameStatePlayerIdRed = 4;
const int c_GameStatePlayerIdBlue = 3;

struct UnitPlayerBuff {
    string behavior;
    int count;
    fixed duration;
    datetime ctime;
};
typedef structref<UnitPlayerBuff> UnitPlayerBuffRef;

const int c_UnitPlayerBuffsCap = 10;
const int c_UnitPlayerAbilityQueueCap = 7;

typedef int[c_unitPlayerPropsCap] UnitPlayerProps;
typedef arrayref<UnitPlayerProps> UnitPlayerPropsRef;

// Type Declarations
struct UnitPlayer {
    string name;
    string unitType;
    string weaponType;
    string abilityType;
    datetime deadTime;
    int reviveInterval;
    int playerId;
    int score;
    int combo;
    int exp;
    int points;
    int aiMode;
    int level;
    int maxPoints;
    int revivePoint;
    bool isBot;
    int[c_unitPlayerAIStatesCap] aiStates;
    UnitPlayerProps props;
    UnitPlayerBuff[c_UnitPlayerBuffsCap] buffs;
    int abilityHead;
    int abilityTail;
    int[c_UnitPlayerAbilityQueueCap] abilityQueue;
    int[c_UnitPlayerAbilityQueueCap] savedAbilities;
    int abilsTextTag;
    int skinType;
    int template;
    int servants;
    bool upvoted;
};

typedef structref<UnitPlayer> UnitPlayerRef;

typedef UnitPlayer[c_unitPlayersCap] UnitPlayerArray;
typedef arrayref<UnitPlayerArray> UnitPlayerArrayRef;

// Variable Declarations
static UnitPlayerArray gv_gamestate_unitPlayers;
static int gv_gamestate_unitPlayersCount;
static int gv_gamestate_unitPlayerIndexOfName;

// Function Declarations
bool AddUnitPlayer(UnitPlayerRef player);
bool RemoveUnitPlayer(string name);
bool SaveUnitPlayer(UnitPlayerRef player);
bool UnitPlayerFromName(string name, UnitPlayerRef player);
bool UnitPlayerGet(int inIndex, UnitPlayerRef player);
void UnitPlayersGetAll(UnitPlayerArrayRef outPlayers);
int UnitPlayersCount();
void UnitPlayersOfRanked(UnitPlayerArrayRef outPlayers);
void UnitPlayerAddBuff(UnitPlayerRef refPlayer, UnitPlayerBuffRef inBuff);
void UnitPlayerSaveBuffs(UnitPlayerRef refPlayer);
void UnitPlayerRestoreBuffs(UnitPlayerRef refPlayer, unit inUnit);
int UnitPlayerGetMidLevel(int playerId);
bool UnitPlayerPushAbility(UnitPlayerRef refPlayer, int inAbility);
int UnitPlayerPopAbility(UnitPlayerRef refPlayer);
int UnitPlayerGetTailAbility(UnitPlayerRef refPlayer);
string UnitPlayerPrintAbilityQueue(UnitPlayerRef refPlayer);
int UnitPlayerAbilityCount(UnitPlayerRef refPlayer);
void UnitPlayerClearAbilityQueue(UnitPlayerRef refPlayer);
void InitGameState();

static void gamestate_InitUnitPlayerIndexOfName();
static void gamestate_CopyUnitPlayer(UnitPlayerRef dest, UnitPlayerRef source);
static int gamestate_PickAvailableUnitPlayerIndex(int playerId);
static void gamestate_SaveUnitPlayerByIndex(int index, UnitPlayerRef player);

// Functions
static void gamestate_InitUnitPlayerIndexOfName() {
    DataTableInstanceCreate();
    gv_gamestate_unitPlayerIndexOfName = DataTableInstanceLastCreated();
}

static void gamestate_CopyUnitPlayer(UnitPlayerRef dest, UnitPlayerRef source) {
    int lv_index;

    dest.name = source.name;
    dest.playerId = source.playerId;
    dest.exp = source.exp;
    dest.points = source.points;
    dest.score = source.score;
    dest.unitType = source.unitType;
    dest.weaponType = source.weaponType;
    dest.abilityType = source.abilityType;
    dest.deadTime = source.deadTime;
    dest.reviveInterval = source.reviveInterval;
    dest.aiMode = source.aiMode;
    dest.level = source.level;
    dest.maxPoints = source.maxPoints;
    dest.combo = source.combo;
    dest.revivePoint = source.revivePoint;
    dest.isBot = source.isBot;
    for (lv_index = 0; lv_index < c_unitPlayerAIStatesCap; lv_index += 1) {
        dest.aiStates[lv_index] = source.aiStates[lv_index];
    }
    for (lv_index = 0; lv_index < c_unitPlayerPropsCap; lv_index += 1) {
        dest.props[lv_index] = source.props[lv_index];
    }
    for (lv_index = 0; lv_index < c_UnitPlayerBuffsCap; lv_index += 1) {
        dest.buffs[lv_index].behavior = source.buffs[lv_index].behavior;
        dest.buffs[lv_index].count = source.buffs[lv_index].count;
        dest.buffs[lv_index].duration = source.buffs[lv_index].duration;
        dest.buffs[lv_index].ctime = source.buffs[lv_index].ctime;
    }
    dest.abilityHead = source.abilityHead;
    dest.abilityTail = source.abilityTail;
    for (lv_index = 0; lv_index < c_UnitPlayerAbilityQueueCap; lv_index += 1) {
        dest.abilityQueue[lv_index] = source.abilityQueue[lv_index];
        dest.savedAbilities[lv_index] = source.savedAbilities[lv_index];
    }
    dest.abilsTextTag = source.abilsTextTag;
    dest.skinType = source.skinType;
    dest.template = source.template;
    dest.servants = source.servants;
    dest.upvoted = source.upvoted;
}

static int gamestate_PickAvailableUnitPlayerIndex(int playerId) {
    int index = 0;

    if (playerId == c_GameStatePlayerIdRed) {
        index = 0;
    } else if (playerId == c_GameStatePlayerIdBlue) {
        index = c_unitPlayersCap / 2;
    }
    for (; index < index + c_unitPlayersCap / 2; index += 1) {
        if (gv_gamestate_unitPlayers[index].name == null) {
            break;
        }
    }
    return index;
}

static void gamestate_SaveUnitPlayerByIndex(int index, UnitPlayerRef player) {
    gamestate_CopyUnitPlayer(gv_gamestate_unitPlayers[index], player);
    DataTableInstanceSetInt(gv_gamestate_unitPlayerIndexOfName, player.name, index);
}

bool AddUnitPlayer(UnitPlayerRef player) {
    int abilIndex;
    int index;
    if (gv_gamestate_unitPlayersCount >= c_unitPlayersCap) {
        return false;
    }
    index = gamestate_PickAvailableUnitPlayerIndex(player.playerId);
    player.abilityTail = 0;
    player.abilityHead = 1;
    for (abilIndex = 0; abilIndex < c_UnitPlayerAbilityQueueCap; abilIndex += 1) {
        player.abilityQueue[abilIndex] = -1;
        player.savedAbilities[abilIndex] = -1;
    }
    DataTableInstanceCreate();
    player.servants = DataTableInstanceLastCreated();
    gamestate_SaveUnitPlayerByIndex(index, player);
    gv_gamestate_unitPlayersCount += 1;
    return true;
}

bool RemoveUnitPlayer(string name) {
    UnitPlayer emptyPlayer;
    UnitPlayerRef lv_player;

    if (!DataTableInstanceValueExists(gv_gamestate_unitPlayerIndexOfName, name)) {
        return false;
    }
    lv_player = gv_gamestate_unitPlayers[DataTableInstanceGetInt(gv_gamestate_unitPlayerIndexOfName, name)];
    if (lv_player.abilsTextTag > 0) {
        TextTagDestroy(lv_player.abilsTextTag);
    }
    gamestate_CopyUnitPlayer(lv_player, emptyPlayer);
    DataTableInstanceValueRemove(gv_gamestate_unitPlayerIndexOfName, name);
    gv_gamestate_unitPlayersCount -= 1;
    return true;
}

bool SaveUnitPlayer(UnitPlayerRef player) {
    UnitPlayerRef lv_player;

    if (!DataTableInstanceValueExists(gv_gamestate_unitPlayerIndexOfName, player.name)) {
        return false;
    }

    lv_player = gv_gamestate_unitPlayers[DataTableInstanceGetInt(gv_gamestate_unitPlayerIndexOfName, player.name)];
    gamestate_CopyUnitPlayer(lv_player, player);
    return true;
}

bool UnitPlayerFromName(string name, UnitPlayerRef player) {
    UnitPlayerRef lv_player;

    if (!DataTableInstanceValueExists(gv_gamestate_unitPlayerIndexOfName, name)) {
        return false;
    }

    lv_player = gv_gamestate_unitPlayers[DataTableInstanceGetInt(gv_gamestate_unitPlayerIndexOfName, name)];
    gamestate_CopyUnitPlayer(player, lv_player);
    return true;
}

bool UnitPlayerGet(int inIndex, UnitPlayerRef outPlayer) {
    UnitPlayerRef lv_player;

    if (inIndex < 0 || inIndex >= c_unitPlayersCap) {
        return false;
    }
    lv_player = gv_gamestate_unitPlayers[inIndex];
    if (arena_gf_StringIsEmpty(lv_player.name)) {
        return false;
    }
    gamestate_CopyUnitPlayer(outPlayer, lv_player);
    return true;
}

int UnitPlayersCount() {
    return gv_gamestate_unitPlayersCount;
}

void UnitPlayersOfRanked(UnitPlayerArrayRef outPlayers) {
    int index;
    int k = 0;
    int i;
    int j;
    UnitPlayer tempPlayer;

    for (index = 0; index < c_unitPlayersCap; index += 1) {
        if (!arena_gf_StringIsEmpty(gv_gamestate_unitPlayers[index].name)) {
            gamestate_CopyUnitPlayer(outPlayers[k], gv_gamestate_unitPlayers[index]);
            k += 1;
        }
    }

    for (i = 0; i < gv_gamestate_unitPlayersCount-1; i += 1) {
        for (j = i+1; j < gv_gamestate_unitPlayersCount; j += 1) {
            if (outPlayers[i].score < outPlayers[j].score) {
                gamestate_CopyUnitPlayer(tempPlayer, outPlayers[i]);
                gamestate_CopyUnitPlayer(outPlayers[i], outPlayers[j]);
                gamestate_CopyUnitPlayer(outPlayers[j], tempPlayer);
            }
        }
    }
}

void UnitPlayersGetAll(UnitPlayerArrayRef outPlayers) {
    int index;
    int k = 0;

    for (index = 0; index < c_unitPlayersCap; index += 1) {
        if (!arena_gf_StringIsEmpty(gv_gamestate_unitPlayers[index].name)) {
            gamestate_CopyUnitPlayer(outPlayers[k], gv_gamestate_unitPlayers[index]);
            k += 1;
        }
    }
}

void UnitPlayerAddBuff(UnitPlayerRef refPlayer, UnitPlayerBuffRef inBuff) {
    int lv_index;
    UnitPlayerBuffRef lv_buff;
    int lv_emptyBUffIndex = -1;
    datetime lv_now = CurrentDateTimeGet();
    for (lv_index = 0; lv_index < c_UnitPlayerBuffsCap; lv_index += 1) {
        lv_buff = refPlayer.buffs[lv_index];
        if (lv_buff.behavior == null && lv_emptyBUffIndex < 0) {
            lv_emptyBUffIndex = lv_index;
        } else if (lv_buff.behavior == inBuff.behavior) {
            lv_buff.count = inBuff.count;
            lv_buff.duration -= DateTimeToInt(lv_now) - DateTimeToInt(lv_buff.ctime);
            if (lv_buff.duration > 0) {
                lv_buff.duration += inBuff.duration;
            } else {
                lv_buff.duration = inBuff.duration;
            }
            lv_buff.ctime = lv_now;
            lv_emptyBUffIndex = -1;
            break;
        }
    }
    if (lv_emptyBUffIndex >= 0) {
        lv_buff = refPlayer.buffs[lv_emptyBUffIndex];
        lv_buff.behavior = inBuff.behavior;
        lv_buff.count = inBuff.count;
        lv_buff.duration = inBuff.duration;
        lv_buff.ctime = lv_now;
    }
}

void UnitPlayerSaveBuffs(UnitPlayerRef refPlayer) {
    int lv_index;
    UnitPlayerBuffRef lv_buff;
    datetime lv_now = CurrentDateTimeGet();
    for (lv_index = 0; lv_index < c_UnitPlayerBuffsCap; lv_index += 1) {
        lv_buff = refPlayer.buffs[lv_index];
        if (lv_buff.behavior != null) {
            lv_buff.duration -= DateTimeToInt(lv_now) - DateTimeToInt(lv_buff.ctime);
            if (lv_buff.duration <= 0) {
                lv_buff.behavior = null;
                lv_buff.count = 0;
                lv_buff.duration = 0;
            }
            lv_buff.ctime = null;
        }
    }
}

void UnitPlayerRestoreBuffs(UnitPlayerRef refPlayer, unit inUnit) {
    int lv_index;
    UnitPlayerBuffRef lv_buff;
    datetime lv_now = CurrentDateTimeGet();
    for (lv_index = 0; lv_index < c_UnitPlayerBuffsCap; lv_index += 1) {
        lv_buff = refPlayer.buffs[lv_index];
        if (lv_buff.behavior != null) {
            lv_buff.ctime = lv_now;
            UnitBehaviorAdd(inUnit, lv_buff.behavior, inUnit, lv_buff.count);
            UnitBehaviorSetDuration(inUnit, lv_buff.behavior, lv_buff.duration);
        }
    }
}

int UnitPlayerGetMidLevel(int playerId) {
    int lv_index;
    UnitPlayerRef lv_player;
    int[c_unitPlayersCap / 2] lv_playerLevels;
    int lv_levelIndex = -1;
    int i;
    int j;
    int tempLevel;
    int lv_midLevel;

    for (lv_index = 0; lv_index < c_unitPlayersCap; lv_index += 1) {
        lv_player = gv_gamestate_unitPlayers[lv_index];
        if (lv_player.playerId == playerId && !arena_gf_StringIsEmpty(lv_player.name)) {
            lv_levelIndex += 1;
            lv_playerLevels[lv_levelIndex] = lv_player.level;
        }
    }
    
    for (i = 0; i < lv_levelIndex; i += 1) {
        for (j = i+1; j < lv_levelIndex+1; j += 1) {
            if (lv_playerLevels[i] < lv_playerLevels[j]) {
                tempLevel = lv_playerLevels[i];
                lv_playerLevels[i] = lv_playerLevels[j];
                lv_playerLevels[j] = tempLevel;
            }
        } 
    }

    if (lv_levelIndex >= 0) {
        if (lv_levelIndex % 2 == 0) {
            lv_midLevel = lv_playerLevels[lv_levelIndex / 2];
        } else {
            lv_midLevel = (lv_playerLevels[lv_levelIndex / 2] + lv_playerLevels[lv_levelIndex / 2 + 1]) / 2;
        }
    }
    if (lv_midLevel <= 0) {
        lv_midLevel = 10;
    } else if (lv_midLevel > c_UnitPlayerMaxLevel) {
        lv_midLevel = c_UnitPlayerMaxLevel;
    }

    return lv_midLevel;
}

bool UnitPlayerPushAbility(UnitPlayerRef refPlayer, int inAbility) {
    int lv_index = refPlayer.abilityHead;
    if (refPlayer.abilityQueue[lv_index] >= 0 || lv_index == refPlayer.abilityTail) {
        return false;
    }
    refPlayer.abilityQueue[lv_index] = inAbility;
    lv_index += 1;
    if (lv_index >= c_UnitPlayerAbilityQueueCap) {
        lv_index = 0;
    }
    refPlayer.abilityHead = lv_index;
    return true;
}

int UnitPlayerPopAbility(UnitPlayerRef refPlayer) {
    int lv_abil;
    int lv_index = refPlayer.abilityTail + 1;
    if (lv_index >= c_UnitPlayerAbilityQueueCap) {
        lv_index = 0;
    }
    if (lv_index == refPlayer.abilityHead) {
        return -1;
    }
    lv_abil = refPlayer.abilityQueue[lv_index];
    refPlayer.abilityQueue[lv_index] = -1;
    refPlayer.abilityTail = lv_index;
    return lv_abil;
}

int UnitPlayerGetTailAbility(UnitPlayerRef refPlayer) {
    int lv_index = refPlayer.abilityTail + 1;
    if (lv_index >= c_UnitPlayerAbilityQueueCap) {
        lv_index = 0;
    }
    if (lv_index == refPlayer.abilityHead) {
        return -1;
    }
    return refPlayer.abilityQueue[lv_index];
}

string UnitPlayerPrintAbilityQueue(UnitPlayerRef refPlayer) {
    int lv_index = refPlayer.abilityTail;
    string lv_abilities;
    for (;;) {
        lv_index += 1;
        if (lv_index >= c_UnitPlayerAbilityQueueCap) {
            lv_index = 0;
        }
        if (lv_index == refPlayer.abilityHead) {
            break;
        }
        lv_abilities += AbilityDataAbilFlagName(refPlayer.abilityQueue[lv_index]) + IntToString(AbilityDataExToAbil(refPlayer.abilityQueue[lv_index]));
    }
    return lv_abilities;
}

int UnitPlayerAbilityCount(UnitPlayerRef refPlayer) {
    int lv_count;
    if (refPlayer.abilityHead > refPlayer.abilityTail) {
        lv_count = refPlayer.abilityHead - refPlayer.abilityTail - 1;
    } else if (refPlayer.abilityHead <= refPlayer.abilityTail) {
        lv_count = c_UnitPlayerAbilityQueueCap - refPlayer.abilityTail + refPlayer.abilityHead - 1;
    }
    return lv_count;
}

void UnitPlayerClearAbilityQueue(UnitPlayerRef refPlayer) {
    int lv_index;
    refPlayer.abilityTail = 0;
    refPlayer.abilityHead = 1;
    for (lv_index = 0; lv_index < c_UnitPlayerAbilityQueueCap; lv_index += 1) {
        refPlayer.abilityQueue[lv_index] = -1;
    }
}

void InitGameState() {
    gamestate_InitUnitPlayerIndexOfName();
}