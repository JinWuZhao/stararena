// Const Declarations
const int c_unitPlayerAIStatesCap = 5;
const int c_unitPlayersCap = 40;
static const int c_gamestate_autoRewardPointsPerSecond = 20;

// Type Declarations
struct UnitPlayer {
    string name;
    string unitType;
    datetime rewardTime;
    datetime deadTime;
    int playerId;
    int score;
    int points;
    int aiMode;
    int servants;
    string servantType;
    bool isBot;
    int[c_unitPlayerAIStatesCap] aiStates;
};

typedef structref<UnitPlayer> UnitPlayerRef;

typedef UnitPlayer[c_unitPlayersCap] UnitPlayerArray;
typedef arrayref<UnitPlayerArray> UnitPlayerArrayRef;

// Variable Declarations
static UnitPlayerArray gv_gamestate_unitPlayers;
static int gv_gamestate_unitPlayersCount;
static int gv_gamestate_unitPlayerIndexOfName;

// Function Declarations
bool AddUnitPlayer(UnitPlayerRef player);
bool RemoveUnitPlayer(string name);
bool SaveUnitPlayer(UnitPlayerRef player);
bool UnitPlayerFromName(string name, UnitPlayerRef player);
int UnitPlayerAutoRewardPoints(UnitPlayerRef player);
void UnitPlayersGetAll(UnitPlayerArrayRef outPlayers);
int UnitPlayersCount();
void UnitPlayersOfRanked(UnitPlayerArrayRef outPlayers);
void InitGameState();

static void gamestate_InitUnitPlayerIndexOfName();
static void gamestate_CopyUnitPlayer(UnitPlayerRef dest, UnitPlayerRef source);
static int gamestate_PickAvailableUnitPlayerIndex();
static void gamestate_SaveUnitPlayerByIndex(int index, UnitPlayerRef player);

// Functions
static void gamestate_InitUnitPlayerIndexOfName() {
    DataTableInstanceCreate();
    gv_gamestate_unitPlayerIndexOfName = DataTableInstanceLastCreated();
}

static void gamestate_CopyUnitPlayer(UnitPlayerRef dest, UnitPlayerRef source) {
    int lv_aiStatesIndex;

    dest.name = source.name;
    dest.playerId = source.playerId;
    dest.points = source.points;
    dest.score = source.score;
    dest.unitType = source.unitType;
    dest.rewardTime = source.rewardTime;
    dest.deadTime = source.deadTime;
    dest.aiMode = source.aiMode;
    dest.servants = source.servants;
    dest.servantType = source.servantType;
    dest.isBot = source.isBot;
    for (lv_aiStatesIndex = 0; lv_aiStatesIndex < c_unitPlayerAIStatesCap; lv_aiStatesIndex += 1) {
        dest.aiStates[lv_aiStatesIndex] = source.aiStates[lv_aiStatesIndex];
    }
}

static int gamestate_PickAvailableUnitPlayerIndex() {
    int index;

    for (index = 0; index < c_unitPlayersCap; index += 1) {
        if (gv_gamestate_unitPlayers[index].name == null) {
            break;
        }
    }
    return index;
}

static void gamestate_SaveUnitPlayerByIndex(int index, UnitPlayerRef player) {
    gamestate_CopyUnitPlayer(gv_gamestate_unitPlayers[index], player);
    DataTableInstanceSetInt(gv_gamestate_unitPlayerIndexOfName, player.name, index);
}

bool AddUnitPlayer(UnitPlayerRef player) {
    int index = gamestate_PickAvailableUnitPlayerIndex();
    if (index == c_unitPlayersCap) {
        return false;
    }
    player.points = 100;
    player.rewardTime = CurrentDateTimeGet();
    player.deadTime = IntToDateTime(0);
    player.unitType = "Marine";
    player.servants = 6;
    gamestate_SaveUnitPlayerByIndex(index, player);
    gv_gamestate_unitPlayersCount += 1;
    return true;
}

bool RemoveUnitPlayer(string name) {
    UnitPlayer emptyPlayer;

    if (!DataTableInstanceValueExists(gv_gamestate_unitPlayerIndexOfName, name)) {
        return false;
    }
    gamestate_CopyUnitPlayer(gv_gamestate_unitPlayers[DataTableInstanceGetInt(gv_gamestate_unitPlayerIndexOfName, name)], emptyPlayer);
    DataTableInstanceValueRemove(gv_gamestate_unitPlayerIndexOfName, name);
    gv_gamestate_unitPlayersCount -= 1;
    return true;
}

bool SaveUnitPlayer(UnitPlayerRef player) {
    UnitPlayerRef lv_player;

    if (!DataTableInstanceValueExists(gv_gamestate_unitPlayerIndexOfName, player.name)) {
        return false;
    }

    lv_player = gv_gamestate_unitPlayers[DataTableInstanceGetInt(gv_gamestate_unitPlayerIndexOfName, player.name)];
    gamestate_CopyUnitPlayer(lv_player, player);
    return true;
}

bool UnitPlayerFromName(string name, UnitPlayerRef player) {
    UnitPlayerRef lv_player;

    if (!DataTableInstanceValueExists(gv_gamestate_unitPlayerIndexOfName, name)) {
        return false;
    }

    lv_player = gv_gamestate_unitPlayers[DataTableInstanceGetInt(gv_gamestate_unitPlayerIndexOfName, name)];
    gamestate_CopyUnitPlayer(player, lv_player);
    return true;
}

int UnitPlayerAutoRewardPoints(UnitPlayerRef player) {
    datetime lv_currentTime;
    int lv_duration;
    int lv_reward;

    lv_currentTime = CurrentDateTimeGet();

    if (!UnitIsValid(DataTableGetUnit(true, arena_gv_unitNamePrefix + player.name))) {
        lv_duration = DateTimeToInt(lv_currentTime) - DateTimeToInt(player.rewardTime);
        if (lv_duration > 0) {
            lv_reward = lv_duration * c_gamestate_autoRewardPointsPerSecond;
        }
        player.points += lv_reward;            
    }

    player.rewardTime = lv_currentTime;
    SaveUnitPlayer(player);
    return lv_reward;
}

int UnitPlayersCount() {
    return gv_gamestate_unitPlayersCount;
}

void UnitPlayersOfRanked(UnitPlayerArrayRef outPlayers) {
    int index;
    int k = 0;
    int i;
    int j;
    UnitPlayer tempPlayer;

    for (index = 0; index < c_unitPlayersCap; index += 1) {
        if (!arena_gf_StringIsEmpty(gv_gamestate_unitPlayers[index].name)) {
            gamestate_CopyUnitPlayer(outPlayers[k], gv_gamestate_unitPlayers[index]);
            k += 1;
        }
    }

    for (i = 0; i < gv_gamestate_unitPlayersCount-1; i += 1) {
        for (j = i+1; j < gv_gamestate_unitPlayersCount; j += 1) {
            if (outPlayers[i].score < outPlayers[j].score) {
                gamestate_CopyUnitPlayer(tempPlayer, outPlayers[i]);
                gamestate_CopyUnitPlayer(outPlayers[i], outPlayers[j]);
                gamestate_CopyUnitPlayer(outPlayers[j], tempPlayer);
            }
        } 
    }
}

void UnitPlayersGetAll(UnitPlayerArrayRef outPlayers) {
    int index;
    int k = 0;

    for (index = 0; index < c_unitPlayersCap; index += 1) {
        if (!arena_gf_StringIsEmpty(gv_gamestate_unitPlayers[index].name)) {
            gamestate_CopyUnitPlayer(outPlayers[k], gv_gamestate_unitPlayers[index]);
            k += 1;
        }
    }
}

void InitGameState() {
    gamestate_InitUnitPlayerIndexOfName();
}