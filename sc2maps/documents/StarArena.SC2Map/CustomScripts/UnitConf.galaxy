// Variable Declarations
static int gv_unitdata_dataTypeOfUnitType;

const int c_UnitDataTypeAliasCount = 5;
struct UnitData {
    string unitType;
    string[c_UnitDataTypeAliasCount] typeAlias;
    int costPoints;
    int rewardPoints;
};
typedef structref<UnitData> UnitDataRef;

const int c_UnitDataTypesMengskHellion = 0;
const int c_UnitDataTypesSiegeTank = 1;
const int c_UnitDataTypesThorAP = 2;
const int c_UnitDataTypesBattlecruiser = 3;
const int c_UnitDataTypesCount = 4;

typedef UnitData[c_UnitDataTypesCount] UnitDataArray;
typedef arrayref<UnitDataArray> UnitDataArrayRef;

static UnitDataArray gv_unitdata_unitTypes;

// Function Declarations
void UnitDataGet(int unitDataType, UnitDataRef outData);
bool UnitDataGetByUnitType(string unitType, UnitDataRef outData);
void InitUnitData();

static void unitdata_CopyUnitData(UnitDataRef dest, UnitDataRef source);

// Functions
void UnitDataGet(int unitDataType, UnitDataRef outData) {
    unitdata_CopyUnitData(outData, gv_unitdata_unitTypes[unitDataType]);
}

bool UnitDataGetByUnitType(string unitType, UnitDataRef outData) {
    if (!DataTableInstanceValueExists(gv_unitdata_dataTypeOfUnitType, unitType)) {
        return false;
    }
    unitdata_CopyUnitData(outData, gv_unitdata_unitTypes[DataTableInstanceGetInt(gv_unitdata_dataTypeOfUnitType, unitType)]);
    return true;
}

void InitUnitData() {
    int lv_index;
    int k;

    gv_unitdata_unitTypes[c_UnitDataTypesMengskHellion].unitType = "MengskHellion";
    gv_unitdata_unitTypes[c_UnitDataTypesMengskHellion].costPoints = 0;
    gv_unitdata_unitTypes[c_UnitDataTypesMengskHellion].rewardPoints = 100;

    gv_unitdata_unitTypes[c_UnitDataTypesSiegeTank].unitType = "SiegeTank";
    gv_unitdata_unitTypes[c_UnitDataTypesSiegeTank].typeAlias[0] = "SiegeTankSieged";
    gv_unitdata_unitTypes[c_UnitDataTypesSiegeTank].costPoints = 100;
    gv_unitdata_unitTypes[c_UnitDataTypesSiegeTank].rewardPoints = 150;

    gv_unitdata_unitTypes[c_UnitDataTypesThorAP].unitType = "ThorAP";
    gv_unitdata_unitTypes[c_UnitDataTypesThorAP].typeAlias[0] = "Thor";
    gv_unitdata_unitTypes[c_UnitDataTypesThorAP].costPoints = 300;
    gv_unitdata_unitTypes[c_UnitDataTypesThorAP].rewardPoints = 200;

    gv_unitdata_unitTypes[c_UnitDataTypesBattlecruiser].unitType = "Battlecruiser";
    gv_unitdata_unitTypes[c_UnitDataTypesBattlecruiser].costPoints = 500;
    gv_unitdata_unitTypes[c_UnitDataTypesBattlecruiser].rewardPoints = 300;

    DataTableInstanceCreate();
    gv_unitdata_dataTypeOfUnitType = DataTableInstanceLastCreated();
    for (lv_index = 0; lv_index < c_UnitDataTypesCount; lv_index += 1) {
        DataTableInstanceSetInt(gv_unitdata_dataTypeOfUnitType, gv_unitdata_unitTypes[lv_index].unitType, lv_index);

        for (k = 0; k < c_UnitDataTypeAliasCount; k += 1) {
            if (gv_unitdata_unitTypes[lv_index].typeAlias[k] != "") {
                DataTableInstanceSetInt(gv_unitdata_dataTypeOfUnitType, gv_unitdata_unitTypes[lv_index].typeAlias[k], lv_index);
            }
        }
    }
}

static void unitdata_CopyUnitData(UnitDataRef dest, UnitDataRef source) {
    int lv_index;

    dest.unitType = source.unitType;
    for (lv_index = 0; lv_index < c_UnitDataTypeAliasCount; lv_index += 1) {
        dest.typeAlias[lv_index] = source.typeAlias[lv_index];
    }
    dest.costPoints = source.costPoints;
    dest.rewardPoints = source.rewardPoints;
}