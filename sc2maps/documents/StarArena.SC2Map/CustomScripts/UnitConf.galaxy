// Variable Declarations
static int gv_unitdata_dataTypeOfUnitType;

const int c_UnitDataTypeAliasCount = 5;
struct UnitData {
    int dataType;
    string unitType;
    string name;
    string[c_UnitDataTypeAliasCount] typeAlias;
    int lifeMax;
    fixed moveSpeed;
    int baseExp;
    int rewardExp;
    fixed baseScale;
};
typedef structref<UnitData> UnitDataRef;

const int c_UnitDataTypesNone = -1;
// 单位
const int c_UnitDataTypesHellion = 0; // 恶火
const int c_UnitDataTypesSiegeTank = 1; // 攻城坦克
const int c_UnitDataTypesThor = 2; // 雷神
const int c_UnitDataTypeCyclone = 3; // 飓风
const int c_UnitDataTypeImmortal = 4; // 不朽者
const int c_UnitDataTypeColossus = 5; // 巨像
// 建筑
const int c_UnitDataTypeCommandCenter = 6; // 指挥中心
const int c_UnitDataTypeDestructibleGarage = 7; // 围墙
const int c_UnitDataTypeValhallaDestructibleWall = 8; // 围墙

const int c_UnitDataTypesCount = 9;

typedef UnitData[c_UnitDataTypesCount] UnitDataArray;

static UnitDataArray gv_unitdata_unitTypes;

// Function Declarations
void UnitDataCopy(UnitDataRef dest, UnitDataRef source);
bool UnitDataGet(int unitDataType, UnitDataRef outData);
bool UnitDataGetByUnitType(string unitType, UnitDataRef outData);
bool UnitDataInitUnitProps(unit inUnit);
bool UnitDataSetUnitProp(int inProp, int inPoints, UnitDataRef inData, unit inUnit);
bool UnitDataInitPlayerUnitProps(UnitPlayerRef inPlayer, unit inUnit);
void InitUnitData();

static void unitdata_InitUnitMatrix();

// Functions
void UnitDataCopy(UnitDataRef dest, UnitDataRef source) {
    int lv_index;

    dest.dataType = source.dataType;
    dest.unitType = source.unitType;
    dest.name = source.name;
    dest.lifeMax = source.lifeMax;
    dest.moveSpeed = source.moveSpeed;
    dest.baseExp = source.baseExp;
    dest.rewardExp = source.rewardExp;
    dest.baseScale = source.baseScale;

    for (lv_index = 0; lv_index < c_UnitDataTypeAliasCount; lv_index += 1) {
        dest.typeAlias[lv_index] = source.typeAlias[lv_index];
    }
}

bool UnitDataGet(int unitDataType, UnitDataRef outData) {
    if (unitDataType > c_UnitDataTypesNone && unitDataType < c_UnitDataTypesCount) {
        UnitDataCopy(outData, gv_unitdata_unitTypes[unitDataType]);
        return true;
    }
    return false;
}

bool UnitDataGetByUnitType(string unitType, UnitDataRef outData) {
    if (arena_gf_StringIsEmpty(unitType)) {
        return false;
    }
    if (!DataTableInstanceValueExists(gv_unitdata_dataTypeOfUnitType, unitType)) {
        return false;
    }
    UnitDataCopy(outData, gv_unitdata_unitTypes[DataTableInstanceGetInt(gv_unitdata_dataTypeOfUnitType, unitType)]);
    return true;
}

bool UnitDataInitUnitProps(unit inUnit) {
    UnitData lv_unitData;
    if (!UnitDataGetByUnitType(UnitGetType(inUnit), lv_unitData)) {
        return false;
    }
    if (UnitGetType(inUnit) == "DestructibleGarage") {
        UnitSetScale(inUnit, lv_unitData.baseScale, lv_unitData.baseScale, lv_unitData.baseScale * 2);
    } else {
        UnitSetScale(inUnit, lv_unitData.baseScale, lv_unitData.baseScale, lv_unitData.baseScale);
    }
    UnitSetPropertyInt(inUnit, c_unitPropLifeMax, lv_unitData.lifeMax);
    return true;
}

bool UnitDataSetUnitProp(int inProp, int inPoints, UnitDataRef inData, unit inUnit) {
    string lv_behavior;
    int lv_points = inPoints;
    if (inProp < 0 || inProp >= c_unitPlayerPropsCap) {
        return false;
    }
    if (inProp == c_unitPlayerPropsMaxLife) {
        lv_behavior = "StarArenaMaxLifeEnhance";
    } else if (inProp == c_unitPlayerPropsDamageMultiplier) {
        lv_behavior = "StarArenaAttackDamageEnhance";
        lv_points /= 4;
    } else if (inProp == c_unitPlayerPropsRangeMultiplier) {
        lv_behavior = "StarArenaAttackRangeEnhance";
    } else if (inProp == c_unitPlayerPropsMoveSpeed) {
        lv_behavior = "StarArenaMoveSpeedEnhance";
    } else if (inProp == c_unitPlayerPropsAttackSpeed) {
        lv_behavior = "StarArenaAttackSpeedEnhance";
    }
    UnitBehaviorRemove(inUnit, lv_behavior, UnitBehaviorCount(inUnit, lv_behavior));
    UnitBehaviorAdd(inUnit, lv_behavior, inUnit, lv_points);
    return true;
}

bool UnitDataInitPlayerUnitProps(UnitPlayerRef inPlayer, unit inUnit) {
    UnitData lv_unitData;
    int lv_propIndex;
    if (!UnitDataGetByUnitType(inPlayer.unitType, lv_unitData)) {
        return false;
    }
    UnitSetScale(inUnit, lv_unitData.baseScale, lv_unitData.baseScale, lv_unitData.baseScale);
    for (lv_propIndex = 0; lv_propIndex < c_unitPlayerPropsCap; lv_propIndex += 1) {
        UnitDataSetUnitProp(lv_propIndex, inPlayer.props[lv_propIndex], lv_unitData, inUnit);
    }
    return true;
}

void InitUnitData() {
    int lv_index;
    int k;
    UnitData emptyData;
    UnitData data;

    // 单位
    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypesHellion;
    data.unitType = "Hellion";
    data.name = "恶火";
    data.baseExp = 60;
    data.baseScale = 200;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypesHellion], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypesSiegeTank;
    data.unitType = "SiegeTank";
    data.name = "攻城坦克";
    data.typeAlias[0] = "SiegeTankSieged";
    data.baseExp = 200;
    data.baseScale = 150;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypesSiegeTank], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypesThor;
    data.unitType = "ThorAP";
    data.name = "雷神";
    data.baseExp = 360;
    data.baseScale = 150;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypesThor], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeCyclone;
    data.unitType = "Cyclone";
    data.name = "飓风";
    data.baseExp = 96;
    data.baseScale = 150;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeCyclone], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeImmortal;
    data.unitType = "Immortal";
    data.name = "不朽者";
    data.baseExp = 220;
    data.baseScale = 200;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeImmortal], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeColossus;
    data.unitType = "Colossus";
    data.name = "巨像";
    data.baseExp = 450;
    data.baseScale = 150;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeColossus], data);

    // 建筑
    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeCommandCenter;
    data.unitType = "CommandCenter";
    data.name = "指挥中心";
    data.lifeMax = 10000;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeCommandCenter], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeDestructibleGarage;
    data.unitType = "DestructibleGarage";
    data.name = "围墙";
    data.baseExp = 400;
    data.lifeMax = 2000;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeDestructibleGarage], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeValhallaDestructibleWall;
    data.unitType = "ValhallaDestructibleWall";
    data.name = "围墙";
    data.baseExp = 200;
    data.lifeMax = 1000;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeValhallaDestructibleWall], data);

    for (lv_index = 0; lv_index < c_UnitDataTypesCount; lv_index += 1) {
        if (gv_unitdata_unitTypes[lv_index].baseExp > 0) {
            gv_unitdata_unitTypes[lv_index].rewardExp = gv_unitdata_unitTypes[lv_index].baseExp;
        }
        if (gv_unitdata_unitTypes[lv_index].baseScale <= 0) {
            gv_unitdata_unitTypes[lv_index].baseScale = 100;
        }
        if (gv_unitdata_unitTypes[lv_index].lifeMax <= 0) {
            gv_unitdata_unitTypes[lv_index].lifeMax = CatalogReferenceGetAsInt("Unit," + gv_unitdata_unitTypes[lv_index].unitType + ",LifeMax", arena_gv_directorPlayer) * 2;
        }
        if (gv_unitdata_unitTypes[lv_index].moveSpeed <= 0) {
            gv_unitdata_unitTypes[lv_index].moveSpeed = libNtve_gf_CatalogReferenceGetAsReal("Unit," + gv_unitdata_unitTypes[lv_index].unitType + ",Speed", arena_gv_directorPlayer);
        }
    }

    DataTableInstanceCreate();
    gv_unitdata_dataTypeOfUnitType = DataTableInstanceLastCreated();
    for (lv_index = 0; lv_index < c_UnitDataTypesCount; lv_index += 1) {
        DataTableInstanceSetInt(gv_unitdata_dataTypeOfUnitType, gv_unitdata_unitTypes[lv_index].unitType, lv_index);

        for (k = 0; k < c_UnitDataTypeAliasCount; k += 1) {
            if (!arena_gf_StringIsEmpty(gv_unitdata_unitTypes[lv_index].typeAlias[k])) {
                DataTableInstanceSetInt(gv_unitdata_dataTypeOfUnitType, gv_unitdata_unitTypes[lv_index].typeAlias[k], lv_index);
            }
        }
    }
}
