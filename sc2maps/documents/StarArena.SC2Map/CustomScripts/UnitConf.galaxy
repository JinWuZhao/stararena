// Variable Declarations
static int gv_unitdata_dataTypeOfUnitType;

const int c_UnitDataTypeAliasCount = 5;
struct UnitData {
    int dataType;
    string unitType;
    string name;
    string[c_UnitDataTypeAliasCount] typeAlias;
    int lifeMax;
    int shieldsMax;
    int costPoints;
    int rewardPoints;
    fixed baseScale;
    fixed servantScale;
    bool allowBot;
};
typedef structref<UnitData> UnitDataRef;

const int c_UnitDataTypesNone = -1;
// 人类
const int c_UnitDataTypeMarine = 0; // 陆战队员
const int c_UnitDataTypeMarauder = 1; // 劫掠者
const int c_UnitDataTypeReaper = 2; // 收割者
const int c_UnitDataTypeGhost = 3; // 幽灵
const int c_UnitDataTypesHellion = 4; // 恶火
const int c_UnitDataTypesSiegeTank = 5; // 攻城坦克
const int c_UnitDataTypesThor = 6; // 雷神
const int c_UnitDataTypeViking = 7; // 维京战机
const int c_UnitDataTypeBanshee = 8; // 女妖
const int c_UnitDataTypesBattlecruiser = 9; // 战列巡航舰
const int c_UnitDataTypeHellbat = 10; // 恶蝠
const int c_UnitDataTypeLiberator = 11; // 解放者
const int c_UnitDataTypeCyclone = 12; // 飓风
// 异虫
const int c_UnitDataTypeZergling = 13; // 跳虫
const int c_UnitDataTypeQueen = 14; // 虫后
const int c_UnitDataTypeHydralisk = 15; // 刺蛇
const int c_UnitDataTypeBaneling = 16; // 爆虫
const int c_UnitDataTypeRoach = 17; // 蟑螂
const int c_UnitDataTypeInfestor = 18; // 感染者
const int c_UnitDataTypeMutalisk = 19; // 异龙
const int c_UnitDataTypeCorruptor = 20; // 腐化者
const int c_UnitDataTypeUltralisk = 21; // 雷兽
const int c_UnitDataTypeBroodLord = 22; // 巢虫领主
const int c_UnitDataTypeSwarmHost = 23; // 虫群宿主
const int c_UnitDataTypeViper = 24; // 飞蛇
const int c_UnitDataTypeRavager = 25; // 破坏者
// 星灵
const int c_UnitDataTypeZealot = 26; // 狂热者
const int c_UnitDataTypeStalker = 27; // 追猎者
const int c_UnitDataTypeSentry = 28; // 机械哨兵
const int c_UnitDataTypeImmortal = 29; // 不朽者
const int c_UnitDataTypeColossus = 30; // 巨像
const int c_UnitDataTypePhoenix = 31; // 凤凰
const int c_UnitDataTypeVoidRay = 32; // 虚空辉光舰
const int c_UnitDataTypeHighTemplar = 33; // 高阶圣堂武士
const int c_UnitDataTypeArchon = 34; // 执政官
const int c_UnitDataTypeCarrier = 35; // 航母
const int c_UnitDataTypeMothership = 36; // 母舰
const int c_UnitDataTypeOracle = 37; // 先知
const int c_UnitDataTypeTempest = 38; // 风暴战舰
const int c_UnitDataTypeAdept = 39; // 使徒
const int c_UnitDataTypeDisruptor = 40; // 干扰者
//建筑
const int c_UnitDataTypeAutoTurret = 41; // 自动机炮
const int c_UnitDataTypeKorhalBaseDoor = 42; // 基地门
const int c_UnitDataTypeShadowShieldGenerator = 43; // 暗影护盾生成器

const int c_UnitDataTypesCount = 44;

const int c_UnitDataRaceCount = 3;
const int c_UnitDataCapPerRace = 13;

typedef UnitData[c_UnitDataTypesCount] UnitDataArray;

static UnitDataArray gv_unitdata_unitTypes;
static string[c_UnitDataRaceCount] gv_unitdata_races;
static int[c_UnitDataRaceCount][c_UnitDataCapPerRace] gv_unitdata_unitMatrix;

// Function Declarations
void UnitDataCopy(UnitDataRef dest, UnitDataRef source);
void UnitDataGet(int unitDataType, UnitDataRef outData);
bool UnitDataGetByUnitType(string unitType, UnitDataRef outData);
bool UnitDataGetByRace(int race, int index, UnitDataRef outData);
bool UnitDataExistsByRace(int race, int index);
bool UnitDataInitUnitProps(unit inUnit);
string UnitDataGetRaceName(int race);
void InitUnitData();

static void unitdata_InitUnitMatrix();

// Functions
void UnitDataCopy(UnitDataRef dest, UnitDataRef source) {
    int lv_index;

    dest.dataType = source.dataType;
    dest.unitType = source.unitType;
    dest.name = source.name;
    dest.lifeMax = source.lifeMax;
    dest.shieldsMax = source.shieldsMax;
    dest.costPoints = source.costPoints;
    dest.rewardPoints = source.rewardPoints;
    dest.baseScale = source.baseScale;
    dest.servantScale = source.servantScale;
    dest.allowBot = source.allowBot;

    for (lv_index = 0; lv_index < c_UnitDataTypeAliasCount; lv_index += 1) {
        dest.typeAlias[lv_index] = source.typeAlias[lv_index];
    }
}

void UnitDataGet(int unitDataType, UnitDataRef outData) {
    UnitDataCopy(outData, gv_unitdata_unitTypes[unitDataType]);
}

bool UnitDataGetByUnitType(string unitType, UnitDataRef outData) {
    if (arena_gf_StringIsEmpty(unitType)) {
        return false;
    }
    if (!DataTableInstanceValueExists(gv_unitdata_dataTypeOfUnitType, unitType)) {
        return false;
    }
    UnitDataCopy(outData, gv_unitdata_unitTypes[DataTableInstanceGetInt(gv_unitdata_dataTypeOfUnitType, unitType)]);
    return true;
}

bool UnitDataGetByRace(int race, int index, UnitDataRef outData) {
    int lv_dataType;

    if (race >= 0 && race < c_UnitDataRaceCount && 
        index >= 0 && index < c_UnitDataCapPerRace) {
        lv_dataType = gv_unitdata_unitMatrix[race][index];
        if (lv_dataType > c_UnitDataTypesNone) {
            UnitDataCopy(outData, gv_unitdata_unitTypes[lv_dataType]);
            return true;
        }
    }
    return false;
}

bool UnitDataExistsByRace(int race, int index) {
    int lv_dataType;

    if (race >= 0 && race < c_UnitDataRaceCount && 
        index >= 0 && index < c_UnitDataCapPerRace) {
        lv_dataType = gv_unitdata_unitMatrix[race][index];
        if (lv_dataType > c_UnitDataTypesNone) {
            return true;
        }
    }
    return false;
}

bool UnitDataInitUnitProps(unit inUnit) {
    UnitData lv_unitData;
    if (!UnitDataGetByUnitType(UnitGetType(inUnit), lv_unitData)) {
        return false;
    }
    UnitSetScale(inUnit, lv_unitData.baseScale, lv_unitData.baseScale, lv_unitData.baseScale);
    UnitSetPropertyInt(inUnit, c_unitPropLifeMax, lv_unitData.lifeMax);
    UnitSetPropertyInt(inUnit, c_unitPropShieldsMax, lv_unitData.shieldsMax);
    return true;
}

string UnitDataGetRaceName(int race) {
    if (race >= 0 && race < c_UnitDataRaceCount) {
        return gv_unitdata_races[race];
    }
    return "";
}

void InitUnitData() {
    int lv_index;
    int k;
    UnitData emptyData;
    UnitData data;

    // 人类
    data.dataType = c_UnitDataTypeMarine;
    data.unitType = "Marine";
    data.name = "陆战队员";
    data.costPoints = 25;
    data.baseScale = 300;
    data.servantScale = 150;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeMarine], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeMarauder;
    data.unitType = "Marauder";
    data.name = "劫掠者";
    data.costPoints = 60;
    data.baseScale = 250;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeMarauder], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeReaper;
    data.unitType = "Reaper";
    data.name = "收割者";
    data.costPoints = 45;
    data.baseScale = 300;
    data.servantScale = 150;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeReaper], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeGhost;
    data.unitType = "Ghost";
    data.name = "幽灵";
    data.costPoints = 80;
    data.baseScale = 300;
    data.servantScale = 150;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeGhost], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypesHellion;
    data.unitType = "Hellion";
    data.name = "恶火";
    data.costPoints = 60;
    data.baseScale = 250;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypesHellion], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypesSiegeTank;
    data.unitType = "SiegeTank";
    data.name = "攻城坦克";
    data.typeAlias[0] = "SiegeTankSieged";
    data.costPoints = 135;
    data.baseScale = 200;
    data.servantScale = 80;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypesSiegeTank], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypesThor;
    data.unitType = "ThorAP";
    data.name = "雷神";
    data.costPoints = 360;
    data.baseScale = 180;
    data.servantScale = 80;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypesThor], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeViking;
    data.unitType = "VikingFighter";
    data.name = "维京战机";
    data.costPoints = 84;
    data.baseScale = 250;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeViking], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeBanshee;
    data.unitType = "Banshee";
    data.name = "女妖";
    data.costPoints = 180;
    data.baseScale = 250;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeBanshee], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypesBattlecruiser;
    data.unitType = "Battlecruiser";
    data.name = "战列巡航舰";
    data.costPoints = 540;
    data.baseScale = 200;
    data.servantScale = 80;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypesBattlecruiser], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeHellbat;
    data.unitType = "HellionTank";
    data.name = "恶蝠";
    data.costPoints = 60;
    data.baseScale = 250;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeHellbat], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeLiberator;
    data.unitType = "Liberator";
    data.name = "解放者";
    data.costPoints = 180;
    data.baseScale = 200;
    data.servantScale = 80;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeLiberator], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeCyclone;
    data.unitType = "Cyclone";
    data.name = "飓风";
    data.costPoints = 96;
    data.baseScale = 250;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeCyclone], data);

    // 异虫
    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeZergling;
    data.unitType = "Zergling";
    data.typeAlias[0] = "ZerglingBurrowed";
    data.name = "跳虫";
    data.costPoints = 24;
    data.baseScale = 350;
    data.servantScale = 150;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeZergling], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeQueen;
    data.unitType = "Queen";
    data.typeAlias[0] = "QueenBurrowed";
    data.name = "虫后";
    data.costPoints = 100;
    data.baseScale = 200;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeQueen], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeHydralisk;
    data.unitType = "Hydralisk";
    data.typeAlias[0] = "HydraliskBurrowed";
    data.name = "刺蛇";
    data.costPoints = 66;
    data.baseScale = 250;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeHydralisk], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeBaneling;
    data.unitType = "Baneling";
    data.typeAlias[0] = "BanelingBurrowed";
    data.name = "爆虫";
    data.costPoints = 20;
    data.baseScale = 250;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeBaneling], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeRoach;
    data.unitType = "Roach";
    data.typeAlias[0] = "RoachBurrowed";
    data.name = "蟑螂";
    data.costPoints = 54;
    data.baseScale = 250;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeRoach], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeInfestor;
    data.unitType = "Infestor";
    data.typeAlias[0] = "InfestorBurrowed";
    data.name = "感染者";
    data.costPoints = 100;
    data.baseScale = 200;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeInfestor], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeMutalisk;
    data.unitType = "Mutalisk";
    data.name = "异龙";
    data.costPoints = 66;
    data.baseScale = 250;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeMutalisk], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeCorruptor;
    data.unitType = "Corruptor";
    data.name = "腐化者";
    data.costPoints = 80;
    data.baseScale = 250;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeCorruptor], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeUltralisk;
    data.unitType = "Ultralisk";
    data.typeAlias[0] = "UltraliskBurrowed";
    data.name = "雷兽";
    data.costPoints = 330;
    data.baseScale = 180;
    data.servantScale = 80;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeUltralisk], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeBroodLord;
    data.unitType = "BroodLord";
    data.name = "巢虫领主";
    data.costPoints = 68;
    data.baseScale = 250;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeBroodLord], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeSwarmHost;
    data.unitType = "SwarmHostMP";
    data.typeAlias[0] = "SwarmHostBurrowedMP";
    data.name = "虫群宿主";
    data.costPoints = 120;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeSwarmHost], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeViper;
    data.unitType = "Viper";
    data.name = "飞蛇";
    data.costPoints = 120;
    data.baseScale = 250;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeViper], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeRavager;
    data.unitType = "Ravager";
    data.typeAlias[0] = "RavagerBurrowed";
    data.name = "破坏者";
    data.costPoints = 27;
    data.baseScale = 200;
    data.servantScale = 80;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeRavager], data);

    // 星灵
    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeZealot;
    data.unitType = "Zealot";
    data.name = "狂热者";
    data.costPoints = 76;
    data.baseScale = 300;
    data.servantScale = 150;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeZealot], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeStalker;
    data.unitType = "Stalker";
    data.name = "追猎者";
    data.costPoints = 84;
    data.baseScale = 200;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeStalker], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeSentry;
    data.unitType = "Sentry";
    data.name = "机械哨兵";
    data.costPoints = 74;
    data.baseScale = 300;
    data.servantScale = 150;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeSentry], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeImmortal;
    data.unitType = "Immortal";
    data.name = "不朽者";
    data.costPoints = 220;
    data.baseScale = 200;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeImmortal], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeColossus;
    data.unitType = "Colossus";
    data.name = "巨像";
    data.costPoints = 450;
    data.baseScale = 150;
    data.servantScale = 50;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeColossus], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypePhoenix;
    data.unitType = "Phoenix";
    data.name = "凤凰";
    data.costPoints = 70;
    data.baseScale = 250;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypePhoenix], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeVoidRay;
    data.unitType = "VoidRay";
    data.name = "虚空辉光舰";
    data.costPoints = 240;
    data.baseScale = 200;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeVoidRay], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeHighTemplar;
    data.unitType = "HighTemplar";
    data.name = "高阶圣堂武士";
    data.costPoints = 110;
    data.baseScale = 300;
    data.servantScale = 150;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeHighTemplar], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeArchon;
    data.unitType = "Archon";
    data.name = "执政官";
    data.costPoints = 122;
    data.baseScale = 250;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeArchon], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeCarrier;
    data.unitType = "Carrier";
    data.name = "航母";
    data.costPoints = 720;
    data.baseScale = 180;
    data.servantScale = 80;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeCarrier], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeMothership;
    data.unitType = "Mothership";
    data.name = "母舰";
    data.costPoints = 600;
    data.baseScale = 150;
    data.servantScale = 50;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeMothership], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeOracle;
    data.unitType = "Oracle";
    data.name = "先知";
    data.costPoints = 150;
    data.baseScale = 150;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeOracle], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeTempest;
    data.unitType = "Tempest";
    data.name = "风暴战舰";
    data.costPoints = 240;
    data.baseScale = 180;
    data.servantScale = 80;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeTempest], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeAdept;
    data.unitType = "Adept";
    data.name = "使徒";
    data.costPoints = 76;
    data.baseScale = 300;
    data.servantScale = 150;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeAdept], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeDisruptor;
    data.unitType = "Disruptor";
    data.name = "干扰者";
    data.costPoints = 150;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeDisruptor], data);

    // 建筑
    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeAutoTurret;
    data.unitType = "AutoTurret";
    data.name = "自动机炮";
    data.baseScale = 300;
    data.lifeMax = 10000;
    data.shieldsMax = 10000;
    data.costPoints = 2000;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeAutoTurret], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeKorhalBaseDoor;
    data.unitType = "KorhalBaseDoor";
    data.name = "基地门";
    data.lifeMax = 10000;
    data.shieldsMax = 10000;
    data.costPoints = 2000;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeKorhalBaseDoor], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeShadowShieldGenerator;
    data.unitType = "ShadowShieldGenerator";
    data.name = "暗影护盾生成器";
    data.lifeMax = 20000;
    data.shieldsMax = 20000;
    data.costPoints = 5000;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeShadowShieldGenerator], data);

    for (lv_index = 0; lv_index < c_UnitDataTypesCount; lv_index += 1) {
        if (gv_unitdata_unitTypes[lv_index].costPoints > 0) {
            gv_unitdata_unitTypes[lv_index].rewardPoints = gv_unitdata_unitTypes[lv_index].costPoints / 5;
        }
        if (gv_unitdata_unitTypes[lv_index].baseScale <= 0) {
            gv_unitdata_unitTypes[lv_index].baseScale = 100;
        }
        if (gv_unitdata_unitTypes[lv_index].servantScale <= 0) {
            gv_unitdata_unitTypes[lv_index].servantScale = 100;
        }
        if (gv_unitdata_unitTypes[lv_index].lifeMax <= 0) {
            gv_unitdata_unitTypes[lv_index].lifeMax = CatalogReferenceGetAsInt("Unit," + gv_unitdata_unitTypes[lv_index].unitType + ",LifeMax", arena_gv_directorPlayer);
        }
        if (gv_unitdata_unitTypes[lv_index].shieldsMax <= 0) {
            gv_unitdata_unitTypes[lv_index].shieldsMax = CatalogReferenceGetAsInt("Unit," + gv_unitdata_unitTypes[lv_index].unitType + ",ShieldsMax", arena_gv_directorPlayer);
        }
    }

    gv_unitdata_races[0] = "人类(t)";
    gv_unitdata_races[1] = "异虫(z)";
    gv_unitdata_races[2] = "星灵(p)";
    unitdata_InitUnitMatrix();
    gv_unitdata_unitMatrix[0][0] = c_UnitDataTypeMarine;
    gv_unitdata_unitMatrix[0][1] = c_UnitDataTypeMarauder;
    gv_unitdata_unitMatrix[0][2] = c_UnitDataTypeReaper;
    gv_unitdata_unitMatrix[0][3] = c_UnitDataTypeGhost;
    gv_unitdata_unitMatrix[0][4] = c_UnitDataTypesHellion;
    gv_unitdata_unitMatrix[0][5] = c_UnitDataTypesSiegeTank;
    gv_unitdata_unitMatrix[0][6] = c_UnitDataTypesThor;
    gv_unitdata_unitMatrix[0][7] = c_UnitDataTypeViking;
    gv_unitdata_unitMatrix[0][8] = c_UnitDataTypeBanshee;
    gv_unitdata_unitMatrix[0][9] = c_UnitDataTypesBattlecruiser;
    gv_unitdata_unitMatrix[0][10] = c_UnitDataTypeHellbat;
    gv_unitdata_unitMatrix[0][11] = c_UnitDataTypeLiberator;
    gv_unitdata_unitMatrix[0][12] = c_UnitDataTypeCyclone;

    gv_unitdata_unitMatrix[1][0] = c_UnitDataTypeZergling;
    gv_unitdata_unitMatrix[1][1] = c_UnitDataTypeQueen;
    gv_unitdata_unitMatrix[1][2] = c_UnitDataTypeHydralisk;
    gv_unitdata_unitMatrix[1][3] = c_UnitDataTypeBaneling;
    gv_unitdata_unitMatrix[1][4] = c_UnitDataTypeRoach;
    gv_unitdata_unitMatrix[1][5] = c_UnitDataTypeMutalisk;
    gv_unitdata_unitMatrix[1][6] = c_UnitDataTypeCorruptor;
    gv_unitdata_unitMatrix[1][7] = c_UnitDataTypeUltralisk;
    gv_unitdata_unitMatrix[1][8] = c_UnitDataTypeBroodLord;
    gv_unitdata_unitMatrix[1][9] = c_UnitDataTypeViper;
    gv_unitdata_unitMatrix[1][10] = c_UnitDataTypeRavager;

    gv_unitdata_unitMatrix[2][0] = c_UnitDataTypeZealot;
    gv_unitdata_unitMatrix[2][1] = c_UnitDataTypeStalker;
    gv_unitdata_unitMatrix[2][2] = c_UnitDataTypeSentry;
    gv_unitdata_unitMatrix[2][3] = c_UnitDataTypeImmortal;
    gv_unitdata_unitMatrix[2][4] = c_UnitDataTypeColossus;
    gv_unitdata_unitMatrix[2][5] = c_UnitDataTypePhoenix;
    gv_unitdata_unitMatrix[2][6] = c_UnitDataTypeVoidRay;
    gv_unitdata_unitMatrix[2][7] = c_UnitDataTypeHighTemplar;
    gv_unitdata_unitMatrix[2][8] = c_UnitDataTypeArchon;
    gv_unitdata_unitMatrix[2][9] = c_UnitDataTypeCarrier;
    gv_unitdata_unitMatrix[2][10] = c_UnitDataTypeMothership;
    gv_unitdata_unitMatrix[2][11] = c_UnitDataTypeTempest;
    gv_unitdata_unitMatrix[2][12] = c_UnitDataTypeAdept;

    DataTableInstanceCreate();
    gv_unitdata_dataTypeOfUnitType = DataTableInstanceLastCreated();
    for (lv_index = 0; lv_index < c_UnitDataTypesCount; lv_index += 1) {
        DataTableInstanceSetInt(gv_unitdata_dataTypeOfUnitType, gv_unitdata_unitTypes[lv_index].unitType, lv_index);

        for (k = 0; k < c_UnitDataTypeAliasCount; k += 1) {
            if (!arena_gf_StringIsEmpty(gv_unitdata_unitTypes[lv_index].typeAlias[k])) {
                DataTableInstanceSetInt(gv_unitdata_dataTypeOfUnitType, gv_unitdata_unitTypes[lv_index].typeAlias[k], lv_index);
            }
        }
    }
}

static void unitdata_InitUnitMatrix() {
    int lv_level;
    int lv_index;

    for (lv_level = 0; lv_level < c_UnitDataRaceCount; lv_level += 1) {
        for (lv_index = 0; lv_index < c_UnitDataCapPerRace; lv_index += 1) {
            gv_unitdata_unitMatrix[lv_level][lv_index] = c_UnitDataTypesNone;
        }
    }
}