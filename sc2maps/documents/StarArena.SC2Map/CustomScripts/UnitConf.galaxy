// Variable Declarations
static int gv_unitdata_dataTypeOfUnitType;

const int c_UnitDataTypeAliasCount = 5;
struct UnitData {
    int dataType;
    string unitType;
    string name;
    string[c_UnitDataTypeAliasCount] typeAlias;
    int baseExp;
    int rewardExp;
    fixed baseScale;
    int score;
    int addPoints;
};
typedef structref<UnitData> UnitDataRef;

const int c_UnitDataTypesNone = -1;
// 单位
const int c_UnitDataTypeMengskSiegeTank = 0; // 精英攻城坦克
const int c_UnitDataTypeSiegeTank = 1; // 攻城坦克
const int c_UnitDataTypeThor = 2; // 雷神
const int c_UnitDataTypeMengskThor = 3; // 精英雷神
// 建筑
const int c_UnitDataTypeCommandCenter = 4; // 指挥中心
const int c_UnitDataTypeDestructibleGarage = 5; // 围墙
const int c_UnitDataTypeValhallaDestructibleWall = 6; // 围墙
const int c_UnitDataTypeKorhalPalaceTurret = 7; // 防御塔

const int c_UnitDataTypeCount = 8;

typedef UnitData[c_UnitDataTypeCount] UnitDataArray;

static UnitDataArray gv_unitdata_unitTypes;

// Function Declarations
void UnitDataCopy(UnitDataRef dest, UnitDataRef source);
bool UnitDataGet(int unitDataType, UnitDataRef outData);
bool UnitDataGetByUnitType(string unitType, UnitDataRef outData);
string UnitDataGetUnitType(int unitDataType);
bool UnitDataInitUnitProps(unit inUnit);
bool UnitDataSetUnitProp(int inProp, int inPoints, UnitDataRef inData, unit inUnit);
bool UnitDataInitPlayerUnitProps(UnitPlayerRef refPlayer, unit inUnit);
int UnitDataGetMaxExp(string type, int level);
void InitUnitData();

static void unitdata_InitUnitMatrix();

// Functions
void UnitDataCopy(UnitDataRef dest, UnitDataRef source) {
    int lv_index;

    dest.dataType = source.dataType;
    dest.unitType = source.unitType;
    dest.name = source.name;
    dest.baseExp = source.baseExp;
    dest.rewardExp = source.rewardExp;
    dest.baseScale = source.baseScale;
    dest.score = source.score;
    dest.addPoints = source.addPoints;

    for (lv_index = 0; lv_index < c_UnitDataTypeAliasCount; lv_index += 1) {
        dest.typeAlias[lv_index] = source.typeAlias[lv_index];
    }
}

bool UnitDataGet(int unitDataType, UnitDataRef outData) {
    if (unitDataType > c_UnitDataTypesNone && unitDataType < c_UnitDataTypeCount) {
        UnitDataCopy(outData, gv_unitdata_unitTypes[unitDataType]);
        return true;
    }
    return false;
}

bool UnitDataGetByUnitType(string unitType, UnitDataRef outData) {
    if (arena_gf_StringIsEmpty(unitType)) {
        return false;
    }
    if (!DataTableInstanceValueExists(gv_unitdata_dataTypeOfUnitType, unitType)) {
        return false;
    }
    UnitDataCopy(outData, gv_unitdata_unitTypes[DataTableInstanceGetInt(gv_unitdata_dataTypeOfUnitType, unitType)]);
    return true;
}

string UnitDataGetUnitType(int unitDataType) {
    return gv_unitdata_unitTypes[unitDataType].unitType;
}

bool UnitDataInitUnitProps(unit inUnit) {
    UnitData lv_unitData;
    if (!UnitDataGetByUnitType(UnitGetType(inUnit), lv_unitData)) {
        return false;
    }
    UnitSetScale(inUnit, lv_unitData.baseScale, lv_unitData.baseScale, lv_unitData.baseScale);
    return true;
}

bool UnitDataSetUnitProp(int inProp, int inPoints, UnitDataRef inData, unit inUnit) {
    string lv_behavior;
    int lv_points = inPoints;
    if (inProp < 0 || inProp >= c_unitPlayerPropsCap) {
        return false;
    }
    if (inProp == c_unitPlayerPropsMaxLife) {
        lv_behavior = "StarArenaMaxLifeEnhance";
    } else if (inProp == c_unitPlayerPropsDamageMultiplier) {
        lv_behavior = "StarArenaAttackDamageEnhance";
    } else if (inProp == c_unitPlayerPropsRangeMultiplier) {
        lv_behavior = "StarArenaAttackRangeEnhance";
    } else if (inProp == c_unitPlayerPropsMoveSpeed) {
        lv_behavior = "StarArenaMoveSpeedEnhance";
    } else if (inProp == c_unitPlayerPropsAttackSpeed) {
        lv_behavior = "StarArenaAttackSpeedEnhance";
    } else if (inProp == c_unitPlayerPropsMaxEnergy) {
        lv_behavior = "StarArenaMaxEnergyEnhance";
    } else if (inProp == c_unitplayerPropsToughness) {
        lv_behavior = "StarArenaToughnessEnhance";
    }
    if (lv_behavior != null) {
        UnitBehaviorRemove(inUnit, lv_behavior, UnitBehaviorCount(inUnit, lv_behavior));
        UnitBehaviorAdd(inUnit, lv_behavior, inUnit, lv_points);
    }
    return true;
}

bool UnitDataInitPlayerUnitProps(UnitPlayerRef refPlayer, unit inUnit) {
    UnitData lv_unitData;
    int lv_propIndex;
    if (!UnitDataGetByUnitType(refPlayer.unitType, lv_unitData)) {
        return false;
    }
    UnitSetScale(inUnit, lv_unitData.baseScale, lv_unitData.baseScale, lv_unitData.baseScale);
    for (lv_propIndex = 0; lv_propIndex < c_unitPlayerPropsCap; lv_propIndex += 1) {
        UnitDataSetUnitProp(lv_propIndex, refPlayer.props[lv_propIndex], lv_unitData, inUnit);
    }
    UnitSetPropertyInt(inUnit, c_unitPropLife, UnitGetPropertyInt(inUnit, c_unitPropLifeMax, true)-1);
    UnitSetPropertyInt(inUnit, c_unitPropEnergy, UnitGetPropertyInt(inUnit, c_unitPropEnergyMax, true)-1);
    UnitSetPropertyInt(inUnit, c_unitPropLife, UnitGetPropertyInt(inUnit, c_unitPropLifeMax, true));
    UnitSetPropertyInt(inUnit, c_unitPropEnergy, UnitGetPropertyInt(inUnit, c_unitPropEnergyMax, true));
    if (refPlayer.playerId == c_GameStatePlayerIdBlue) {
        UnitBehaviorAdd(inUnit, "StarArenaTeamBlue", inUnit, 1);
    } else if (refPlayer.playerId == c_GameStatePlayerIdRed) {
        UnitBehaviorAdd(inUnit, "StarArenaTeamRed", inUnit, 1);
    }
    return true;
}

int UnitDataGetMaxExp(string type, int level) {
    UnitData lv_unitData;
    if (!UnitDataGetByUnitType(type, lv_unitData)) {
        return 0;
    }
    return lv_unitData.baseExp * level / 4 + lv_unitData.baseExp;
}

void InitUnitData() {
    int lv_index;
    int k;
    UnitData emptyData;
    UnitData data;

    // 单位
    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeMengskSiegeTank;
    data.unitType = "MengskSiegeTank";
    data.name = "精英攻城坦克";
    data.typeAlias[0] = "MengskSiegeTankSieged";
    data.baseExp = 40;
    data.baseScale = 170;
    data.score = 10;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeMengskSiegeTank], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeSiegeTank;
    data.unitType = "SiegeTank";
    data.name = "攻城坦克";
    data.typeAlias[0] = "SiegeTankSieged";
    data.baseExp = 10;
    data.baseScale = 150;
    data.score = 1;
    data.addPoints = 1;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeSiegeTank], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeThor;
    data.unitType = "ThorAP";
    data.name = "雷神";
    data.baseExp = 10;
    data.baseScale = 150;
    data.score = 1;
    data.addPoints = 10;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeThor], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeMengskThor;
    data.unitType = "MengskThor";
    data.name = "战锤";
    data.baseExp = 10;
    data.baseScale = 150;
    data.score = 1;
    data.addPoints = 100;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeMengskThor], data);

    // 建筑
    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeCommandCenter;
    data.unitType = "CommandCenter";
    data.name = "指挥中心";
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeCommandCenter], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeDestructibleGarage;
    data.unitType = "DestructibleGarage";
    data.name = "围墙";
    data.baseExp = 20;
    data.score = 50;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeDestructibleGarage], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeValhallaDestructibleWall;
    data.unitType = "ValhallaDestructibleWall";
    data.name = "围墙";
    data.baseExp = 20;
    data.score = 50;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeValhallaDestructibleWall], data);

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypeKorhalPalaceTurret;
    data.unitType = "KorhalPalaceTurret";
    data.name = "防御塔";
    data.baseExp = 80;
    data.score = 200;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypeKorhalPalaceTurret], data);

    for (lv_index = 0; lv_index < c_UnitDataTypeCount; lv_index += 1) {
        if (gv_unitdata_unitTypes[lv_index].baseExp > 0 && gv_unitdata_unitTypes[lv_index].rewardExp <= 0) {
            gv_unitdata_unitTypes[lv_index].rewardExp = gv_unitdata_unitTypes[lv_index].baseExp;
        }
        if (gv_unitdata_unitTypes[lv_index].baseScale <= 0) {
            gv_unitdata_unitTypes[lv_index].baseScale = 100;
        }
    }

    DataTableInstanceCreate();
    gv_unitdata_dataTypeOfUnitType = DataTableInstanceLastCreated();
    for (lv_index = 0; lv_index < c_UnitDataTypeCount; lv_index += 1) {
        DataTableInstanceSetInt(gv_unitdata_dataTypeOfUnitType, gv_unitdata_unitTypes[lv_index].unitType, lv_index);

        for (k = 0; k < c_UnitDataTypeAliasCount; k += 1) {
            if (!arena_gf_StringIsEmpty(gv_unitdata_unitTypes[lv_index].typeAlias[k])) {
                DataTableInstanceSetInt(gv_unitdata_dataTypeOfUnitType, gv_unitdata_unitTypes[lv_index].typeAlias[k], lv_index);
            }
        }
    }
}
