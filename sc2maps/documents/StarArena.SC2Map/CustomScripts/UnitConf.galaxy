// Variable Declarations
static int gv_unitdata_dataTypeOfUnitType;

const int c_UnitDataTypeAliasCount = 5;
struct UnitData {
    int dataType;
    string unitType;
    string[c_UnitDataTypeAliasCount] typeAlias;
    int costPoints;
    int rewardPoints;
    string servantType;
    int willPoints;
};
typedef structref<UnitData> UnitDataRef;

const int c_UnitDataTypesNone = -1;
const int c_UnitDataTypesMengskHellion = 0;
const int c_UnitDataTypesSiegeTank = 1;
const int c_UnitDataTypesThorAP = 2;
const int c_UnitDataTypesBattlecruiser = 3;
const int c_UnitDataTypesCount = 4;

const int c_UnitDataLevelsCount = 5;
const int c_UnitDataCapPerLevel = 5;

typedef UnitData[c_UnitDataTypesCount] UnitDataArray;

static UnitDataArray gv_unitdata_unitTypes;
static int[c_UnitDataLevelsCount][c_UnitDataCapPerLevel] gv_unitdata_unitMatrix;

// Function Declarations
void UnitDataCopy(UnitDataRef dest, UnitDataRef source);
void UnitDataGet(int unitDataType, UnitDataRef outData);
bool UnitDataGetByUnitType(string unitType, UnitDataRef outData);
bool UnitDataGetByLevel(int level, int index, UnitDataRef outData);
void InitUnitData();

static void unitdata_InitUnitMatrix();

// Functions
void UnitDataCopy(UnitDataRef dest, UnitDataRef source) {
    int lv_index;

    dest.dataType = source.dataType;
    dest.unitType = source.unitType;
    dest.costPoints = source.costPoints;
    dest.rewardPoints = source.rewardPoints;
    dest.servantType = source.servantType;
    dest.willPoints = source.willPoints;

    for (lv_index = 0; lv_index < c_UnitDataTypeAliasCount; lv_index += 1) {
        dest.typeAlias[lv_index] = source.typeAlias[lv_index];
    }
}

void UnitDataGet(int unitDataType, UnitDataRef outData) {
    UnitDataCopy(outData, gv_unitdata_unitTypes[unitDataType]);
}

bool UnitDataGetByUnitType(string unitType, UnitDataRef outData) {
    if (arena_gf_StringIsEmpty(unitType)) {
        return false;
    }
    if (!DataTableInstanceValueExists(gv_unitdata_dataTypeOfUnitType, unitType)) {
        return false;
    }
    UnitDataCopy(outData, gv_unitdata_unitTypes[DataTableInstanceGetInt(gv_unitdata_dataTypeOfUnitType, unitType)]);
    return true;
}

bool UnitDataGetByLevel(int level, int index, UnitDataRef outData) {
    int lv_dataType;

    if (level < c_UnitDataLevelsCount && index < c_UnitDataCapPerLevel) {
        lv_dataType = gv_unitdata_unitMatrix[level][index];
        if (lv_dataType > c_UnitDataTypesNone) {
            UnitDataCopy(outData, gv_unitdata_unitTypes[lv_dataType]);
        }
        return true;
    }
    return false;
}

void InitUnitData() {
    int lv_index;
    int k;
    UnitData emptyData;
    UnitData data;

    data.dataType = c_UnitDataTypesMengskHellion;
    data.unitType = "MengskHellion";
    data.costPoints = 50;
    data.rewardPoints = 100;
    data.servantType = "MengskHellion";
    data.willPoints = 10;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypesMengskHellion], data);
    gv_unitdata_unitMatrix[0][0] = c_UnitDataTypesMengskHellion;

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypesSiegeTank;
    data.unitType = "SiegeTank";
    data.typeAlias[0] = "SiegeTankSieged";
    data.costPoints = 100;
    data.rewardPoints = 150;
    data.servantType = "SiegeTank";
    data.willPoints = 20;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypesSiegeTank], data);
    gv_unitdata_unitMatrix[1][0] = c_UnitDataTypesSiegeTank;

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypesThorAP;
    data.unitType = "ThorAP";
    data.typeAlias[0] = "Thor";
    data.costPoints = 300;
    data.rewardPoints = 200;
    data.servantType = "ThorAP";
    data.willPoints = 30;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypesThorAP], data);
    gv_unitdata_unitMatrix[2][0] = c_UnitDataTypesThorAP;

    UnitDataCopy(data, emptyData);
    data.dataType = c_UnitDataTypesBattlecruiser;
    data.unitType = "Battlecruiser";
    data.costPoints = 500;
    data.rewardPoints = 300;
    data.servantType = "Battlecruiser";
    data.willPoints = 40;
    UnitDataCopy(gv_unitdata_unitTypes[c_UnitDataTypesBattlecruiser], data);
    gv_unitdata_unitMatrix[3][0] = c_UnitDataTypesBattlecruiser;

    DataTableInstanceCreate();
    gv_unitdata_dataTypeOfUnitType = DataTableInstanceLastCreated();
    for (lv_index = 0; lv_index < c_UnitDataTypesCount; lv_index += 1) {
        DataTableInstanceSetInt(gv_unitdata_dataTypeOfUnitType, gv_unitdata_unitTypes[lv_index].unitType, lv_index);

        for (k = 0; k < c_UnitDataTypeAliasCount; k += 1) {
            if (!arena_gf_StringIsEmpty(gv_unitdata_unitTypes[lv_index].typeAlias[k])) {
                DataTableInstanceSetInt(gv_unitdata_dataTypeOfUnitType, gv_unitdata_unitTypes[lv_index].typeAlias[k], lv_index);
            }
        }
    }
}

static void unitdata_InitUnitMatrix() {
    int lv_level;
    int lv_index;

    for (lv_level = 0; lv_level < c_UnitDataLevelsCount; lv_level += 1) {
        for (lv_index = 0; lv_index < c_UnitDataCapPerLevel; lv_index += 1) {
            gv_unitdata_unitMatrix[lv_level][lv_index] = c_UnitDataTypesNone;
        }
    }
}