//--------------------------------------------------------------------------------------------------
// Library: Arena Library
//--------------------------------------------------------------------------------------------------
include "TriggerLibs/NativeLib"

// Constants
const string arena_gv_commandPrefix = "cmd-";
const string arena_gv_unitNamePrefix = "unit-name-";
const string arena_gv_unitTagPrefix = "unit-tag-";
const string arena_gv_unitBehaviorModePrefix = "unit-behavior-mode-";

// Variable Declarations
int arena_gv_directorPlayer;
int arena_gv_audiencePlayer;
unitgroup arena_gv_playerUnitGroup;

// Function Declarations
void arena_gf_InitbaseMap (camerainfo lp_mainCamera);
string arena_gf_CommandArgument (string lp_commandName, int lp_argumentIndex);
string arena_gf_CurrentCommandArgument (int lp_argumentIndex);
void arena_gf_DebugLog (string lp_message);
void arena_gf_ErrorLog (string lp_message);
void arena_gf_InfoLog (string lp_message);
void arena_gf_ShowMessage (string lp_message);
void arena_gf_ProcessCommand (string lp_commandMessage);
void arena_gf_DispatchCommand (string lp_name, string lp_arguments);
void arena_gf_CreateUnit (int lp_player, point lp_point, string lp_type, fixed lp_angle, fixed lp_scale, string lp_textTag, fixed lp_tagHeight);
void arena_gf_CreatePlayerUnit (int lp_player, string lp_type, string lp_textTag, fixed lp_scale, fixed lp_tagHeight);
unit arena_gf_UnitFromName (string lp_name);
string arena_gf_NameFromUnit (unit lp_unit);
void arena_gf_SetBehaviorMode (unit lp_unit, string lp_mode);

// Trigger Declarations
trigger arena_gt_ProcessCommand;
trigger arena_gt_MoveToward;
trigger arena_gt_SetBehaviorMode;
trigger arena_gt_KillUnit;
trigger arena_gt_BehaviorModeAction;
trigger arena_gt_CleanDeadUnit;

// Library Initialization
void arena_InitVariables ();

// External Library Initialization
void arena_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
void arena_InitVariables () {
    arena_gv_directorPlayer = 1;
    arena_gv_audiencePlayer = 2;
    arena_gv_playerUnitGroup = UnitGroupEmpty();
}

// Functions
void arena_gf_InitbaseMap (camerainfo lp_mainCamera) {
    // Automatic Variable Declarations
    // Implementation
    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
    libNtve_gf_HideGameUI(false, PlayerGroupSingle(arena_gv_audiencePlayer));
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTextTag, true);
    CameraApplyInfo(arena_gv_audiencePlayer, lp_mainCamera, 0.0, -1, 10.0, true);
    CameraApplyInfo(arena_gv_directorPlayer, lp_mainCamera, 0.0, -1, 10.0, true);
}

string arena_gf_CommandArgument (string lp_commandName, int lp_argumentIndex) {
    // Automatic Variable Declarations
    // Implementation
    string argument = DataTableGetString(false, TriggerEventParamName(lp_commandName, IntToString(lp_argumentIndex)));
    if (argument == null) {
        argument = "";
    }
    return argument;
}

string arena_gf_CurrentCommandArgument (int lp_argumentIndex) {
    // Automatic Variable Declarations
    // Implementation
    string argument = DataTableGetString(false, TriggerEventParamName(EventGenericName(), IntToString(lp_argumentIndex)));
    if (argument == null) {
        argument = "";
    }
    return argument;
}

void arena_gf_DebugLog (string lp_message) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(arena_gv_directorPlayer), c_messageAreaDebug, StringToText(lp_message));
}

void arena_gf_ErrorLog (string lp_message) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(arena_gv_directorPlayer), c_messageAreaError, StringToText(lp_message));
}

void arena_gf_InfoLog (string lp_message) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(arena_gv_directorPlayer), c_messageAreaSubtitle, StringToText(lp_message));
}

void arena_gf_ShowMessage (string lp_message) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaChat, StringToText(lp_message));
}

void arena_gf_ProcessCommand (string lp_commandMessage) {
    // Variable Declarations
    string lv_commandName;
    string lv_commandArguments;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_commandName = StringWord(lp_commandMessage, 1);
    lv_commandArguments = StringReplaceWord(lp_commandMessage, lv_commandName, "", 1, c_stringCase);

    // Implementation
    if ((lv_commandName != StringReplaceWord(lv_commandName, arena_gv_commandPrefix, "", 1, c_stringCase))) {
        lv_commandArguments = StringReplaceWord(lv_commandArguments, " ", "", 1, c_stringCase);
        arena_gf_DebugLog(("Process Command: " + lv_commandName + " " + lv_commandArguments));
        arena_gf_DispatchCommand(lv_commandName, lv_commandArguments);
    }

}

void arena_gf_DispatchCommand (string lp_name, string lp_arguments) {
    // Variable Declarations
    const string lv_dispatchEvent = "Execute Command";
    int lv_lastArgumentIndex;
    string lv_lastArgument;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lastArgumentIndex = 1;
    lv_lastArgument = "";

    // Implementation
    arena_gf_DebugLog(("Dispatch Command: " + lp_name + " " + lp_arguments));
    do {
        lv_lastArgument = StringWord(lp_arguments, lv_lastArgumentIndex);
        if ((lv_lastArgument != "")) {
            DataTableSetString(false, TriggerEventParamName(lp_name, IntToString(lv_lastArgumentIndex)), lv_lastArgument);
            arena_gf_DebugLog(("Dispatch Command Argument: " + IntToString(lv_lastArgumentIndex) + ": " + lv_lastArgument));
            lv_lastArgumentIndex = (lv_lastArgumentIndex+1);
        }

    }while ((lv_lastArgument != ""));
    DataTableSetString(false, TriggerEventParamName(lp_name, "Argument Count"), IntToString(lv_lastArgumentIndex));
    TriggerSendEvent(lp_name);
}

void arena_gf_CreateUnit (int lp_player, point lp_point, string lp_type, fixed lp_angle, fixed lp_scale, string lp_textTag, fixed lp_tagHeight) {
    // Variable Declarations
    fixed lv_realTagHeight;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitCreate(1, lp_type, 0, lp_player, lp_point, lp_angle);
    UnitGroupAdd(arena_gv_playerUnitGroup, UnitLastCreated());
    UnitSetScale(UnitLastCreated(), (lp_scale * 100.0), (lp_scale * 100.0), (lp_scale * 100.0));
    UnitSetTeamColorIndex(UnitLastCreated(), PlayerGetColorIndex(lp_player, false));
    if ((lp_textTag != "")) {
        lv_realTagHeight = (UnitGetHeight(UnitLastCreated()) + (lp_scale * lp_tagHeight));
        TextTagCreate(StringToText(lp_textTag), 22, UnitGetPosition(UnitLastCreated()), lv_realTagHeight, true, false, PlayerGroupAll());
        TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), lv_realTagHeight);
        DataTableSetUnit(true, (arena_gv_unitNamePrefix + lp_textTag), UnitLastCreated());
        DataTableSetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(UnitLastCreated()))), lp_textTag);
    }

}

void arena_gf_CreatePlayerUnit (int lp_player, string lp_type, string lp_textTag, fixed lp_scale, fixed lp_tagHeight) {
    // Variable Declarations
    point lv_startLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_startLocation = PlayerStartLocation(lp_player);
    arena_gf_CreateUnit(lp_player, lv_startLocation, lp_type, PointGetFacing(lv_startLocation), lp_scale, lp_textTag, lp_tagHeight);
}

unit arena_gf_UnitFromName (string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(true, (arena_gv_unitNamePrefix + lp_name));
}

string arena_gf_NameFromUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lp_unit))));
}

void arena_gf_SetBehaviorMode (unit lp_unit, string lp_mode) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetString(true, (arena_gv_unitBehaviorModePrefix + IntToString(UnitGetTag(lp_unit))), lp_mode);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Process Command
//--------------------------------------------------------------------------------------------------
bool arena_gt_ProcessCommand_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_message;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_message = EventChatMessage(false);

    // Actions
    if (!runActions) {
        return true;
    }

    arena_gf_ProcessCommand(lv_message);
    return true;
}

//--------------------------------------------------------------------------------------------------
void arena_gt_ProcessCommand_Init () {
    arena_gt_ProcessCommand = TriggerCreate("arena_gt_ProcessCommand_Func");
    TriggerAddEventChatMessage(arena_gt_ProcessCommand, (arena_gv_directorPlayer), arena_gv_commandPrefix, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move Toward
//--------------------------------------------------------------------------------------------------
bool arena_gt_MoveToward_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitName;
    string lv_angle;
    string lv_distance;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitName = arena_gf_CurrentCommandArgument(1);
    lv_angle = arena_gf_CurrentCommandArgument(2);
    lv_distance = arena_gf_CurrentCommandArgument(3);
    lv_unit = DataTableGetUnit(true, (arena_gv_unitNamePrefix + lv_unitName));

    // Conditions
    if (testConds) {
        if (!((lv_unit != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_unit), StringToFixed(lv_distance), StringToFixed(lv_angle))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void arena_gt_MoveToward_Init () {
    arena_gt_MoveToward = TriggerCreate("arena_gt_MoveToward_Func");
    TriggerAddEventGeneric(arena_gt_MoveToward, (arena_gv_commandPrefix + "move-toward"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Behavior Mode
//--------------------------------------------------------------------------------------------------
bool arena_gt_SetBehaviorMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitName;
    string lv_behaviorMode;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitName = arena_gf_CurrentCommandArgument(1);
    lv_behaviorMode = arena_gf_CurrentCommandArgument(2);
    lv_unit = DataTableGetUnit(true, (arena_gv_unitNamePrefix + lv_unitName));

    // Conditions
    if (testConds) {
        if (!((lv_unit != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    arena_gf_DebugLog(("Set Behavior Mode:" + (arena_gv_unitBehaviorModePrefix + IntToString(UnitGetTag(lv_unit))) + " " + lv_behaviorMode));
    DataTableSetString(true, (arena_gv_unitBehaviorModePrefix + IntToString(UnitGetTag(lv_unit))), lv_behaviorMode);
    UnitIssueOrder(lv_unit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void arena_gt_SetBehaviorMode_Init () {
    arena_gt_SetBehaviorMode = TriggerCreate("arena_gt_SetBehaviorMode_Func");
    TriggerAddEventGeneric(arena_gt_SetBehaviorMode, (arena_gv_commandPrefix + "set-behavior-mode"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Unit
//--------------------------------------------------------------------------------------------------
bool arena_gt_KillUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitName;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitName = arena_gf_CurrentCommandArgument(1);
    lv_unit = DataTableGetUnit(true, (arena_gv_unitNamePrefix + lv_unitName));

    // Conditions
    if (testConds) {
        if (!((lv_unit != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    arena_gf_DebugLog(("Kill Unit: " + lv_unitName));
    UnitKill(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void arena_gt_KillUnit_Init () {
    arena_gt_KillUnit = TriggerCreate("arena_gt_KillUnit_Func");
    TriggerAddEventGeneric(arena_gt_KillUnit, (arena_gv_commandPrefix + "kill-unit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Mode Action
//--------------------------------------------------------------------------------------------------
bool arena_gt_BehaviorModeAction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_behaviorMode;

    // Automatic Variable Declarations
    string auto49C3A6FF_val;

    // Variable Initialization
    lv_behaviorMode = DataTableGetString(true, (arena_gv_unitBehaviorModePrefix + IntToString(UnitGetTag(EventUnit()))));

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(arena_gv_playerUnitGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    arena_gf_DebugLog(("Behavior Mode:" + (arena_gv_unitBehaviorModePrefix + IntToString(UnitGetTag(EventUnit()))) + " " + lv_behaviorMode));
    auto49C3A6FF_val = lv_behaviorMode;
    if (auto49C3A6FF_val == "attack") {
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("attack", 0), libNtve_gf_AcquiredTarget()), c_orderQueueReplace);

    }
    else if (auto49C3A6FF_val == "defence") {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);

    }
    else if (auto49C3A6FF_val == "retreat") {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 10.0, UnitGetFacing(libNtve_gf_AcquiredTarget()))), c_orderQueueReplace);

    }
    else {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void arena_gt_BehaviorModeAction_Init () {
    arena_gt_BehaviorModeAction = TriggerCreate("arena_gt_BehaviorModeAction_Func");
    TriggerAddEventUnitAcquiredTarget(arena_gt_BehaviorModeAction, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clean Dead Unit
//--------------------------------------------------------------------------------------------------
bool arena_gt_CleanDeadUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitTag;
    string lv_unitName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitTag = UnitGetTag(EventUnit());
    lv_unitName = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(lv_unitTag)));

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(arena_gv_playerUnitGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    arena_gf_DebugLog(("Unit Died: " + IntToString(lv_unitTag) + " " + lv_unitName));
    DataTableValueRemove(true, (arena_gv_unitBehaviorModePrefix + IntToString(lv_unitTag)));
    DataTableValueRemove(true, (arena_gv_unitTagPrefix + IntToString(lv_unitTag)));
    DataTableValueRemove(true, (arena_gv_unitNamePrefix + lv_unitName));
    UnitGroupRemove(arena_gv_playerUnitGroup, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void arena_gt_CleanDeadUnit_Init () {
    arena_gt_CleanDeadUnit = TriggerCreate("arena_gt_CleanDeadUnit_Func");
    TriggerAddEventUnitDied(arena_gt_CleanDeadUnit, null);
}

void arena_InitTriggers () {
    arena_gt_ProcessCommand_Init();
    arena_gt_MoveToward_Init();
    arena_gt_SetBehaviorMode_Init();
    arena_gt_KillUnit_Init();
    arena_gt_BehaviorModeAction_Init();
    arena_gt_CleanDeadUnit_Init();
}

bool arena_InitLib_completed = false;

void InitArenaLib() {
    if (arena_InitLib_completed) {
        return;
    }

    arena_InitLib_completed = true;

    arena_InitLibraries();
    arena_InitVariables();
    arena_InitTriggers();
}