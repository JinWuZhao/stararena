//--------------------------------------------------------------------------------------------------
// Library: Arena Library
//--------------------------------------------------------------------------------------------------
include "TriggerLibs/NativeLib"

// Constants
const string arena_gv_commandPrefix = "cmd-";
const string arena_gv_unitNamePrefix = "unit-name-";
const string arena_gv_unitTagPrefix = "unit-tag-";

// Variable Declarations
int arena_gv_directorPlayer;
int arena_gv_audiencePlayer;
unitgroup arena_gv_playerUnitGroup;

// Data tables
static int arena_gv_textTagByUnitTag;

// Function Declarations
void arena_gf_InitbaseMap (camerainfo lp_mainCamera);
string arena_gf_CommandArgument (string lp_commandName, int lp_argumentIndex);
string arena_gf_CurrentCommandArgument (int lp_argumentIndex);
void arena_gf_DebugLog (string lp_message);
void arena_gf_ErrorLog (string lp_message);
void arena_gf_InfoLog (string lp_message);
void arena_gf_ShowMessage (string lp_message);
void arena_gf_ProcessCommand (string lp_commandMessage);
void arena_gf_DispatchCommand (string lp_name, string lp_arguments);
unit arena_gf_CreateUnit (int lp_player, point lp_point, string lp_type, fixed lp_angle, fixed lp_scale, string lp_textTag, fixed lp_tagHeight, bool showTextTag);
unit arena_gf_UnitFromName (string lp_name);
bool arena_gf_StringIsEmpty(string lp_str);

// Trigger Declarations
trigger arena_gt_ProcessCommand;
trigger arena_gt_KillUnit;
trigger arena_gt_CleanDeadUnit;
trigger arena_gt_UnitLifeChange;

// Library Initialization
void arena_InitVariables ();

// External Library Initialization
void arena_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
void arena_InitVariables () {
    arena_gv_directorPlayer = 1;
    arena_gv_audiencePlayer = 2;
    arena_gv_playerUnitGroup = UnitGroupEmpty();
    DataTableInstanceCreate();
    arena_gv_textTagByUnitTag = DataTableInstanceLastCreated();
}

// Functions
void arena_gf_InitbaseMap (camerainfo lp_mainCamera) {
    // Automatic Variable Declarations
    // Implementation
    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
    libNtve_gf_HideGameUI(false, PlayerGroupSingle(arena_gv_audiencePlayer));
    libNtve_gf_HideGameUI(false, PlayerGroupSingle(arena_gv_directorPlayer));
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTextTag, true);
    CameraApplyInfo(arena_gv_audiencePlayer, lp_mainCamera, 0.0, -1, 10.0, true);
    CameraApplyInfo(arena_gv_directorPlayer, lp_mainCamera, 0.0, -1, 10.0, true);
}

string arena_gf_CommandArgument (string lp_commandName, int lp_argumentIndex) {
    // Automatic Variable Declarations
    // Implementation
    string argument = DataTableGetString(false, TriggerEventParamName(lp_commandName, IntToString(lp_argumentIndex)));
    if (argument == null) {
        argument = "";
    }
    return argument;
}

string arena_gf_CurrentCommandArgument (int lp_argumentIndex) {
    // Automatic Variable Declarations
    // Implementation
    string argument = DataTableGetString(false, TriggerEventParamName(EventGenericName(), IntToString(lp_argumentIndex)));
    if (argument == null) {
        argument = "";
    }
    return argument;
}

void arena_gf_DebugLog (string lp_message) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(arena_gv_directorPlayer), c_messageAreaDebug, StringToText(lp_message));
}

void arena_gf_ErrorLog (string lp_message) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(arena_gv_directorPlayer), c_messageAreaError, StringToText(lp_message));
}

void arena_gf_InfoLog (string lp_message) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(arena_gv_directorPlayer), c_messageAreaSubtitle, StringToText(lp_message));
}

void arena_gf_ShowMessage (string lp_message) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaChat, StringToText(lp_message));
}

void arena_gf_ProcessCommand (string lp_commandMessage) {
    // Variable Declarations
    string lv_commandName;
    string lv_commandArguments;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_commandName = StringWord(lp_commandMessage, 1);
    lv_commandArguments = StringReplaceWord(lp_commandMessage, lv_commandName, "", 1, c_stringCase);

    // Implementation
    if ((lv_commandName != StringReplaceWord(lv_commandName, arena_gv_commandPrefix, "", 1, c_stringCase))) {
        lv_commandArguments = StringReplaceWord(lv_commandArguments, " ", "", 1, c_stringCase);
        arena_gf_DispatchCommand(lv_commandName, lv_commandArguments);
    }

}

void arena_gf_DispatchCommand (string lp_name, string lp_arguments) {
    // Variable Declarations
    const string lv_dispatchEvent = "Execute Command";
    int lv_lastArgumentIndex;
    string lv_lastArgument;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lastArgumentIndex = 1;
    lv_lastArgument = "";

    // Implementation
    do {
        lv_lastArgument = StringWord(lp_arguments, lv_lastArgumentIndex);
        if ((!arena_gf_StringIsEmpty(lv_lastArgument))) {
            DataTableSetString(false, TriggerEventParamName(lp_name, IntToString(lv_lastArgumentIndex)), lv_lastArgument);
            lv_lastArgumentIndex = (lv_lastArgumentIndex+1);
        }

    }while (!arena_gf_StringIsEmpty(lv_lastArgument));
    DataTableSetString(false, TriggerEventParamName(lp_name, "Argument Count"), IntToString(lv_lastArgumentIndex));
    TriggerSendEvent(lp_name);
}

unit arena_gf_CreateUnit (int lp_player, point lp_point, string lp_type, fixed lp_angle, fixed lp_scale, string lp_textTag, fixed lp_tagHeight, bool showTextTag) {
    // Variable Declarations
    fixed lv_realTagHeight;
    fixed lv_unitHealth;
    unit lv_createdUnit;
    int lv_textTag;
    string lv_unitText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitCreate(1, lp_type, 0, lp_player, lp_point, lp_angle);
    lv_createdUnit = UnitLastCreated();
    UnitGroupAdd(arena_gv_playerUnitGroup, lv_createdUnit);
    UnitSetScale(lv_createdUnit, lp_scale, lp_scale, lp_scale);
    UnitSetTeamColorIndex(lv_createdUnit, PlayerGetColorIndex(lp_player, false));
    if (!arena_gf_StringIsEmpty(lp_textTag)) {
        if (showTextTag) {
            lv_realTagHeight = (UnitGetHeight(lv_createdUnit) + lp_scale / 100 + lp_tagHeight);
            lv_unitHealth = UnitGetPropertyFixed(lv_createdUnit, c_unitPropLifePercent, c_unitPropCurrent);
            lv_unitText = lp_textTag + " " + FixedToString(lv_unitHealth, 0) + "%";
            lv_textTag = TextTagCreate(StringToText(lv_unitText), 22, UnitGetPosition(lv_createdUnit), lv_realTagHeight, true, false, PlayerGroupAll());
            TextTagAttachToUnit(lv_textTag, lv_createdUnit, lv_realTagHeight);
            DataTableInstanceSetInt(arena_gv_textTagByUnitTag, IntToString(UnitGetTag(lv_createdUnit)), lv_textTag);
        }
        DataTableSetUnit(true, (arena_gv_unitNamePrefix + lp_textTag), lv_createdUnit);
        DataTableSetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_createdUnit))), lp_textTag);
    }
    return lv_createdUnit;
}

unit arena_gf_UnitFromName (string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(true, (arena_gv_unitNamePrefix + lp_name));
}

bool arena_gf_StringIsEmpty(string lp_str) {
    return lp_str == null || lp_str == "";
}

void arena_gf_CleanPlayerUnit(unit inUnit) {
    int lv_unitTag;
    string lv_unitName;

    lv_unitTag = UnitGetTag(inUnit);
    lv_unitName = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(lv_unitTag)));

    if (UnitGroupHasUnit(arena_gv_playerUnitGroup, inUnit)) {
        DataTableValueRemove(true, (arena_gv_unitTagPrefix + IntToString(lv_unitTag)));
        DataTableValueRemove(true, (arena_gv_unitNamePrefix + lv_unitName));
        UnitGroupRemove(arena_gv_playerUnitGroup, inUnit);
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Process Command
//--------------------------------------------------------------------------------------------------
bool arena_gt_ProcessCommand_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_message;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_message = EventChatMessage(false);

    // Actions
    if (!runActions) {
        return true;
    }

    arena_gf_ProcessCommand(lv_message);
    return true;
}

//--------------------------------------------------------------------------------------------------
void arena_gt_ProcessCommand_Init () {
    arena_gt_ProcessCommand = TriggerCreate("arena_gt_ProcessCommand_Func");
    TriggerAddEventChatMessage(arena_gt_ProcessCommand, (arena_gv_directorPlayer), arena_gv_commandPrefix, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Unit
//--------------------------------------------------------------------------------------------------
bool arena_gt_KillUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitName;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitName = arena_gf_CurrentCommandArgument(1);
    lv_unit = DataTableGetUnit(true, (arena_gv_unitNamePrefix + lv_unitName));

    if (!UnitIsAlive(lv_unit)) {
        return false;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void arena_gt_KillUnit_Init () {
    arena_gt_KillUnit = TriggerCreate("arena_gt_KillUnit_Func");
    TriggerAddEventGeneric(arena_gt_KillUnit, (arena_gv_commandPrefix + "kill-unit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clean Dead Unit
//--------------------------------------------------------------------------------------------------
bool arena_gt_CleanDeadUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitTag;
    string lv_unitName;
    int lv_textTag;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitTag = UnitGetTag(EventUnit());
    lv_unitName = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(lv_unitTag)));

    // Actions
    if (!runActions) {
        return true;
    }

    lv_textTag = DataTableInstanceGetInt(arena_gv_textTagByUnitTag, IntToString(UnitGetTag(EventUnit())));
    if (lv_textTag > 0) {
        DataTableInstanceValueRemove(arena_gv_textTagByUnitTag, IntToString(UnitGetTag(EventUnit())));
        TextTagDestroy(lv_textTag);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void arena_gt_CleanDeadUnit_Init () {
    arena_gt_CleanDeadUnit = TriggerCreate("arena_gt_CleanDeadUnit_Func");
    TriggerAddEventUnitDied(arena_gt_CleanDeadUnit, null);
}

bool arena_gt_UnitLifeChange_Func(bool testConds, bool runActions) {
    string lv_target;
    fixed lv_unitHealth;
    int lv_textTag;
    unit lv_unit;
    string lv_text;

    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_target = DataTableGetString(true, (arena_gv_unitTagPrefix + IntToString(UnitGetTag(lv_unit))));
    lv_unitHealth = UnitGetPropertyFixed(lv_unit, c_unitPropLifePercent, c_unitPropCurrent);
    lv_textTag = DataTableInstanceGetInt(arena_gv_textTagByUnitTag, IntToString(UnitGetTag(lv_unit)));
    if (lv_textTag > 0 && !arena_gf_StringIsEmpty(lv_target)) {
        lv_text = lv_target + " " + FixedToString(lv_unitHealth, 0) + "%";
        TextTagSetText(lv_textTag, StringToText(lv_text));
    }

    return true;
}

void arena_gt_UnitLifeChange_Init() {
    arena_gt_UnitLifeChange = TriggerCreate("arena_gt_UnitLifeChange_Func");
    TriggerAddEventUnitProperty(arena_gt_UnitLifeChange, null, c_unitPropLife);
}

void arena_InitTriggers () {
    arena_gt_ProcessCommand_Init();
    arena_gt_KillUnit_Init();
    arena_gt_CleanDeadUnit_Init();
    arena_gt_UnitLifeChange_Init();
}

bool arena_InitLib_completed = false;

void InitArenaLib() {
    if (arena_InitLib_completed) {
        return;
    }

    arena_InitLib_completed = true;

    arena_InitLibraries();
    arena_InitVariables();
    arena_InitTriggers();
}