// Trigger Declarations
static trigger gt_unitctrl_SetAIMode;
static trigger gt_unitctrl_MoveToward;
static trigger gt_unitctrl_SetWeapon;
static trigger gt_unitctrl_SetWeaponTest;
static trigger gt_unitctrl_AssignPoints;
static trigger gt_unitctrl_SetBehaviorTest;
static trigger gt_unitctrl_SetAbilityTest;
static trigger gt_unitctrl_SetAbility;
static trigger gt_unitctrl_ShowWeaponInfo;
static trigger gt_unitctrl_ShowAbilityInfo;

// Function Declarations
void InitUnitControl();

static void unitctrl_SetAIMode_Init();
static void unitctrl_MoveToward_Init();
static void unitctrl_SetWeapon_Init();
static void unitctrl_SetWeaponTest_Init();
static void unitctrl_AssignPoints_Init();
static void unitctrl_SetBehaviorTest_Init();
static void unitctrl_SetAbilityTest_Init();
static void unitctrl_SetAbility_Init();
static void unitctrl_ShowWeaponInfo_Init();
static void unitctrl_ShowAbilityInfo_Init();

// Functions
void InitUnitControl() {
    unitctrl_SetAIMode_Init();
    unitctrl_MoveToward_Init();
    unitctrl_SetWeapon_Init();
    unitctrl_SetWeaponTest_Init();
    unitctrl_AssignPoints_Init();
    unitctrl_SetBehaviorTest_Init();
    unitctrl_SetAbilityTest_Init();
    unitctrl_SetAbility_Init();
    unitctrl_ShowWeaponInfo_Init();
    unitctrl_ShowAbilityInfo_Init();
}

bool unitctrl_SetAIMode_Func(bool testConds, bool runActions) {
    string lv_textTag = arena_gf_CurrentCommandArgument(1);
    int lv_aiMode = StringToInt(arena_gf_CurrentCommandArgument(2));
    UnitPlayer lv_unitPlayer;
    unit lv_unit = DataTableGetUnit(true, (arena_gv_unitNamePrefix + lv_textTag));

    if (!AIModeValidMode(lv_aiMode)) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_textTag, lv_unitPlayer)) {
        return false;
    }

    if (UnitIsAlive(lv_unit)) {
        if (lv_unitPlayer.aiMode != c_AIModeDefence && lv_aiMode == c_AIModeDefence) {
            UnitIssueOrder(lv_unit, Order(AbilityCommand("SiegeMode", 0)), c_orderQueueReplace);
        } else if (lv_unitPlayer.aiMode == c_AIModeDefence && lv_aiMode != c_AIModeDefence) {
            UnitIssueOrder(lv_unit, Order(AbilityCommand("Unsiege", 0)), c_orderQueueReplace);
        }
    } else if (lv_aiMode == c_AIModeDefence) {
        return false;
    }

    AIModeSetMode(lv_unitPlayer, lv_aiMode);
    SaveUnitPlayer(lv_unitPlayer);

    return true;
}

static void unitctrl_SetAIMode_Init() {
    gt_unitctrl_SetAIMode = TriggerCreate("unitctrl_SetAIMode_Func");
    TriggerAddEventGeneric(gt_unitctrl_SetAIMode, (arena_gv_commandPrefix + "set-aimode"));
}

bool unitctrl_MoveToward_Func(bool testConds, bool runActions) {
    string lv_unitName;
    string lv_angle;
    string lv_distance;
    UnitPlayer lv_player;
    unit lv_unit;

    lv_unitName = arena_gf_CurrentCommandArgument(1);
    lv_angle = arena_gf_CurrentCommandArgument(2);
    lv_distance = arena_gf_CurrentCommandArgument(3);

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_unitName, lv_player)) {
        return false;
    }
    AIModeSetMode(lv_player, c_AIModeNone);
    SaveUnitPlayer(lv_player);

    lv_unit = DataTableGetUnit(true, (arena_gv_unitNamePrefix + lv_unitName));
    if (!UnitIsAlive(lv_unit)) {
        return false;
    }
    UnitIssueOrder(lv_unit, 
        OrderTargetingPoint(
            AbilityCommand("move", 0), 
            PointWithOffsetPolar(UnitGetPosition(lv_unit), StringToFixed(lv_distance), StringToFixed(lv_angle))), 
        c_orderQueueReplace);
    return true;
}

static void unitctrl_MoveToward_Init() {
    gt_unitctrl_MoveToward = TriggerCreate("unitctrl_MoveToward_Func");
    TriggerAddEventGeneric(gt_unitctrl_MoveToward, (arena_gv_commandPrefix + "move-toward"));
}

bool unitctrl_SetWeapon_Func(bool testConds, bool runActions) {
    string lv_name = arena_gf_CurrentCommandArgument(1);
    int lv_index = StringToInt(arena_gf_CurrentCommandArgument(2));
    string lv_weaponType = WeaponDataGetType(lv_index);
    UnitPlayer lv_player;
    unit lv_unit;

    if (!runActions) {
        return true;
    }

    if (arena_gf_StringIsEmpty(lv_weaponType)) {
        return false;
    }
    if (arena_gf_StringIsEmpty(lv_name) || !UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    lv_unit = DataTableGetUnit(true, (arena_gv_unitNamePrefix + lv_name));
    if (UnitIsAlive(lv_unit)) {
        WeaponDataApplyUnit(lv_player.weaponType, lv_weaponType, lv_unit);
    }

    lv_player.weaponType = lv_weaponType;
    SaveUnitPlayer(lv_player);

    arena_gf_ShowMessage(lv_player.name + " 切换武器 " + WeaponDataGetName(lv_index) + "(L" + IntToString(lv_index) + ")");

    return true;
}

static void unitctrl_SetWeapon_Init() {
    gt_unitctrl_SetWeapon = TriggerCreate("unitctrl_SetWeapon_Func");
    TriggerAddEventGeneric(gt_unitctrl_SetWeapon, (arena_gv_commandPrefix + "set-weapon"));
}

bool unitctrl_SetWeaponTest_Func(bool testConds, bool runActions) {
    string lv_name = arena_gf_CurrentCommandArgument(1);
    string lv_weaponType = arena_gf_CurrentCommandArgument(2);
    UnitPlayer lv_player;
    unit lv_unit;

    if (!runActions) {
        return true;
    }

    if (arena_gf_StringIsEmpty(lv_weaponType)) {
        return false;
    }
    if (arena_gf_StringIsEmpty(lv_name) || !UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    lv_unit = DataTableGetUnit(true, (arena_gv_unitNamePrefix + lv_name));
    if (UnitIsAlive(lv_unit)) {
        WeaponDataApplyUnit(lv_player.weaponType, lv_weaponType, lv_unit);
    }

    lv_player.weaponType = lv_weaponType;
    SaveUnitPlayer(lv_player);

    return true;
}

static void unitctrl_SetWeaponTest_Init() {
    gt_unitctrl_SetWeaponTest = TriggerCreate("unitctrl_SetWeaponTest_Func");
    TriggerAddEventGeneric(gt_unitctrl_SetWeaponTest, (arena_gv_commandPrefix + "set-weapon-test"));
}

bool unitctrl_AssignPoints_Func(bool testConds, bool runActions) {
    string lv_name = arena_gf_CurrentCommandArgument(1);
    int lv_propIndex = StringToInt(arena_gf_CurrentCommandArgument(2));
    int lv_points = StringToInt(arena_gf_CurrentCommandArgument(3));
    UnitPlayer lv_player;
    unit lv_unit;
    UnitData lv_data;
    int lv_originLife;
    int lv_originMaxLife;

    if (!runActions) {
        return false;
    }

    if (arena_gf_StringIsEmpty(lv_name) || !UnitPlayerFromName(lv_name, lv_player) || 
        lv_propIndex < 0 || lv_propIndex >= c_unitPlayerPropsCap || 
        lv_points <= 0 || lv_points > lv_player.points) {
        return false;
    }

    lv_player.points -= lv_points;
    lv_player.props[lv_propIndex] += lv_points;
    SaveUnitPlayer(lv_player);

    lv_unit = DataTableGetUnit(true, (arena_gv_unitNamePrefix + lv_name));
    if (UnitIsAlive(lv_unit) && UnitDataGetByUnitType(lv_player.unitType, lv_data)) {
        if (lv_propIndex == c_unitPlayerPropsMaxLife) {
            lv_originLife = UnitGetPropertyInt(lv_unit, c_unitPropLife, true);
            lv_originMaxLife = UnitGetPropertyInt(lv_unit, c_unitPropLifeMax, true);
        }
        lv_points = lv_player.props[lv_propIndex];
        UnitDataSetUnitProp(lv_propIndex, lv_points, lv_data, lv_unit);
        if (lv_propIndex == c_unitPlayerPropsMaxLife) {
            UnitSetPropertyInt(lv_unit, c_unitPropLife, lv_originLife * UnitGetPropertyInt(lv_unit, c_unitPropLifeMax, true) / lv_originMaxLife);
        }
    }
    return true;
}

static void unitctrl_AssignPoints_Init() {
    gt_unitctrl_AssignPoints = TriggerCreate("unitctrl_AssignPoints_Func");
    TriggerAddEventGeneric(gt_unitctrl_AssignPoints, (arena_gv_commandPrefix + "assign-points"));
}

bool unitctrl_SetBehaviorTest_Func(bool testConds, bool runActions) {
    string lv_name = arena_gf_CurrentCommandArgument(1);
    string lv_behavior = arena_gf_CurrentCommandArgument(2);
    int lv_count = StringToInt(arena_gf_CurrentCommandArgument(3));
    int lv_duration = StringToInt(arena_gf_CurrentCommandArgument(4));
    UnitPlayer lv_player;
    unit lv_unit = DataTableGetUnit(true, (arena_gv_unitNamePrefix + lv_name));

    if (!runActions) {
        return true;
    }

    if (arena_gf_StringIsEmpty(lv_name) || !UnitPlayerFromName(lv_name, lv_player) || !UnitIsAlive(lv_unit)) {
        return false;
    }
    UnitBehaviorAdd(lv_unit, lv_behavior, lv_unit, lv_count);
    if (lv_duration > 0) {
        UnitBehaviorSetDuration(lv_unit, lv_behavior, lv_duration);
    }
    return true;
}

static void unitctrl_SetBehaviorTest_Init() {
    gt_unitctrl_SetBehaviorTest = TriggerCreate("unitctrl_SetBehaviorTest_Func");
    TriggerAddEventGeneric(gt_unitctrl_SetBehaviorTest, (arena_gv_commandPrefix + "set-behavior-test"));
}

bool unitctrl_SetAbilityTest_Func(bool testConds, bool runActions) {
    string lv_name = arena_gf_CurrentCommandArgument(1);
    string lv_ability = arena_gf_CurrentCommandArgument(2);
    UnitPlayer lv_player;
    unit lv_unit;

    if(!runActions) {
        return true;
    }

    if (arena_gf_StringIsEmpty(lv_ability)) {
        return false;
    }

    if (arena_gf_StringIsEmpty(lv_name) || !UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    lv_player.abilityType = lv_ability;
    SaveUnitPlayer(lv_player);

    lv_unit = DataTableGetUnit(true, (arena_gv_unitNamePrefix + lv_name));
    if (UnitIsAlive(lv_unit)) {
        AbilityDataApply(lv_unit, lv_ability);
    }
    return true;
}

static void unitctrl_SetAbilityTest_Init() {
    gt_unitctrl_SetAbilityTest = TriggerCreate("unitctrl_SetAbilityTest_Func");
    TriggerAddEventGeneric(gt_unitctrl_SetAbilityTest, (arena_gv_commandPrefix + "set-ability-test"));
}

bool unitctrl_SetAbility_Func(bool testConds, bool runActions) {
    string lv_name = arena_gf_CurrentCommandArgument(1);
    int lv_index = StringToInt(arena_gf_CurrentCommandArgument(2));
    string lv_ability = AbilityDataGetType(lv_index);
    UnitPlayer lv_player;
    unit lv_unit;

    if(!runActions) {
        return true;
    }

    if (arena_gf_StringIsEmpty(lv_ability)) {
        return false;
    }

    if (arena_gf_StringIsEmpty(lv_name) || !UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }

    lv_player.abilityType = lv_ability;
    SaveUnitPlayer(lv_player);

    arena_gf_ShowMessage(lv_player.name + " 切换技能 " + AbilityDataGetName(lv_index) + "(K" + IntToString(lv_index) + ")");

    lv_unit = DataTableGetUnit(true, (arena_gv_unitNamePrefix + lv_name));
    if (UnitIsAlive(lv_unit)) {
        AbilityDataApply(lv_unit, lv_ability);
    }
    return true;
}

static void unitctrl_SetAbility_Init() {
    gt_unitctrl_SetAbility = TriggerCreate("unitctrl_SetAbility_Func");
    TriggerAddEventGeneric(gt_unitctrl_SetAbility, (arena_gv_commandPrefix + "set-ability"));
}

bool unitctrl_ShowWeaponInfo_Func(bool testConds, bool runActions) {
    int lv_index = StringToInt(arena_gf_CurrentCommandArgument(1));
    string lv_weapon = WeaponDataGetName(lv_index);

    if (!runActions) {
        return true;
    }

    if (arena_gf_StringIsEmpty(lv_weapon)) {
        return false;
    }
    arena_gf_ShowMessage("武器信息：" + lv_weapon + "(" + IntToString(lv_index) + ")");

    return true;
}

static void unitctrl_ShowWeaponInfo_Init() {
    gt_unitctrl_ShowWeaponInfo = TriggerCreate("unitctrl_ShowWeaponInfo_Func");
    TriggerAddEventGeneric(gt_unitctrl_ShowWeaponInfo, (arena_gv_commandPrefix + "show-weapon"));
}

bool unitctrl_ShowAbilityInfo_Func(bool testConds, bool runActions) {
    int lv_index = StringToInt(arena_gf_CurrentCommandArgument(1));
    AbilityData lv_ability;

    if (!runActions) {
        return true;
    }

    if (!AbilityDataGet(lv_index, lv_ability)) {
        return false;
    }
    arena_gf_ShowMessage("技能信息：" + lv_ability.name + "(" + IntToString(lv_index) + ")，");

    return true;
}

static void unitctrl_ShowAbilityInfo_Init() {
    gt_unitctrl_ShowAbilityInfo = TriggerCreate("unitctrl_ShowAbilityInfo_Func");
    TriggerAddEventGeneric(gt_unitctrl_ShowAbilityInfo, (arena_gv_commandPrefix + "show-ability"));
}