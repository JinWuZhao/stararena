// Trigger Declarations
static trigger gt_unitctrl_SetAIMode;
static trigger gt_unitctrl_SetUnit;
static trigger gt_unitctrl_SetServants;
static trigger gt_unitctrl_MoveToward;

// Function Declarations
void InitUnitControl();

static void unitctrl_SetAIMode_Init();
static void unitctrl_SetUnit_Init();
static void unitctrl_SetServants_Init();
static void unitctrl_MoveToward_Init();

// Functions
void InitUnitControl() {
    unitctrl_SetAIMode_Init();
    unitctrl_SetUnit_Init();
    unitctrl_SetServants_Init();
    unitctrl_MoveToward_Init();
}

bool unitctrl_SetAIMode_Func(bool testConds, bool runActions) {
    string lv_textTag;
    int lv_aiMode;
    UnitPlayer lv_unitPlayer;

    lv_textTag = arena_gf_CurrentCommandArgument(1);
    lv_aiMode = StringToInt(arena_gf_CurrentCommandArgument(2));
    if (!AIModeValidMode(lv_aiMode)) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_textTag, lv_unitPlayer)) {
        return false;
    }

    AIModeSetMode(lv_unitPlayer, lv_aiMode);
    SaveUnitPlayer(lv_unitPlayer);

    return true;
}

static void unitctrl_SetAIMode_Init() {
    gt_unitctrl_SetAIMode = TriggerCreate("unitctrl_SetAIMode_Func");
    TriggerAddEventGeneric(gt_unitctrl_SetAIMode, (arena_gv_commandPrefix + "set-aimode"));
}

bool unitctrl_SetUnit_Func(bool testConds, bool runActions) {
    string lv_name = arena_gf_CurrentCommandArgument(1);
    string lv_unitType = arena_gf_CurrentCommandArgument(2);
    UnitPlayer lv_player;
    UnitData lv_unitData;

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_name, lv_player)) {
        return false;
    }
    if (!UnitDataGetByUnitType(lv_unitType, lv_unitData)) {
        return false;
    }
    lv_player.unitType = lv_unitType;
    SaveUnitPlayer(lv_player);

    return true;
}

static void unitctrl_SetUnit_Init() {
    gt_unitctrl_SetUnit = TriggerCreate("unitctrl_SetUnit_Func");
    TriggerAddEventGeneric(gt_unitctrl_SetUnit, (arena_gv_commandPrefix + "set-unit"));
}

bool unitctrl_SetServants_Func(bool testConds, bool runActions) {
    string lv_playerName = arena_gf_CurrentCommandArgument(1);
    int lv_servantsNum = StringToInt(arena_gf_CurrentCommandArgument(2));
    string lv_servantType = arena_gf_CurrentCommandArgument(3);
    UnitPlayer lv_unitPlayer;
    UnitData lv_unitData;

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_playerName, lv_unitPlayer)) {
        return false;
    }

    lv_unitPlayer.servants = lv_servantsNum;
    if (UnitDataGetByUnitType(lv_servantType, lv_unitData)) {
        lv_unitPlayer.servantType = lv_servantType;
    }
    SaveUnitPlayer(lv_unitPlayer);

    return true;
}

static void unitctrl_SetServants_Init() {
    gt_unitctrl_SetServants = TriggerCreate("unitctrl_SetServants_Func");
    TriggerAddEventGeneric(gt_unitctrl_SetServants, (arena_gv_commandPrefix + "set-servants"));
}

bool unitctrl_MoveToward_Func(bool testConds, bool runActions) {
    string lv_unitName;
    string lv_angle;
    string lv_distance;
    UnitPlayer lv_player;
    unit lv_unit;
    unitgroup lv_servants;

    lv_unitName = arena_gf_CurrentCommandArgument(1);
    lv_angle = arena_gf_CurrentCommandArgument(2);
    lv_distance = arena_gf_CurrentCommandArgument(3);

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_unitName, lv_player)) {
        return false;
    }
    AIModeSetMode(lv_player, c_AIModeNone);
    SaveUnitPlayer(lv_player);

    lv_unit = DataTableGetUnit(true, (arena_gv_unitNamePrefix + lv_unitName));
    if (!UnitIsValid(lv_unit)) {
        return false;
    }
    UnitIssueOrder(lv_unit, 
        OrderTargetingPoint(
            AbilityCommand("move", 0), 
            PointWithOffsetPolar(UnitGetPosition(lv_unit), StringToFixed(lv_distance), StringToFixed(lv_angle))), 
        c_orderQueueReplace);
    lv_servants = ServantGetUnits(lv_player.name);
    if (lv_servants != null) {
        UnitGroupIssueOrder(lv_servants, 
            OrderTargetingPoint(
                AbilityCommand("move", 0), 
                PointWithOffsetPolar(UnitGetPosition(lv_unit), StringToFixed(lv_distance)+4, StringToFixed(lv_angle))), 
            c_orderQueueReplace);
    }
    return true;
}

static void unitctrl_MoveToward_Init() {
    gt_unitctrl_MoveToward = TriggerCreate("unitctrl_MoveToward_Func");
    TriggerAddEventGeneric(gt_unitctrl_MoveToward, (arena_gv_commandPrefix + "move-toward"));
}
