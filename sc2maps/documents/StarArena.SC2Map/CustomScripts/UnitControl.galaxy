// Trigger Declarations
static trigger gt_unitctrl_SetAIMode;
static trigger gt_unitctrl_CreateThor;
static trigger gt_unitctrl_CreateBattlecruiser;
static trigger gt_unitctrl_CreateSiegeTank;
static trigger gt_unitctrl_CreateHellion;
static trigger gt_unitctrl_IssueAbilityThor;
static trigger gt_unitctrl_IssueAbilityBattlecruiser;
static trigger gt_unitctrl_IssueAbilitySiegeTank;

// Function Declarations
void InitUnitControl();

static bool unitctrl_CreateUnitByDataType(string name, int dataType);

static void unitctrl_SetAIMode_Init();
static void unitctrl_CreateThor_Init();
static void unitctrl_CreateBattlecruiser_Init();
static void unitctrl_CreateSiegeTank_Init();
static void unitctrl_CreateHellion_Init();
static void unitctrl_IssueAbilityThor_Init();
static void unitctrl_IssueAbilityBattlecruiser_Init();
static void unitctrl_IssueAbilitySiegeTank_Init();

// Functions
void InitUnitControl() {
    unitctrl_SetAIMode_Init();
    unitctrl_CreateThor_Init();
    unitctrl_CreateBattlecruiser_Init();
    unitctrl_CreateSiegeTank_Init();
    unitctrl_CreateHellion_Init();
    unitctrl_IssueAbilityThor_Init();
    unitctrl_IssueAbilityBattlecruiser_Init();
    unitctrl_IssueAbilitySiegeTank_Init();
}

static bool unitctrl_CreateUnitByDataType(string name, int dataType) {
    UnitPlayer lv_unitPlayer;
    UnitData lv_unitData;

    if (!UnitPlayerFromName(name, lv_unitPlayer)) {
        return false;
    }
    UnitDataGet(dataType, lv_unitData);
    lv_unitPlayer.unitType = lv_unitData.unitType;
    SaveUnitPlayer(lv_unitPlayer);
    return true;
}

bool unitctrl_SetAIMode_Func(bool testConds, bool runActions) {
    string lv_textTag;
    int lv_aiMode;
    UnitPlayer lv_unitPlayer;
    unit lv_unit;

    lv_textTag = arena_gf_CurrentCommandArgument(1);
    lv_aiMode = StringToInt(arena_gf_CurrentCommandArgument(2));
    if (!AIModeValidMode(lv_aiMode)) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_textTag, lv_unitPlayer)) {
        return false;
    }

    lv_unit = DataTableGetUnit(true, arena_gv_unitNamePrefix + lv_textTag);
    if (lv_unit != null) {
        UnitIssueOrder(lv_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    lv_unitPlayer.aiMode = lv_aiMode;
    SaveUnitPlayer(lv_unitPlayer);

    return true;
}

static void unitctrl_SetAIMode_Init() {
    gt_unitctrl_SetAIMode = TriggerCreate("unitctrl_SetAIMode_Func");
    TriggerAddEventGeneric(gt_unitctrl_SetAIMode, (arena_gv_commandPrefix + "set-aimode"));
}

bool unitctrl_CreateThor_Func(bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }

    return unitctrl_CreateUnitByDataType(arena_gf_CurrentCommandArgument(1), c_UnitDataTypesThorAP);
}

static void unitctrl_CreateThor_Init () {
    gt_unitctrl_CreateThor = TriggerCreate("unitctrl_CreateThor_Func");
    TriggerAddEventGeneric(gt_unitctrl_CreateThor, (arena_gv_commandPrefix + "create-thor"));
}

bool unitctrl_CreateBattlecruiser_Func(bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }

    return unitctrl_CreateUnitByDataType(arena_gf_CurrentCommandArgument(1), c_UnitDataTypesBattlecruiser);
}

static void unitctrl_CreateBattlecruiser_Init() {
    gt_unitctrl_CreateBattlecruiser = TriggerCreate("unitctrl_CreateBattlecruiser_Func");
    TriggerAddEventGeneric(gt_unitctrl_CreateBattlecruiser, (arena_gv_commandPrefix + "create-battlecruiser"));
}

bool unitctrl_CreateSiegeTank_Func(bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }

    return unitctrl_CreateUnitByDataType(arena_gf_CurrentCommandArgument(1), c_UnitDataTypesSiegeTank);
}

static void unitctrl_CreateSiegeTank_Init() {
    gt_unitctrl_CreateSiegeTank = TriggerCreate("unitctrl_CreateSiegeTank_Func");
    TriggerAddEventGeneric(gt_unitctrl_CreateSiegeTank, (arena_gv_commandPrefix + "create-siege-tank"));
}

bool unitctrl_CreateHellion_Func(bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }

    return unitctrl_CreateUnitByDataType(arena_gf_CurrentCommandArgument(1), c_UnitDataTypesMengskHellion);
}

static void unitctrl_CreateHellion_Init() {
    gt_unitctrl_CreateHellion = TriggerCreate("unitctrl_CreateHellion_Func");
    TriggerAddEventGeneric(gt_unitctrl_CreateHellion, (arena_gv_commandPrefix + "create-hellion"));
}

bool unitctrl_IssueAbilityThor_Func(bool testConds, bool runActions) {
    string lv_unitName;
    string lv_unitAbility;
    unit lv_unit;
    UnitPlayer unitPlayer;
    UnitData lv_unitData;

    lv_unitName = arena_gf_CurrentCommandArgument(1);
    lv_unitAbility = arena_gf_CurrentCommandArgument(2);
    lv_unit = DataTableGetUnit(true, (arena_gv_unitNamePrefix + lv_unitName));

    if (lv_unit == null) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_unitName, unitPlayer)) {
        return false;
    }
    if (!UnitDataGetByUnitType(UnitGetType(lv_unit), lv_unitData)) {
        return false;
    }
    if (unitPlayer.unitType != lv_unitData.unitType) {
        return false;
    }

    if (lv_unitAbility == "explosive-payload") {
        UnitIssueOrder(lv_unit, Order(AbilityCommand("ThorNormalMode", 0)), c_orderQueueReplace);
    }
    else if (lv_unitAbility == "high-impact-payload") {
        UnitIssueOrder(lv_unit, Order(AbilityCommand("ThorAPMode", 0)), c_orderQueueReplace);
    }
    return true;
}

static void unitctrl_IssueAbilityThor_Init() {
    gt_unitctrl_IssueAbilityThor = TriggerCreate("unitctrl_IssueAbilityThor_Func");
    TriggerAddEventGeneric(gt_unitctrl_IssueAbilityThor, (arena_gv_commandPrefix + "issue-ability-thor"));
}

bool unitctrl_IssueAbilityBattlecruiser_Func(bool testConds, bool runActions) {
    string lv_unitName;
    string lv_unitAbility;
    string lv_angle;
    string lv_distance;
    unit lv_unit;
    UnitPlayer unitPlayer;
    UnitData lv_unitData;

    lv_unitName = arena_gf_CurrentCommandArgument(1);
    lv_unitAbility = arena_gf_CurrentCommandArgument(2);
    lv_angle = arena_gf_CurrentCommandArgument(3);
    lv_distance = arena_gf_CurrentCommandArgument(4);
    lv_unit = DataTableGetUnit(true, (arena_gv_unitNamePrefix + lv_unitName));

    if (lv_unit == null) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_unitName, unitPlayer)) {
        return false;
    }
    if (!UnitDataGetByUnitType(UnitGetType(lv_unit), lv_unitData)) {
        return false;
    }
    if (unitPlayer.unitType != lv_unitData.unitType) {
        return false;
    }

    if (lv_unitAbility == "yamato-cannon") {
        UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("Yamato", 0), OrderGetTargetUnit(UnitOrder(lv_unit, 0))), c_orderQueueReplace);
    }
    else if (lv_unitAbility == "tactical-jump") {
        UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("Hyperjump", 0), PointWithOffsetPolar(UnitGetPosition(lv_unit), StringToFixed(lv_distance), StringToFixed(lv_angle))), c_orderQueueReplace);
    }
    return true;
}

static void unitctrl_IssueAbilityBattlecruiser_Init() {
    gt_unitctrl_IssueAbilityBattlecruiser = TriggerCreate("unitctrl_IssueAbilityBattlecruiser_Func");
    TriggerAddEventGeneric(gt_unitctrl_IssueAbilityBattlecruiser, (arena_gv_commandPrefix + "issue-ability-battlecruiser"));
}

bool unitctrl_IssueAbilitySiegeTank_Func(bool testConds, bool runActions) {
    string lv_unitName;
    string lv_unitAbility;
    unit lv_unit;
    UnitPlayer unitPlayer;
    UnitData lv_unitData;

    lv_unitName = arena_gf_CurrentCommandArgument(1);
    lv_unitAbility = arena_gf_CurrentCommandArgument(2);
    lv_unit = DataTableGetUnit(true, (arena_gv_unitNamePrefix + lv_unitName));

    if (lv_unit == null) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    if (!UnitPlayerFromName(lv_unitName, unitPlayer)) {
        return false;
    }
    if (!UnitDataGetByUnitType(UnitGetType(lv_unit), lv_unitData)) {
        return false;
    }
    if (unitPlayer.unitType != lv_unitData.unitType) {
        return false;
    }

    if (lv_unitAbility == "siege-mode") {
        UnitIssueOrder(lv_unit, Order(AbilityCommand("SiegeMode", 0)), c_orderQueueReplace);
    }
    else if (lv_unitAbility == "tank-mode") {
        UnitIssueOrder(lv_unit, Order(AbilityCommand("Unsiege", 0)), c_orderQueueReplace);
    }
    return true;
}

static void unitctrl_IssueAbilitySiegeTank_Init() {
    gt_unitctrl_IssueAbilitySiegeTank = TriggerCreate("unitctrl_IssueAbilitySiegeTank_Func");
    TriggerAddEventGeneric(gt_unitctrl_IssueAbilitySiegeTank, (arena_gv_commandPrefix + "issue-ability-siege-tank"));
}